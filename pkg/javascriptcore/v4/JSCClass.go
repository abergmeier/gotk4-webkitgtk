// Code generated by girgen. DO NOT EDIT.

package javascriptcore

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: javascriptcoregtk-4.0 webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <jsc/jsc.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.jsc_class_get_type()), F: marshalClasser},
	})
}

type Class struct {
	*externglib.Object
}

func wrapClass(obj *externglib.Object) *Class {
	return &Class{
		Object: obj,
	}
}

func marshalClasser(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapClass(obj), nil
}

// Name: get the class name of jsc_class
func (jscClass *Class) Name() string {
	var _arg0 *C.JSCClass // out
	var _cret *C.char     // in

	_arg0 = (*C.JSCClass)(unsafe.Pointer(jscClass.Native()))

	_cret = C.jsc_class_get_name(_arg0)
	runtime.KeepAlive(jscClass)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Parent: get the parent class of jsc_class
func (jscClass *Class) Parent() *Class {
	var _arg0 *C.JSCClass // out
	var _cret *C.JSCClass // in

	_arg0 = (*C.JSCClass)(unsafe.Pointer(jscClass.Native()))

	_cret = C.jsc_class_get_parent(_arg0)
	runtime.KeepAlive(jscClass)

	var _class *Class // out

	_class = wrapClass(externglib.Take(unsafe.Pointer(_cret)))

	return _class
}

// ClassVTable: virtual table for a JSCClass. This can be optionally used when
// registering a CClass in a CContext to provide a custom implementation for the
// class. All virtual functions are optional and can be set to NULL to fallback
// to the default implementation.
//
// An instance of this type is always passed by reference.
type ClassVTable struct {
	*classVTable
}

// classVTable is the struct that's finalized.
type classVTable struct {
	native *C.JSCClassVTable
}
