// Code generated by girgen. DO NOT EDIT.

package javascriptcore

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <jsc/jsc.h>
// extern void _gotk4_javascriptcore4_WeakValue_ConnectCleared(gpointer, guintptr);
import "C"

// glib.Type values for JSCWeakValue.go.
var GTypeWeakValue = externglib.Type(C.jsc_weak_value_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeWeakValue, F: marshalWeakValue},
	})
}

// WeakValueOverrider contains methods that are overridable.
type WeakValueOverrider interface {
}

type WeakValue struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*WeakValue)(nil)
)

func classInitWeakValueer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapWeakValue(obj *externglib.Object) *WeakValue {
	return &WeakValue{
		Object: obj,
	}
}

func marshalWeakValue(p uintptr) (interface{}, error) {
	return wrapWeakValue(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_javascriptcore4_WeakValue_ConnectCleared
func _gotk4_javascriptcore4_WeakValue_ConnectCleared(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectCleared: this signal is emitted when the JavaScript value is
// destroyed.
func (weakValue *WeakValue) ConnectCleared(f func()) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(weakValue, "cleared", false, unsafe.Pointer(C._gotk4_javascriptcore4_WeakValue_ConnectCleared), f)
}

// NewWeakValue: create a new CWeakValue for the JavaScript value referenced by
// value.
//
// The function takes the following parameters:
//
//    - value: CValue.
//
// The function returns the following values:
//
//    - weakValue: new CWeakValue.
//
func NewWeakValue(value *Value) *WeakValue {
	var _arg1 *C.JSCValue     // out
	var _cret *C.JSCWeakValue // in

	_arg1 = (*C.JSCValue)(unsafe.Pointer(externglib.InternObject(value).Native()))

	_cret = C.jsc_weak_value_new(_arg1)
	runtime.KeepAlive(value)

	var _weakValue *WeakValue // out

	_weakValue = wrapWeakValue(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _weakValue
}

// Value: get a CValue referencing the JavaScript value of weak_value.
//
// The function returns the following values:
//
//    - value: new CValue or NULL if weak_value was cleared.
//
func (weakValue *WeakValue) Value() *Value {
	var _arg0 *C.JSCWeakValue // out
	var _cret *C.JSCValue     // in

	_arg0 = (*C.JSCWeakValue)(unsafe.Pointer(externglib.InternObject(weakValue).Native()))

	_cret = C.jsc_weak_value_get_value(_arg0)
	runtime.KeepAlive(weakValue)

	var _value *Value // out

	_value = wrapValue(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _value
}
