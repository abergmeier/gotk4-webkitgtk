// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: libsoup-2.4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <libsoup/soup.h>
// char* _gotk4_soup2_AuthDomainDigestAuthCallback(SoupAuthDomain*, SoupMessage*, char*, gpointer);
// extern void callbackDelete(gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.soup_auth_domain_digest_get_type()), F: marshalAuthDomainDigester},
	})
}

// AUTH_DOMAIN_DIGEST_AUTH_CALLBACK alias for the AuthDomainDigest:auth-callback
// property. (The AuthDomainDigestAuthCallback.).
const AUTH_DOMAIN_DIGEST_AUTH_CALLBACK = "auth-callback"

// AUTH_DOMAIN_DIGEST_AUTH_DATA alias for the AuthDomainDigest:auth-callback
// property. (The AuthDomainDigestAuthCallback.).
const AUTH_DOMAIN_DIGEST_AUTH_DATA = "auth-data"

// AuthDomainDigestAuthCallback: callback used by AuthDomainDigest for
// authentication purposes. The application should look up username in its
// password database, and return the corresponding encoded password (see
// soup_auth_domain_digest_encode_password()).
type AuthDomainDigestAuthCallback func(domain *AuthDomainDigest, msg *Message, username string) (utf8 string)

//export _gotk4_soup2_AuthDomainDigestAuthCallback
func _gotk4_soup2_AuthDomainDigestAuthCallback(arg0 *C.SoupAuthDomain, arg1 *C.SoupMessage, arg2 *C.char, arg3 C.gpointer) (cret *C.char) {
	v := gbox.Get(uintptr(arg3))
	if v == nil {
		panic(`callback not found`)
	}

	var domain *AuthDomainDigest // out
	var msg *Message             // out
	var username string          // out

	domain = wrapAuthDomainDigest(externglib.Take(unsafe.Pointer(arg0)))
	msg = wrapMessage(externglib.Take(unsafe.Pointer(arg1)))
	username = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))

	fn := v.(AuthDomainDigestAuthCallback)
	utf8 := fn(domain, msg, username)

	if utf8 != "" {
		cret = (*C.char)(unsafe.Pointer(C.CString(utf8)))
	}

	return cret
}

type AuthDomainDigest struct {
	AuthDomain
}

func wrapAuthDomainDigest(obj *externglib.Object) *AuthDomainDigest {
	return &AuthDomainDigest{
		AuthDomain: AuthDomain{
			Object: obj,
		},
	}
}

func marshalAuthDomainDigester(p uintptr) (interface{}, error) {
	return wrapAuthDomainDigest(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// SetAuthCallback sets the callback that domain will use to authenticate
// incoming requests. For each request containing authorization, domain will
// invoke the callback, and then either accept or reject the request based on
// callback's return value.
//
// You can also set the auth callback by setting the
// SOUP_AUTH_DOMAIN_DIGEST_AUTH_CALLBACK and SOUP_AUTH_DOMAIN_DIGEST_AUTH_DATA
// properties, which can also be used to set the callback at construct time.
//
// The function takes the following parameters:
//
//    - callback: callback.
//
func (domain *AuthDomainDigest) SetAuthCallback(callback AuthDomainDigestAuthCallback) {
	var _arg0 *C.SoupAuthDomain                  // out
	var _arg1 C.SoupAuthDomainDigestAuthCallback // out
	var _arg2 C.gpointer
	var _arg3 C.GDestroyNotify

	_arg0 = (*C.SoupAuthDomain)(unsafe.Pointer(domain.Native()))
	_arg1 = (*[0]byte)(C._gotk4_soup2_AuthDomainDigestAuthCallback)
	_arg2 = C.gpointer(gbox.Assign(callback))
	_arg3 = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))

	C.soup_auth_domain_digest_set_auth_callback(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(domain)
	runtime.KeepAlive(callback)
}

// AuthDomainDigestEncodePassword encodes the username/realm/password triplet
// for Digest authentication. (That is, it returns a stringified MD5 hash of
// username, realm, and password concatenated together). This is the form that
// is needed as the return value of AuthDomainDigest's auth handler.
//
// For security reasons, you should store the encoded hash, rather than storing
// the cleartext password itself and calling this method only when you need to
// verify it. This way, if your server is compromised, the attackers will not
// gain access to cleartext passwords which might also be usable at other sites.
// (Note also that the encoded password returned by this method is identical to
// the encoded password stored in an Apache .htdigest file.).
//
// The function takes the following parameters:
//
//    - username: username.
//    - realm: auth realm name.
//    - password for username in realm.
//
func AuthDomainDigestEncodePassword(username, realm, password string) string {
	var _arg1 *C.char // out
	var _arg2 *C.char // out
	var _arg3 *C.char // out
	var _cret *C.char // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(username)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(realm)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.char)(unsafe.Pointer(C.CString(password)))
	defer C.free(unsafe.Pointer(_arg3))

	_cret = C.soup_auth_domain_digest_encode_password(_arg1, _arg2, _arg3)
	runtime.KeepAlive(username)
	runtime.KeepAlive(realm)
	runtime.KeepAlive(password)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
