// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libsoup-2.4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.soup_content_sniffer_get_type()), F: marshalContentSnifferer},
	})
}

// ContentSnifferOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type ContentSnifferOverrider interface {
	// BufferSize gets the number of bytes sniffer needs in order to properly
	// sniff a buffer.
	BufferSize() uint
}

type ContentSniffer struct {
	*externglib.Object

	SessionFeature
}

var _ gextras.Nativer = (*ContentSniffer)(nil)

func wrapContentSniffer(obj *externglib.Object) *ContentSniffer {
	return &ContentSniffer{
		Object: obj,
		SessionFeature: SessionFeature{
			Object: obj,
		},
	}
}

func marshalContentSnifferer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapContentSniffer(obj), nil
}

// NewContentSniffer creates a new ContentSniffer.
func NewContentSniffer() *ContentSniffer {
	var _cret *C.SoupContentSniffer // in

	_cret = C.soup_content_sniffer_new()

	var _contentSniffer *ContentSniffer // out

	_contentSniffer = wrapContentSniffer(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _contentSniffer
}

// BufferSize gets the number of bytes sniffer needs in order to properly sniff
// a buffer.
func (sniffer *ContentSniffer) BufferSize() uint {
	var _arg0 *C.SoupContentSniffer // out
	var _cret C.gsize               // in

	_arg0 = (*C.SoupContentSniffer)(unsafe.Pointer(sniffer.Native()))

	_cret = C.soup_content_sniffer_get_buffer_size(_arg0)

	var _gsize uint // out

	_gsize = uint(_cret)

	return _gsize
}
