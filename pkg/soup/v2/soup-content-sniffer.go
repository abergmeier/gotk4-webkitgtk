// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: libsoup-2.4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.soup_content_sniffer_get_type()), F: marshalContentSnifferer},
	})
}

// ContentSnifferOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type ContentSnifferOverrider interface {
	// BufferSize gets the number of bytes sniffer needs in order to properly
	// sniff a buffer.
	BufferSize() uint
	// Sniff sniffs buffer to determine its Content-Type. The result may also be
	// influenced by the Content-Type declared in msg's response headers.
	Sniff(msg *Message, buffer *Buffer) (map[string]string, string)
}

type ContentSniffer struct {
	*externglib.Object

	SessionFeature
}

func wrapContentSniffer(obj *externglib.Object) *ContentSniffer {
	return &ContentSniffer{
		Object: obj,
		SessionFeature: SessionFeature{
			Object: obj,
		},
	}
}

func marshalContentSnifferer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapContentSniffer(obj), nil
}

// NewContentSniffer creates a new ContentSniffer.
func NewContentSniffer() *ContentSniffer {
	var _cret *C.SoupContentSniffer // in

	_cret = C.soup_content_sniffer_new()

	var _contentSniffer *ContentSniffer // out

	_contentSniffer = wrapContentSniffer(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _contentSniffer
}

// BufferSize gets the number of bytes sniffer needs in order to properly sniff
// a buffer.
func (sniffer *ContentSniffer) BufferSize() uint {
	var _arg0 *C.SoupContentSniffer // out
	var _cret C.gsize               // in

	_arg0 = (*C.SoupContentSniffer)(unsafe.Pointer(sniffer.Native()))

	_cret = C.soup_content_sniffer_get_buffer_size(_arg0)
	runtime.KeepAlive(sniffer)

	var _gsize uint // out

	_gsize = uint(_cret)

	return _gsize
}

// Sniff sniffs buffer to determine its Content-Type. The result may also be
// influenced by the Content-Type declared in msg's response headers.
func (sniffer *ContentSniffer) Sniff(msg *Message, buffer *Buffer) (map[string]string, string) {
	var _arg0 *C.SoupContentSniffer // out
	var _arg1 *C.SoupMessage        // out
	var _arg2 *C.SoupBuffer         // out
	var _arg3 *C.GHashTable         // in
	var _cret *C.char               // in

	_arg0 = (*C.SoupContentSniffer)(unsafe.Pointer(sniffer.Native()))
	_arg1 = (*C.SoupMessage)(unsafe.Pointer(msg.Native()))
	_arg2 = (*C.SoupBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))

	_cret = C.soup_content_sniffer_sniff(_arg0, _arg1, _arg2, &_arg3)
	runtime.KeepAlive(sniffer)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(buffer)

	var _params map[string]string // out
	var _utf8 string              // out

	if _arg3 != nil {
		_params = make(map[string]string, gextras.HashTableSize(unsafe.Pointer(_arg3)))
		gextras.MoveHashTable(unsafe.Pointer(_arg3), true, func(k, v unsafe.Pointer) {
			ksrc := *(**C.gchar)(k)
			vsrc := *(**C.gchar)(v)
			var kdst string // out
			var vdst string // out
			kdst = C.GoString((*C.gchar)(unsafe.Pointer(ksrc)))
			vdst = C.GoString((*C.gchar)(unsafe.Pointer(vsrc)))
			_params[kdst] = vdst
		})
	}
	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _params, _utf8
}
