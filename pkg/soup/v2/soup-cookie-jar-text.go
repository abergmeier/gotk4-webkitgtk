// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// glib.Type values for soup-cookie-jar-text.go.
var GTypeCookieJarText = externglib.Type(C.soup_cookie_jar_text_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeCookieJarText, F: marshalCookieJarText},
	})
}

// COOKIE_JAR_TEXT_FILENAME alias for the CookieJarText:filename property. (The
// cookie-storage filename.).
const COOKIE_JAR_TEXT_FILENAME = "filename"

// CookieJarTextOverrider contains methods that are overridable.
type CookieJarTextOverrider interface {
}

type CookieJarText struct {
	_ [0]func() // equal guard
	CookieJar
}

var (
	_ externglib.Objector = (*CookieJarText)(nil)
)

func classInitCookieJarTexter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapCookieJarText(obj *externglib.Object) *CookieJarText {
	return &CookieJarText{
		CookieJar: CookieJar{
			Object: obj,
			SessionFeature: SessionFeature{
				Object: obj,
			},
		},
	}
}

func marshalCookieJarText(p uintptr) (interface{}, error) {
	return wrapCookieJarText(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewCookieJarText creates a CookieJarText.
//
// filename will be read in at startup to create an initial set of cookies. If
// read_only is FALSE, then the non-session cookies will be written to filename
// when the 'changed' signal is emitted from the jar. (If read_only is TRUE,
// then the cookie jar will only be used for this session, and changes made to
// it will be lost when the jar is destroyed.).
//
// The function takes the following parameters:
//
//    - filename to read to/write from.
//    - readOnly: TRUE if filename is read-only.
//
// The function returns the following values:
//
//    - cookieJarText: new CookieJar.
//
func NewCookieJarText(filename string, readOnly bool) *CookieJarText {
	var _arg1 *C.char          // out
	var _arg2 C.gboolean       // out
	var _cret *C.SoupCookieJar // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))
	if readOnly {
		_arg2 = C.TRUE
	}

	_cret = C.soup_cookie_jar_text_new(_arg1, _arg2)
	runtime.KeepAlive(filename)
	runtime.KeepAlive(readOnly)

	var _cookieJarText *CookieJarText // out

	_cookieJarText = wrapCookieJarText(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _cookieJarText
}
