// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libsoup-2.4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.soup_hsts_enforcer_db_get_type()), F: marshalHSTSEnforcerDBer},
	})
}

type HSTSEnforcerDB struct {
	HSTSEnforcer
}

var _ gextras.Nativer = (*HSTSEnforcerDB)(nil)

func wrapHSTSEnforcerDB(obj *externglib.Object) *HSTSEnforcerDB {
	return &HSTSEnforcerDB{
		HSTSEnforcer: HSTSEnforcer{
			Object: obj,
			SessionFeature: SessionFeature{
				Object: obj,
			},
		},
	}
}

func marshalHSTSEnforcerDBer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapHSTSEnforcerDB(obj), nil
}

// NewHSTSEnforcerDB creates a HSTSEnforcerDB.
//
// filename will be read in during the initialization of a HSTSEnforcerDB, in
// order to create an initial set of HSTS policies. If the file doesn't exist, a
// new database will be created and initialized. Changes to the policies during
// the lifetime of a HSTSEnforcerDB will be written to filename when
// HSTSEnforcer::changed is emitted.
func NewHSTSEnforcerDB(filename string) *HSTSEnforcerDB {
	var _arg1 *C.char             // out
	var _cret *C.SoupHSTSEnforcer // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(filename)))

	_cret = C.soup_hsts_enforcer_db_new(_arg1)

	var _hstsEnforcerDB *HSTSEnforcerDB // out

	_hstsEnforcerDB = wrapHSTSEnforcerDB(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _hstsEnforcerDB
}

func (*HSTSEnforcerDB) privateHSTSEnforcerDB() {}
