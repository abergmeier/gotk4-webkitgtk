// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// glib.Type values for soup-request-file.go.
var GTypeRequestFile = externglib.Type(C.soup_request_file_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeRequestFile, F: marshalRequestFile},
	})
}

// RequestFileOverrider contains methods that are overridable.
type RequestFileOverrider interface {
}

type RequestFile struct {
	_ [0]func() // equal guard
	Request
}

var (
	_ externglib.Objector = (*RequestFile)(nil)
)

func classInitRequestFiler(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapRequestFile(obj *externglib.Object) *RequestFile {
	return &RequestFile{
		Request: Request{
			Object: obj,
			Initable: gio.Initable{
				Object: obj,
			},
		},
	}
}

func marshalRequestFile(p uintptr) (interface{}, error) {
	return wrapRequestFile(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// File gets a #GFile corresponding to file's URI.
//
// The function returns the following values:
//
//    - ret corresponding to file.
//
func (file *RequestFile) File() gio.Filer {
	var _arg0 *C.SoupRequestFile // out
	var _cret *C.GFile           // in

	_arg0 = (*C.SoupRequestFile)(unsafe.Pointer(externglib.InternObject(file).Native()))

	_cret = C.soup_request_file_get_file(_arg0)
	runtime.KeepAlive(file)

	var _ret gio.Filer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Filer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(gio.Filer)
			return ok
		})
		rv, ok := casted.(gio.Filer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.Filer")
		}
		_ret = rv
	}

	return _ret
}
