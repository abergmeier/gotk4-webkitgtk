// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libsoup-2.4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.soup_request_http_get_type()), F: marshalRequestHTTPer},
	})
}

type RequestHTTP struct {
	Request
}

var _ gextras.Nativer = (*RequestHTTP)(nil)

func wrapRequestHTTP(obj *externglib.Object) *RequestHTTP {
	return &RequestHTTP{
		Request: Request{
			Object: obj,
			Initable: gio.Initable{
				Object: obj,
			},
		},
	}
}

func marshalRequestHTTPer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapRequestHTTP(obj), nil
}

// Message gets a new reference to the Message associated to this SoupRequest
func (http *RequestHTTP) Message() *Message {
	var _arg0 *C.SoupRequestHTTP // out
	var _cret *C.SoupMessage     // in

	_arg0 = (*C.SoupRequestHTTP)(unsafe.Pointer(http.Native()))

	_cret = C.soup_request_http_get_message(_arg0)

	var _message *Message // out

	_message = wrapMessage(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _message
}
