// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// glib.Type values for soup-request-http.go.
var GTypeRequestHTTP = externglib.Type(C.soup_request_http_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeRequestHTTP, F: marshalRequestHTTP},
	})
}

// RequestHTTPOverrider contains methods that are overridable.
type RequestHTTPOverrider interface {
}

type RequestHTTP struct {
	_ [0]func() // equal guard
	Request
}

var (
	_ externglib.Objector = (*RequestHTTP)(nil)
)

func classInitRequestHTTPer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapRequestHTTP(obj *externglib.Object) *RequestHTTP {
	return &RequestHTTP{
		Request: Request{
			Object: obj,
			Initable: gio.Initable{
				Object: obj,
			},
		},
	}
}

func marshalRequestHTTP(p uintptr) (interface{}, error) {
	return wrapRequestHTTP(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Message gets a new reference to the Message associated to this SoupRequest.
//
// The function returns the following values:
//
//    - message: new reference to the Message.
//
func (http *RequestHTTP) Message() *Message {
	var _arg0 *C.SoupRequestHTTP // out
	var _cret *C.SoupMessage     // in

	_arg0 = (*C.SoupRequestHTTP)(unsafe.Pointer(externglib.InternObject(http).Native()))

	_cret = C.soup_request_http_get_message(_arg0)
	runtime.KeepAlive(http)

	var _message *Message // out

	_message = wrapMessage(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _message
}
