// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libsoup-2.4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <libsoup/soup.h>
// void _gotk4_gio2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.soup_request_get_type()), F: marshalRequester},
	})
}

// RequestOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type RequestOverrider interface {
	CheckURI(uri *URI) error
	// ContentLength gets the length of the data represented by request. For
	// most request types, this will not be known until after you call
	// soup_request_send() or soup_request_send_finish().
	ContentLength() int64
	// ContentType gets the type of the data represented by request. For most
	// request types, this will not be known until after you call
	// soup_request_send() or soup_request_send_finish().
	//
	// As in the HTTP Content-Type header, this may include parameters after the
	// MIME type.
	ContentType() string
	// Send: synchronously requests the URI pointed to by request, and returns a
	// Stream that can be used to read its contents.
	//
	// Note that you cannot use this method with Requests attached to a
	// SessionAsync.
	Send(ctx context.Context) (gio.InputStreamer, error)
	// SendAsync begins an asynchronously request for the URI pointed to by
	// request.
	//
	// Note that you cannot use this method with Requests attached to a
	// SessionSync.
	SendAsync(ctx context.Context, callback gio.AsyncReadyCallback)
	// SendFinish gets the result of a soup_request_send_async().
	SendFinish(result gio.AsyncResulter) (gio.InputStreamer, error)
}

// Request: request to retrieve a particular URI.
type Request struct {
	*externglib.Object

	gio.Initable
}

var _ gextras.Nativer = (*Request)(nil)

func wrapRequest(obj *externglib.Object) *Request {
	return &Request{
		Object: obj,
		Initable: gio.Initable{
			Object: obj,
		},
	}
}

func marshalRequester(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapRequest(obj), nil
}

// ContentLength gets the length of the data represented by request. For most
// request types, this will not be known until after you call
// soup_request_send() or soup_request_send_finish().
func (request *Request) ContentLength() int64 {
	var _arg0 *C.SoupRequest // out
	var _cret C.goffset      // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(request.Native()))

	_cret = C.soup_request_get_content_length(_arg0)

	var _gint64 int64 // out

	_gint64 = int64(_cret)

	return _gint64
}

// ContentType gets the type of the data represented by request. For most
// request types, this will not be known until after you call
// soup_request_send() or soup_request_send_finish().
//
// As in the HTTP Content-Type header, this may include parameters after the
// MIME type.
func (request *Request) ContentType() string {
	var _arg0 *C.SoupRequest // out
	var _cret *C.char        // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(request.Native()))

	_cret = C.soup_request_get_content_type(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Session gets request's Session
func (request *Request) Session() *Session {
	var _arg0 *C.SoupRequest // out
	var _cret *C.SoupSession // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(request.Native()))

	_cret = C.soup_request_get_session(_arg0)

	var _session *Session // out

	_session = wrapSession(externglib.Take(unsafe.Pointer(_cret)))

	return _session
}

// URI gets request's URI
func (request *Request) URI() *URI {
	var _arg0 *C.SoupRequest // out
	var _cret *C.SoupURI     // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(request.Native()))

	_cret = C.soup_request_get_uri(_arg0)

	var _urI *URI // out

	_urI = (*URI)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _urI
}

// Send: synchronously requests the URI pointed to by request, and returns a
// Stream that can be used to read its contents.
//
// Note that you cannot use this method with Requests attached to a
// SessionAsync.
func (request *Request) Send(ctx context.Context) (gio.InputStreamer, error) {
	var _arg0 *C.SoupRequest  // out
	var _arg1 *C.GCancellable // out
	var _cret *C.GInputStream // in
	var _cerr *C.GError       // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(request.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	_cret = C.soup_request_send(_arg0, _arg1, &_cerr)

	var _inputStream gio.InputStreamer // out
	var _goerr error                   // out

	_inputStream = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(gio.InputStreamer)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _inputStream, _goerr
}

// SendAsync begins an asynchronously request for the URI pointed to by request.
//
// Note that you cannot use this method with Requests attached to a SessionSync.
func (request *Request) SendAsync(ctx context.Context, callback gio.AsyncReadyCallback) {
	var _arg0 *C.SoupRequest        // out
	var _arg1 *C.GCancellable       // out
	var _arg2 C.GAsyncReadyCallback // out
	var _arg3 C.gpointer

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(request.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg2 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
	_arg3 = C.gpointer(gbox.AssignOnce(callback))

	C.soup_request_send_async(_arg0, _arg1, _arg2, _arg3)
}

// SendFinish gets the result of a soup_request_send_async().
func (request *Request) SendFinish(result gio.AsyncResulter) (gio.InputStreamer, error) {
	var _arg0 *C.SoupRequest  // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GInputStream // in
	var _cerr *C.GError       // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(request.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer((result).(gextras.Nativer).Native()))

	_cret = C.soup_request_send_finish(_arg0, _arg1, &_cerr)

	var _inputStream gio.InputStreamer // out
	var _goerr error                   // out

	_inputStream = (gextras.CastObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))).(gio.InputStreamer)
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _inputStream, _goerr
}
