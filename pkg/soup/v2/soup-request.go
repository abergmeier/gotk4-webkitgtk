// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
// extern GInputStream* _gotk4_soup2_RequestClass_send(SoupRequest*, GCancellable*, GError**);
// extern GInputStream* _gotk4_soup2_RequestClass_send_finish(SoupRequest*, GAsyncResult*, GError**);
// extern char* _gotk4_soup2_RequestClass_get_content_type(SoupRequest*);
// extern gboolean _gotk4_soup2_RequestClass_check_uri(SoupRequest*, SoupURI*, GError**);
// extern goffset _gotk4_soup2_RequestClass_get_content_length(SoupRequest*);
// extern void _gotk4_gio2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

// glib.Type values for soup-request.go.
var GTypeRequest = externglib.Type(C.soup_request_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeRequest, F: marshalRequest},
	})
}

// REQUEST_SESSION alias for the Request:session property, qv.
const REQUEST_SESSION = "session"

// REQUEST_URI alias for the Request:uri property, qv.
const REQUEST_URI = "uri"

// RequestOverrider contains methods that are overridable.
type RequestOverrider interface {
	// The function takes the following parameters:
	//
	CheckURI(uri *URI) error
	// ContentLength gets the length of the data represented by request. For
	// most request types, this will not be known until after you call
	// soup_request_send() or soup_request_send_finish().
	//
	// The function returns the following values:
	//
	//    - gint64: length of the data represented by request, or -1 if not
	//      known.
	//
	ContentLength() int64
	// ContentType gets the type of the data represented by request. For most
	// request types, this will not be known until after you call
	// soup_request_send() or soup_request_send_finish().
	//
	// As in the HTTP Content-Type header, this may include parameters after the
	// MIME type.
	//
	// The function returns the following values:
	//
	//    - utf8 (optional): type of the data represented by request, or NULL if
	//      not known.
	//
	ContentType() string
	// Send: synchronously requests the URI pointed to by request, and returns a
	// Stream that can be used to read its contents.
	//
	// Note that you cannot use this method with Requests attached to a
	// SessionAsync.
	//
	// The function takes the following parameters:
	//
	//    - ctx (optional) or NULL.
	//
	// The function returns the following values:
	//
	//    - inputStream that can be used to read from the URI pointed to by
	//      request.
	//
	Send(ctx context.Context) (gio.InputStreamer, error)
	// SendFinish gets the result of a soup_request_send_async().
	//
	// The function takes the following parameters:
	//
	//    - result: Result.
	//
	// The function returns the following values:
	//
	//    - inputStream that can be used to read from the URI pointed to by
	//      request.
	//
	SendFinish(result gio.AsyncResulter) (gio.InputStreamer, error)
}

// Request: request to retrieve a particular URI.
type Request struct {
	_ [0]func() // equal guard
	*externglib.Object

	gio.Initable
}

var (
	_ externglib.Objector = (*Request)(nil)
)

func classInitRequester(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.SoupRequestClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.SoupRequestClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface{ CheckURI(uri *URI) error }); ok {
		pclass.check_uri = (*[0]byte)(C._gotk4_soup2_RequestClass_check_uri)
	}

	if _, ok := goval.(interface{ ContentLength() int64 }); ok {
		pclass.get_content_length = (*[0]byte)(C._gotk4_soup2_RequestClass_get_content_length)
	}

	if _, ok := goval.(interface{ ContentType() string }); ok {
		pclass.get_content_type = (*[0]byte)(C._gotk4_soup2_RequestClass_get_content_type)
	}

	if _, ok := goval.(interface {
		Send(ctx context.Context) (gio.InputStreamer, error)
	}); ok {
		pclass.send = (*[0]byte)(C._gotk4_soup2_RequestClass_send)
	}

	if _, ok := goval.(interface {
		SendFinish(result gio.AsyncResulter) (gio.InputStreamer, error)
	}); ok {
		pclass.send_finish = (*[0]byte)(C._gotk4_soup2_RequestClass_send_finish)
	}
}

//export _gotk4_soup2_RequestClass_check_uri
func _gotk4_soup2_RequestClass_check_uri(arg0 *C.SoupRequest, arg1 *C.SoupURI, _cerr **C.GError) (cret C.gboolean) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ CheckURI(uri *URI) error })

	var _uri *URI // out

	_uri = (*URI)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	_goerr := iface.CheckURI(_uri)

	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.GError)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_soup2_RequestClass_get_content_length
func _gotk4_soup2_RequestClass_get_content_length(arg0 *C.SoupRequest) (cret C.goffset) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ ContentLength() int64 })

	gint64 := iface.ContentLength()

	cret = C.goffset(gint64)

	return cret
}

//export _gotk4_soup2_RequestClass_get_content_type
func _gotk4_soup2_RequestClass_get_content_type(arg0 *C.SoupRequest) (cret *C.char) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ ContentType() string })

	utf8 := iface.ContentType()

	if utf8 != "" {
		cret = (*C.char)(unsafe.Pointer(C.CString(utf8)))
		defer C.free(unsafe.Pointer(cret))
	}

	return cret
}

//export _gotk4_soup2_RequestClass_send
func _gotk4_soup2_RequestClass_send(arg0 *C.SoupRequest, arg1 *C.GCancellable, _cerr **C.GError) (cret *C.GInputStream) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		Send(ctx context.Context) (gio.InputStreamer, error)
	})

	var _cancellable context.Context // out

	if arg1 != nil {
		_cancellable = gcancel.NewCancellableContext(unsafe.Pointer(arg1))
	}

	inputStream, _goerr := iface.Send(_cancellable)

	cret = (*C.GInputStream)(unsafe.Pointer(externglib.InternObject(inputStream).Native()))
	C.g_object_ref(C.gpointer(externglib.InternObject(inputStream).Native()))
	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.GError)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_soup2_RequestClass_send_finish
func _gotk4_soup2_RequestClass_send_finish(arg0 *C.SoupRequest, arg1 *C.GAsyncResult, _cerr **C.GError) (cret *C.GInputStream) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		SendFinish(result gio.AsyncResulter) (gio.InputStreamer, error)
	})

	var _result gio.AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := externglib.Take(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(gio.AsyncResulter)
			return ok
		})
		rv, ok := casted.(gio.AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_result = rv
	}

	inputStream, _goerr := iface.SendFinish(_result)

	cret = (*C.GInputStream)(unsafe.Pointer(externglib.InternObject(inputStream).Native()))
	C.g_object_ref(C.gpointer(externglib.InternObject(inputStream).Native()))
	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.GError)(gerror.New(_goerr))
	}

	return cret
}

func wrapRequest(obj *externglib.Object) *Request {
	return &Request{
		Object: obj,
		Initable: gio.Initable{
			Object: obj,
		},
	}
}

func marshalRequest(p uintptr) (interface{}, error) {
	return wrapRequest(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ContentLength gets the length of the data represented by request. For most
// request types, this will not be known until after you call
// soup_request_send() or soup_request_send_finish().
//
// The function returns the following values:
//
//    - gint64: length of the data represented by request, or -1 if not known.
//
func (request *Request) ContentLength() int64 {
	var _arg0 *C.SoupRequest // out
	var _cret C.goffset      // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(externglib.InternObject(request).Native()))

	_cret = C.soup_request_get_content_length(_arg0)
	runtime.KeepAlive(request)

	var _gint64 int64 // out

	_gint64 = int64(_cret)

	return _gint64
}

// ContentType gets the type of the data represented by request. For most
// request types, this will not be known until after you call
// soup_request_send() or soup_request_send_finish().
//
// As in the HTTP Content-Type header, this may include parameters after the
// MIME type.
//
// The function returns the following values:
//
//    - utf8 (optional): type of the data represented by request, or NULL if not
//      known.
//
func (request *Request) ContentType() string {
	var _arg0 *C.SoupRequest // out
	var _cret *C.char        // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(externglib.InternObject(request).Native()))

	_cret = C.soup_request_get_content_type(_arg0)
	runtime.KeepAlive(request)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// Session gets request's Session.
//
// The function returns the following values:
//
//    - session request's Session.
//
func (request *Request) Session() *Session {
	var _arg0 *C.SoupRequest // out
	var _cret *C.SoupSession // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(externglib.InternObject(request).Native()))

	_cret = C.soup_request_get_session(_arg0)
	runtime.KeepAlive(request)

	var _session *Session // out

	_session = wrapSession(externglib.Take(unsafe.Pointer(_cret)))

	return _session
}

// URI gets request's URI.
//
// The function returns the following values:
//
//    - urI request's URI.
//
func (request *Request) URI() *URI {
	var _arg0 *C.SoupRequest // out
	var _cret *C.SoupURI     // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(externglib.InternObject(request).Native()))

	_cret = C.soup_request_get_uri(_arg0)
	runtime.KeepAlive(request)

	var _urI *URI // out

	_urI = (*URI)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _urI
}

// Send: synchronously requests the URI pointed to by request, and returns a
// Stream that can be used to read its contents.
//
// Note that you cannot use this method with Requests attached to a
// SessionAsync.
//
// The function takes the following parameters:
//
//    - ctx (optional) or NULL.
//
// The function returns the following values:
//
//    - inputStream that can be used to read from the URI pointed to by request.
//
func (request *Request) Send(ctx context.Context) (gio.InputStreamer, error) {
	var _arg0 *C.SoupRequest  // out
	var _arg1 *C.GCancellable // out
	var _cret *C.GInputStream // in
	var _cerr *C.GError       // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(externglib.InternObject(request).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	_cret = C.soup_request_send(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(request)
	runtime.KeepAlive(ctx)

	var _inputStream gio.InputStreamer // out
	var _goerr error                   // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.InputStreamer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(gio.InputStreamer)
			return ok
		})
		rv, ok := casted.(gio.InputStreamer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.InputStreamer")
		}
		_inputStream = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _inputStream, _goerr
}

// SendAsync begins an asynchronously request for the URI pointed to by request.
//
// Note that you cannot use this method with Requests attached to a SessionSync.
//
// The function takes the following parameters:
//
//    - ctx (optional) or NULL.
//    - callback (optional): ReadyCallback.
//
func (request *Request) SendAsync(ctx context.Context, callback gio.AsyncReadyCallback) {
	var _arg0 *C.SoupRequest        // out
	var _arg1 *C.GCancellable       // out
	var _arg2 C.GAsyncReadyCallback // out
	var _arg3 C.gpointer

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(externglib.InternObject(request).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	if callback != nil {
		_arg2 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg3 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.soup_request_send_async(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(request)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(callback)
}

// SendFinish gets the result of a soup_request_send_async().
//
// The function takes the following parameters:
//
//    - result: Result.
//
// The function returns the following values:
//
//    - inputStream that can be used to read from the URI pointed to by request.
//
func (request *Request) SendFinish(result gio.AsyncResulter) (gio.InputStreamer, error) {
	var _arg0 *C.SoupRequest  // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GInputStream // in
	var _cerr *C.GError       // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(externglib.InternObject(request).Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(externglib.InternObject(result).Native()))

	_cret = C.soup_request_send_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(request)
	runtime.KeepAlive(result)

	var _inputStream gio.InputStreamer // out
	var _goerr error                   // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.InputStreamer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(gio.InputStreamer)
			return ok
		})
		rv, ok := casted.(gio.InputStreamer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.InputStreamer")
		}
		_inputStream = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _inputStream, _goerr
}
