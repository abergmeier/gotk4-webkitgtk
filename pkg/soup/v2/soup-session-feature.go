// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.soup_session_feature_get_type()), F: marshalSessionFeaturer},
	})
}

// SessionFeatureOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type SessionFeatureOverrider interface {
	// AddFeature adds a "sub-feature" of type type to the base feature feature.
	// This is used for features that can be extended with multiple different
	// types. Eg, the authentication manager can be extended with subtypes of
	// Auth.
	//
	// The function takes the following parameters:
	//
	//    - typ of a "sub-feature".
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if feature accepted type as a subfeature.
	//
	AddFeature(typ externglib.Type) bool
	// The function takes the following parameters:
	//
	Attach(session *Session)
	// The function takes the following parameters:
	//
	Detach(session *Session)
	// HasFeature tests if feature has a "sub-feature" of type type. See
	// soup_session_feature_add_feature().
	//
	// The function takes the following parameters:
	//
	//    - typ of a "sub-feature".
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if feature has a subfeature of type type.
	//
	HasFeature(typ externglib.Type) bool
	// RemoveFeature removes the "sub-feature" of type type from the base
	// feature feature. See soup_session_feature_add_feature().
	//
	// The function takes the following parameters:
	//
	//    - typ of a "sub-feature".
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if type was removed from feature.
	//
	RemoveFeature(typ externglib.Type) bool
	// The function takes the following parameters:
	//
	//    - session
	//    - msg
	//
	RequestQueued(session *Session, msg *Message)
	// The function takes the following parameters:
	//
	//    - session
	//    - msg
	//    - socket
	//
	RequestStarted(session *Session, msg *Message, socket *Socket)
	// The function takes the following parameters:
	//
	//    - session
	//    - msg
	//
	RequestUnqueued(session *Session, msg *Message)
}

// SessionFeature: object that implement some sort of optional feature for
// Session.
type SessionFeature struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*SessionFeature)(nil)
)

// SessionFeaturer describes SessionFeature's interface methods.
type SessionFeaturer interface {
	externglib.Objector

	// AddFeature adds a "sub-feature" of type type to the base feature feature.
	AddFeature(typ externglib.Type) bool
	Attach(session *Session)
	Detach(session *Session)
	// HasFeature tests if feature has a "sub-feature" of type type.
	HasFeature(typ externglib.Type) bool
	// RemoveFeature removes the "sub-feature" of type type from the base
	// feature feature.
	RemoveFeature(typ externglib.Type) bool
}

var _ SessionFeaturer = (*SessionFeature)(nil)

func wrapSessionFeature(obj *externglib.Object) *SessionFeature {
	return &SessionFeature{
		Object: obj,
	}
}

func marshalSessionFeaturer(p uintptr) (interface{}, error) {
	return wrapSessionFeature(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// AddFeature adds a "sub-feature" of type type to the base feature feature.
// This is used for features that can be extended with multiple different types.
// Eg, the authentication manager can be extended with subtypes of Auth.
//
// The function takes the following parameters:
//
//    - typ of a "sub-feature".
//
// The function returns the following values:
//
//    - ok: TRUE if feature accepted type as a subfeature.
//
func (feature *SessionFeature) AddFeature(typ externglib.Type) bool {
	var _arg0 *C.SoupSessionFeature // out
	var _arg1 C.GType               // out
	var _cret C.gboolean            // in

	_arg0 = (*C.SoupSessionFeature)(unsafe.Pointer(feature.Native()))
	_arg1 = C.GType(typ)

	_cret = C.soup_session_feature_add_feature(_arg0, _arg1)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(typ)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
func (feature *SessionFeature) Attach(session *Session) {
	var _arg0 *C.SoupSessionFeature // out
	var _arg1 *C.SoupSession        // out

	_arg0 = (*C.SoupSessionFeature)(unsafe.Pointer(feature.Native()))
	_arg1 = (*C.SoupSession)(unsafe.Pointer(session.Native()))

	C.soup_session_feature_attach(_arg0, _arg1)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(session)
}

// The function takes the following parameters:
//
func (feature *SessionFeature) Detach(session *Session) {
	var _arg0 *C.SoupSessionFeature // out
	var _arg1 *C.SoupSession        // out

	_arg0 = (*C.SoupSessionFeature)(unsafe.Pointer(feature.Native()))
	_arg1 = (*C.SoupSession)(unsafe.Pointer(session.Native()))

	C.soup_session_feature_detach(_arg0, _arg1)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(session)
}

// HasFeature tests if feature has a "sub-feature" of type type. See
// soup_session_feature_add_feature().
//
// The function takes the following parameters:
//
//    - typ of a "sub-feature".
//
// The function returns the following values:
//
//    - ok: TRUE if feature has a subfeature of type type.
//
func (feature *SessionFeature) HasFeature(typ externglib.Type) bool {
	var _arg0 *C.SoupSessionFeature // out
	var _arg1 C.GType               // out
	var _cret C.gboolean            // in

	_arg0 = (*C.SoupSessionFeature)(unsafe.Pointer(feature.Native()))
	_arg1 = C.GType(typ)

	_cret = C.soup_session_feature_has_feature(_arg0, _arg1)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(typ)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RemoveFeature removes the "sub-feature" of type type from the base feature
// feature. See soup_session_feature_add_feature().
//
// The function takes the following parameters:
//
//    - typ of a "sub-feature".
//
// The function returns the following values:
//
//    - ok: TRUE if type was removed from feature.
//
func (feature *SessionFeature) RemoveFeature(typ externglib.Type) bool {
	var _arg0 *C.SoupSessionFeature // out
	var _arg1 C.GType               // out
	var _cret C.gboolean            // in

	_arg0 = (*C.SoupSessionFeature)(unsafe.Pointer(feature.Native()))
	_arg1 = C.GType(typ)

	_cret = C.soup_session_feature_remove_feature(_arg0, _arg1)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(typ)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
