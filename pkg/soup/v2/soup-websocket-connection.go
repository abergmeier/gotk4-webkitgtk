// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libsoup-2.4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.soup_websocket_connection_get_type()), F: marshalWebsocketConnectioner},
	})
}

// WebsocketConnectionOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type WebsocketConnectionOverrider interface {
	Closed()
	Closing()
	Error(err error)
}

// WebsocketConnection class representing a WebSocket connection.
type WebsocketConnection struct {
	*externglib.Object
}

var _ gextras.Nativer = (*WebsocketConnection)(nil)

func wrapWebsocketConnection(obj *externglib.Object) *WebsocketConnection {
	return &WebsocketConnection{
		Object: obj,
	}
}

func marshalWebsocketConnectioner(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWebsocketConnection(obj), nil
}

// NewWebsocketConnection creates a WebsocketConnection on stream. This should
// be called after completing the handshake to begin using the WebSocket
// protocol.
func NewWebsocketConnection(stream gio.IOStreamer, uri *URI, typ WebsocketConnectionType, origin string, protocol string) *WebsocketConnection {
	var _arg1 *C.GIOStream                  // out
	var _arg2 *C.SoupURI                    // out
	var _arg3 C.SoupWebsocketConnectionType // out
	var _arg4 *C.char                       // out
	var _arg5 *C.char                       // out
	var _cret *C.SoupWebsocketConnection    // in

	_arg1 = (*C.GIOStream)(unsafe.Pointer((stream).(gextras.Nativer).Native()))
	_arg2 = (*C.SoupURI)(gextras.StructNative(unsafe.Pointer(uri)))
	_arg3 = C.SoupWebsocketConnectionType(typ)
	_arg4 = (*C.char)(unsafe.Pointer(C.CString(origin)))
	_arg5 = (*C.char)(unsafe.Pointer(C.CString(protocol)))

	_cret = C.soup_websocket_connection_new(_arg1, _arg2, _arg3, _arg4, _arg5)

	var _websocketConnection *WebsocketConnection // out

	_websocketConnection = wrapWebsocketConnection(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _websocketConnection
}

// Close the connection in an orderly fashion.
//
// Note that until the WebsocketConnection::closed signal fires, the connection
// is not yet completely closed. The close message is not even sent until the
// main loop runs.
//
// The code and data are sent to the peer along with the close request. If code
// is SOUP_WEBSOCKET_CLOSE_NO_STATUS a close message with no body (without code
// and data) is sent. Note that the data must be UTF-8 valid.
func (self *WebsocketConnection) Close(code uint16, data string) {
	var _arg0 *C.SoupWebsocketConnection // out
	var _arg1 C.gushort                  // out
	var _arg2 *C.char                    // out

	_arg0 = (*C.SoupWebsocketConnection)(unsafe.Pointer(self.Native()))
	_arg1 = C.gushort(code)
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(data)))

	C.soup_websocket_connection_close(_arg0, _arg1, _arg2)
}

// CloseCode: get the close code received from the WebSocket peer.
//
// This only becomes valid once the WebSocket is in the
// SOUP_WEBSOCKET_STATE_CLOSED state. The value will often be in the
// WebsocketCloseCode enumeration, but may also be an application defined close
// code.
func (self *WebsocketConnection) CloseCode() uint16 {
	var _arg0 *C.SoupWebsocketConnection // out
	var _cret C.gushort                  // in

	_arg0 = (*C.SoupWebsocketConnection)(unsafe.Pointer(self.Native()))

	_cret = C.soup_websocket_connection_get_close_code(_arg0)

	var _gushort uint16 // out

	_gushort = uint16(_cret)

	return _gushort
}

// CloseData: get the close data received from the WebSocket peer.
//
// This only becomes valid once the WebSocket is in the
// SOUP_WEBSOCKET_STATE_CLOSED state. The data may be freed once the main loop
// is run, so copy it if you need to keep it around.
func (self *WebsocketConnection) CloseData() string {
	var _arg0 *C.SoupWebsocketConnection // out
	var _cret *C.char                    // in

	_arg0 = (*C.SoupWebsocketConnection)(unsafe.Pointer(self.Native()))

	_cret = C.soup_websocket_connection_get_close_data(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// ConnectionType: get the connection type (client/server) of the connection.
func (self *WebsocketConnection) ConnectionType() WebsocketConnectionType {
	var _arg0 *C.SoupWebsocketConnection    // out
	var _cret C.SoupWebsocketConnectionType // in

	_arg0 = (*C.SoupWebsocketConnection)(unsafe.Pointer(self.Native()))

	_cret = C.soup_websocket_connection_get_connection_type(_arg0)

	var _websocketConnectionType WebsocketConnectionType // out

	_websocketConnectionType = WebsocketConnectionType(_cret)

	return _websocketConnectionType
}

// Extensions: get the extensions chosen via negotiation with the peer.
func (self *WebsocketConnection) Extensions() *externglib.List {
	var _arg0 *C.SoupWebsocketConnection // out
	var _cret *C.GList                   // in

	_arg0 = (*C.SoupWebsocketConnection)(unsafe.Pointer(self.Native()))

	_cret = C.soup_websocket_connection_get_extensions(_arg0)

	var _list *externglib.List // out

	_list = externglib.WrapList(uintptr(unsafe.Pointer(_cret)))
	_list.DataWrapper(func(_p unsafe.Pointer) interface{} {
		src := (*C.SoupWebsocketExtension)(_p)
		var dst WebsocketExtensioner // out
		dst = (gextras.CastObject(externglib.Take(unsafe.Pointer(src)))).(WebsocketExtensioner)
		return dst
	})

	return _list
}

// IOStream: get the I/O stream the WebSocket is communicating over.
func (self *WebsocketConnection) IOStream() gio.IOStreamer {
	var _arg0 *C.SoupWebsocketConnection // out
	var _cret *C.GIOStream               // in

	_arg0 = (*C.SoupWebsocketConnection)(unsafe.Pointer(self.Native()))

	_cret = C.soup_websocket_connection_get_io_stream(_arg0)

	var _ioStream gio.IOStreamer // out

	_ioStream = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(gio.IOStreamer)

	return _ioStream
}

// KeepaliveInterval gets the keepalive interval in seconds or 0 if disabled.
func (self *WebsocketConnection) KeepaliveInterval() uint {
	var _arg0 *C.SoupWebsocketConnection // out
	var _cret C.guint                    // in

	_arg0 = (*C.SoupWebsocketConnection)(unsafe.Pointer(self.Native()))

	_cret = C.soup_websocket_connection_get_keepalive_interval(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// MaxIncomingPayloadSize gets the maximum payload size allowed for incoming
// packets.
func (self *WebsocketConnection) MaxIncomingPayloadSize() uint64 {
	var _arg0 *C.SoupWebsocketConnection // out
	var _cret C.guint64                  // in

	_arg0 = (*C.SoupWebsocketConnection)(unsafe.Pointer(self.Native()))

	_cret = C.soup_websocket_connection_get_max_incoming_payload_size(_arg0)

	var _guint64 uint64 // out

	_guint64 = uint64(_cret)

	return _guint64
}

// Origin: get the origin of the WebSocket.
func (self *WebsocketConnection) Origin() string {
	var _arg0 *C.SoupWebsocketConnection // out
	var _cret *C.char                    // in

	_arg0 = (*C.SoupWebsocketConnection)(unsafe.Pointer(self.Native()))

	_cret = C.soup_websocket_connection_get_origin(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Protocol: get the protocol chosen via negotiation with the peer.
func (self *WebsocketConnection) Protocol() string {
	var _arg0 *C.SoupWebsocketConnection // out
	var _cret *C.char                    // in

	_arg0 = (*C.SoupWebsocketConnection)(unsafe.Pointer(self.Native()))

	_cret = C.soup_websocket_connection_get_protocol(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// State: get the current state of the WebSocket.
func (self *WebsocketConnection) State() WebsocketState {
	var _arg0 *C.SoupWebsocketConnection // out
	var _cret C.SoupWebsocketState       // in

	_arg0 = (*C.SoupWebsocketConnection)(unsafe.Pointer(self.Native()))

	_cret = C.soup_websocket_connection_get_state(_arg0)

	var _websocketState WebsocketState // out

	_websocketState = WebsocketState(_cret)

	return _websocketState
}

// URI: get the URI of the WebSocket.
//
// For servers this represents the address of the WebSocket, and for clients it
// is the address connected to.
func (self *WebsocketConnection) URI() *URI {
	var _arg0 *C.SoupWebsocketConnection // out
	var _cret *C.SoupURI                 // in

	_arg0 = (*C.SoupWebsocketConnection)(unsafe.Pointer(self.Native()))

	_cret = C.soup_websocket_connection_get_uri(_arg0)

	var _urI *URI // out

	_urI = (*URI)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _urI
}

// SendBinary: send a binary message to the peer. If length is 0, data may be
// NULL.
//
// The message is queued to be sent and will be sent when the main loop is run.
func (self *WebsocketConnection) SendBinary(data []byte) {
	var _arg0 *C.SoupWebsocketConnection // out
	var _arg1 C.gconstpointer
	var _arg2 C.gsize

	_arg0 = (*C.SoupWebsocketConnection)(unsafe.Pointer(self.Native()))
	_arg2 = (C.gsize)(len(data))
	if len(data) > 0 {
		_arg1 = (C.gconstpointer)(unsafe.Pointer(&data[0]))
	}

	C.soup_websocket_connection_send_binary(_arg0, _arg1, _arg2)
}

// SendText: send a NULL-terminated text (UTF-8) message to the peer. If you
// need to send text messages containing NULL characters use
// soup_websocket_connection_send_message() instead.
//
// The message is queued to be sent and will be sent when the main loop is run.
func (self *WebsocketConnection) SendText(text string) {
	var _arg0 *C.SoupWebsocketConnection // out
	var _arg1 *C.char                    // out

	_arg0 = (*C.SoupWebsocketConnection)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(text)))

	C.soup_websocket_connection_send_text(_arg0, _arg1)
}

// SetKeepaliveInterval sets the interval in seconds on when to send a ping
// message which will serve as a keepalive message. If set to 0 the keepalive
// message is disabled.
func (self *WebsocketConnection) SetKeepaliveInterval(interval uint) {
	var _arg0 *C.SoupWebsocketConnection // out
	var _arg1 C.guint                    // out

	_arg0 = (*C.SoupWebsocketConnection)(unsafe.Pointer(self.Native()))
	_arg1 = C.guint(interval)

	C.soup_websocket_connection_set_keepalive_interval(_arg0, _arg1)
}

// SetMaxIncomingPayloadSize sets the maximum payload size allowed for incoming
// packets. It does not limit the outgoing packet size.
func (self *WebsocketConnection) SetMaxIncomingPayloadSize(maxIncomingPayloadSize uint64) {
	var _arg0 *C.SoupWebsocketConnection // out
	var _arg1 C.guint64                  // out

	_arg0 = (*C.SoupWebsocketConnection)(unsafe.Pointer(self.Native()))
	_arg1 = C.guint64(maxIncomingPayloadSize)

	C.soup_websocket_connection_set_max_incoming_payload_size(_arg0, _arg1)
}
