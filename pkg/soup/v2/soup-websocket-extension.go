// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libsoup-2.4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.soup_websocket_extension_get_type()), F: marshalWebsocketExtensioner},
	})
}

// WebsocketExtensionOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type WebsocketExtensionOverrider interface {
	// Configure configures extension with the given params
	Configure(connectionType WebsocketConnectionType, params *glib.HashTable) error
	// RequestParams: get the parameters strings to be included in the request
	// header. If the extension doesn't include any parameter in the request,
	// this function returns NULL.
	RequestParams() string
	// ResponseParams: get the parameters strings to be included in the response
	// header. If the extension doesn't include any parameter in the response,
	// this function returns NULL.
	ResponseParams() string
}

type WebsocketExtension struct {
	*externglib.Object
}

var _ gextras.Nativer = (*WebsocketExtension)(nil)

// WebsocketExtensioner describes WebsocketExtension's abstract methods.
type WebsocketExtensioner interface {
	// Configure configures extension with the given params
	Configure(connectionType WebsocketConnectionType, params *glib.HashTable) error
	// RequestParams: get the parameters strings to be included in the request
	// header.
	RequestParams() string
	// ResponseParams: get the parameters strings to be included in the response
	// header.
	ResponseParams() string
}

var _ WebsocketExtensioner = (*WebsocketExtension)(nil)

func wrapWebsocketExtension(obj *externglib.Object) *WebsocketExtension {
	return &WebsocketExtension{
		Object: obj,
	}
}

func marshalWebsocketExtensioner(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWebsocketExtension(obj), nil
}

// Configure configures extension with the given params
func (extension *WebsocketExtension) Configure(connectionType WebsocketConnectionType, params *glib.HashTable) error {
	var _arg0 *C.SoupWebsocketExtension     // out
	var _arg1 C.SoupWebsocketConnectionType // out
	var _arg2 *C.GHashTable                 // out
	var _cerr *C.GError                     // in

	_arg0 = (*C.SoupWebsocketExtension)(unsafe.Pointer(extension.Native()))
	_arg1 = C.SoupWebsocketConnectionType(connectionType)
	_arg2 = (*C.GHashTable)(gextras.StructNative(unsafe.Pointer(params)))

	C.soup_websocket_extension_configure(_arg0, _arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// RequestParams: get the parameters strings to be included in the request
// header. If the extension doesn't include any parameter in the request, this
// function returns NULL.
func (extension *WebsocketExtension) RequestParams() string {
	var _arg0 *C.SoupWebsocketExtension // out
	var _cret *C.char                   // in

	_arg0 = (*C.SoupWebsocketExtension)(unsafe.Pointer(extension.Native()))

	_cret = C.soup_websocket_extension_get_request_params(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ResponseParams: get the parameters strings to be included in the response
// header. If the extension doesn't include any parameter in the response, this
// function returns NULL.
func (extension *WebsocketExtension) ResponseParams() string {
	var _arg0 *C.SoupWebsocketExtension // out
	var _cret *C.char                   // in

	_arg0 = (*C.SoupWebsocketExtension)(unsafe.Pointer(extension.Native()))

	_cret = C.soup_websocket_extension_get_response_params(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
