// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"runtime/cgo"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
// extern char* _gotk4_soup2_WebsocketExtensionClass_get_request_params(SoupWebsocketExtension*);
// extern char* _gotk4_soup2_WebsocketExtensionClass_get_response_params(SoupWebsocketExtension*);
// extern gboolean _gotk4_soup2_WebsocketExtensionClass_configure(SoupWebsocketExtension*, SoupWebsocketConnectionType, GHashTable*, GError**);
import "C"

// glib.Type values for soup-websocket-extension.go.
var GTypeWebsocketExtension = externglib.Type(C.soup_websocket_extension_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeWebsocketExtension, F: marshalWebsocketExtension},
	})
}

// WebsocketExtensionOverrider contains methods that are overridable.
type WebsocketExtensionOverrider interface {
	// Configure configures extension with the given params.
	//
	// The function takes the following parameters:
	//
	//    - connectionType: either SOUP_WEBSOCKET_CONNECTION_CLIENT or
	//      SOUP_WEBSOCKET_CONNECTION_SERVER.
	//    - params (optional): parameters, or NULL.
	//
	Configure(connectionType WebsocketConnectionType, params map[cgo.Handle]cgo.Handle) error
	// RequestParams: get the parameters strings to be included in the request
	// header. If the extension doesn't include any parameter in the request,
	// this function returns NULL.
	//
	// The function returns the following values:
	//
	//    - utf8 (optional): new allocated string with the parameters.
	//
	RequestParams() string
	// ResponseParams: get the parameters strings to be included in the response
	// header. If the extension doesn't include any parameter in the response,
	// this function returns NULL.
	//
	// The function returns the following values:
	//
	//    - utf8 (optional): new allocated string with the parameters.
	//
	ResponseParams() string
}

type WebsocketExtension struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*WebsocketExtension)(nil)
)

// WebsocketExtensioner describes types inherited from class WebsocketExtension.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type WebsocketExtensioner interface {
	externglib.Objector
	baseWebsocketExtension() *WebsocketExtension
}

var _ WebsocketExtensioner = (*WebsocketExtension)(nil)

func classInitWebsocketExtensioner(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.SoupWebsocketExtensionClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.SoupWebsocketExtensionClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface {
		Configure(connectionType WebsocketConnectionType, params map[cgo.Handle]cgo.Handle) error
	}); ok {
		pclass.configure = (*[0]byte)(C._gotk4_soup2_WebsocketExtensionClass_configure)
	}

	if _, ok := goval.(interface{ RequestParams() string }); ok {
		pclass.get_request_params = (*[0]byte)(C._gotk4_soup2_WebsocketExtensionClass_get_request_params)
	}

	if _, ok := goval.(interface{ ResponseParams() string }); ok {
		pclass.get_response_params = (*[0]byte)(C._gotk4_soup2_WebsocketExtensionClass_get_response_params)
	}
}

//export _gotk4_soup2_WebsocketExtensionClass_configure
func _gotk4_soup2_WebsocketExtensionClass_configure(arg0 *C.SoupWebsocketExtension, arg1 C.SoupWebsocketConnectionType, arg2 *C.GHashTable, _cerr **C.GError) (cret C.gboolean) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		Configure(connectionType WebsocketConnectionType, params map[cgo.Handle]cgo.Handle) error
	})

	var _connectionType WebsocketConnectionType // out
	var _params map[cgo.Handle]cgo.Handle       // out

	_connectionType = WebsocketConnectionType(arg1)
	if arg2 != nil {
		_params = make(map[cgo.Handle]cgo.Handle, gextras.HashTableSize(unsafe.Pointer(arg2)))
		gextras.MoveHashTable(unsafe.Pointer(arg2), false, func(k, v unsafe.Pointer) {
			ksrc := *(**C.gpointer)(k)
			vsrc := *(**C.gpointer)(v)
			var kdst cgo.Handle // out
			var vdst cgo.Handle // out
			kdst = (cgo.Handle)(unsafe.Pointer(ksrc))
			vdst = (cgo.Handle)(unsafe.Pointer(vsrc))
			_params[kdst] = vdst
		})
	}

	_goerr := iface.Configure(_connectionType, _params)

	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.GError)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_soup2_WebsocketExtensionClass_get_request_params
func _gotk4_soup2_WebsocketExtensionClass_get_request_params(arg0 *C.SoupWebsocketExtension) (cret *C.char) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ RequestParams() string })

	utf8 := iface.RequestParams()

	if utf8 != "" {
		cret = (*C.char)(unsafe.Pointer(C.CString(utf8)))
	}

	return cret
}

//export _gotk4_soup2_WebsocketExtensionClass_get_response_params
func _gotk4_soup2_WebsocketExtensionClass_get_response_params(arg0 *C.SoupWebsocketExtension) (cret *C.char) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ ResponseParams() string })

	utf8 := iface.ResponseParams()

	if utf8 != "" {
		cret = (*C.char)(unsafe.Pointer(C.CString(utf8)))
	}

	return cret
}

func wrapWebsocketExtension(obj *externglib.Object) *WebsocketExtension {
	return &WebsocketExtension{
		Object: obj,
	}
}

func marshalWebsocketExtension(p uintptr) (interface{}, error) {
	return wrapWebsocketExtension(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (extension *WebsocketExtension) baseWebsocketExtension() *WebsocketExtension {
	return extension
}

// BaseWebsocketExtension returns the underlying base object.
func BaseWebsocketExtension(obj WebsocketExtensioner) *WebsocketExtension {
	return obj.baseWebsocketExtension()
}

// Configure configures extension with the given params.
//
// The function takes the following parameters:
//
//    - connectionType: either SOUP_WEBSOCKET_CONNECTION_CLIENT or
//      SOUP_WEBSOCKET_CONNECTION_SERVER.
//    - params (optional): parameters, or NULL.
//
func (extension *WebsocketExtension) Configure(connectionType WebsocketConnectionType, params map[cgo.Handle]cgo.Handle) error {
	var _arg0 *C.SoupWebsocketExtension     // out
	var _arg1 C.SoupWebsocketConnectionType // out
	var _arg2 *C.GHashTable                 // out
	var _cerr *C.GError                     // in

	_arg0 = (*C.SoupWebsocketExtension)(unsafe.Pointer(externglib.InternObject(extension).Native()))
	_arg1 = C.SoupWebsocketConnectionType(connectionType)
	if params != nil {
		_arg2 = C.g_hash_table_new_full(nil, nil, (*[0]byte)(C.free), (*[0]byte)(C.free))
		for ksrc, vsrc := range params {
			var kdst *C.gpointer // out
			var vdst *C.gpointer // out
			kdst = (*C.gpointer)(unsafe.Pointer(ksrc))
			vdst = (*C.gpointer)(unsafe.Pointer(vsrc))
			C.g_hash_table_insert(_arg2, C.gpointer(unsafe.Pointer(kdst)), C.gpointer(unsafe.Pointer(vdst)))
		}
		defer C.g_hash_table_unref(_arg2)
	}

	C.soup_websocket_extension_configure(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(extension)
	runtime.KeepAlive(connectionType)
	runtime.KeepAlive(params)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// RequestParams: get the parameters strings to be included in the request
// header. If the extension doesn't include any parameter in the request, this
// function returns NULL.
//
// The function returns the following values:
//
//    - utf8 (optional): new allocated string with the parameters.
//
func (extension *WebsocketExtension) RequestParams() string {
	var _arg0 *C.SoupWebsocketExtension // out
	var _cret *C.char                   // in

	_arg0 = (*C.SoupWebsocketExtension)(unsafe.Pointer(externglib.InternObject(extension).Native()))

	_cret = C.soup_websocket_extension_get_request_params(_arg0)
	runtime.KeepAlive(extension)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// ResponseParams: get the parameters strings to be included in the response
// header. If the extension doesn't include any parameter in the response, this
// function returns NULL.
//
// The function returns the following values:
//
//    - utf8 (optional): new allocated string with the parameters.
//
func (extension *WebsocketExtension) ResponseParams() string {
	var _arg0 *C.SoupWebsocketExtension // out
	var _cret *C.char                   // in

	_arg0 = (*C.SoupWebsocketExtension)(unsafe.Pointer(externglib.InternObject(extension).Native()))

	_cret = C.soup_websocket_extension_get_response_params(_arg0)
	runtime.KeepAlive(extension)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}
