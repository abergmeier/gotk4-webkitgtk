// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"runtime/cgo"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: libsoup-2.4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.soup_websocket_extension_get_type()), F: marshalWebsocketExtensioner},
	})
}

// WebsocketExtensionOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type WebsocketExtensionOverrider interface {
	// Configure configures extension with the given params.
	Configure(connectionType WebsocketConnectionType, params map[cgo.Handle]cgo.Handle) error
	// RequestParams: get the parameters strings to be included in the request
	// header. If the extension doesn't include any parameter in the request,
	// this function returns NULL.
	RequestParams() string
	// ResponseParams: get the parameters strings to be included in the response
	// header. If the extension doesn't include any parameter in the response,
	// this function returns NULL.
	ResponseParams() string
}

type WebsocketExtension struct {
	*externglib.Object
}

// WebsocketExtensioner describes types inherited from class WebsocketExtension.
// To get the original type, the caller must assert this to an interface or
// another type.
type WebsocketExtensioner interface {
	externglib.Objector

	// BaseWebsocketExtension returns the underlying base class.
	BaseWebsocketExtension() *WebsocketExtension
}

var _ WebsocketExtensioner = (*WebsocketExtension)(nil)

func wrapWebsocketExtension(obj *externglib.Object) *WebsocketExtension {
	return &WebsocketExtension{
		Object: obj,
	}
}

func marshalWebsocketExtensioner(p uintptr) (interface{}, error) {
	return wrapWebsocketExtension(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Configure configures extension with the given params.
//
// The function takes the following parameters:
//
//    - connectionType: either SOUP_WEBSOCKET_CONNECTION_CLIENT or
//    SOUP_WEBSOCKET_CONNECTION_SERVER.
//    - params: parameters, or NULL.
//
func (extension *WebsocketExtension) Configure(connectionType WebsocketConnectionType, params map[cgo.Handle]cgo.Handle) error {
	var _arg0 *C.SoupWebsocketExtension     // out
	var _arg1 C.SoupWebsocketConnectionType // out
	var _arg2 *C.GHashTable                 // out
	var _cerr *C.GError                     // in

	_arg0 = (*C.SoupWebsocketExtension)(unsafe.Pointer(extension.Native()))
	_arg1 = C.SoupWebsocketConnectionType(connectionType)
	if params != nil {
		_arg2 = C.g_hash_table_new_full(nil, nil, (*[0]byte)(C.free), (*[0]byte)(C.free))
		for ksrc, vsrc := range params {
			var kdst *C.gpointer // out
			var vdst *C.gpointer // out
			kdst = (*C.gpointer)(unsafe.Pointer(ksrc))
			vdst = (*C.gpointer)(unsafe.Pointer(vsrc))
			C.g_hash_table_insert(_arg2, C.gpointer(unsafe.Pointer(kdst)), C.gpointer(unsafe.Pointer(vdst)))
		}
		defer C.g_hash_table_unref(_arg2)
	}

	C.soup_websocket_extension_configure(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(extension)
	runtime.KeepAlive(connectionType)
	runtime.KeepAlive(params)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// RequestParams: get the parameters strings to be included in the request
// header. If the extension doesn't include any parameter in the request, this
// function returns NULL.
func (extension *WebsocketExtension) RequestParams() string {
	var _arg0 *C.SoupWebsocketExtension // out
	var _cret *C.char                   // in

	_arg0 = (*C.SoupWebsocketExtension)(unsafe.Pointer(extension.Native()))

	_cret = C.soup_websocket_extension_get_request_params(_arg0)
	runtime.KeepAlive(extension)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// ResponseParams: get the parameters strings to be included in the response
// header. If the extension doesn't include any parameter in the response, this
// function returns NULL.
func (extension *WebsocketExtension) ResponseParams() string {
	var _arg0 *C.SoupWebsocketExtension // out
	var _cret *C.char                   // in

	_arg0 = (*C.SoupWebsocketExtension)(unsafe.Pointer(extension.Native()))

	_cret = C.soup_websocket_extension_get_response_params(_arg0)
	runtime.KeepAlive(extension)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// BaseWebsocketExtension returns extension.
func (extension *WebsocketExtension) BaseWebsocketExtension() *WebsocketExtension {
	return extension
}
