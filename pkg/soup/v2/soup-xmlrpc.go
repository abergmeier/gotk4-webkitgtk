// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libsoup-2.4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.soup_xmlrpc_fault_get_type()), F: marshalXMLRPCFault},
	})
}

// XMLRPCFault: pre-defined XML-RPC fault codes from <ulink
// url="http://xmlrpc-epi.sourceforge.net/specs/rfc.fault_codes.php">http://xmlrpc-epi.sourceforge.net/specs/rfc.fault_codes.php</ulink>.
// These are an extension, not part of the XML-RPC spec; you can't assume
// servers will use them.
type XMLRPCFault int

const (
	// XmlrpcFaultParseErrorNotWellFormed: request was not well-formed
	XmlrpcFaultParseErrorNotWellFormed XMLRPCFault = -32700
	// XmlrpcFaultParseErrorUnsupportedEncoding: request was in an unsupported
	// encoding
	XmlrpcFaultParseErrorUnsupportedEncoding XMLRPCFault = -32701
	// XmlrpcFaultParseErrorInvalidCharacterForEncoding: request contained an
	// invalid character
	XmlrpcFaultParseErrorInvalidCharacterForEncoding XMLRPCFault = -32702
	// XmlrpcFaultServerErrorInvalidXMLRpc: request was not valid XML-RPC
	XmlrpcFaultServerErrorInvalidXMLRpc XMLRPCFault = -32600
	// XmlrpcFaultServerErrorRequestedMethodNotFound: method not found
	XmlrpcFaultServerErrorRequestedMethodNotFound XMLRPCFault = -32601
	// XmlrpcFaultServerErrorInvalidMethodParameters: invalid parameters
	XmlrpcFaultServerErrorInvalidMethodParameters XMLRPCFault = -32602
	// XmlrpcFaultServerErrorInternalXMLRpcError: internal error
	XmlrpcFaultServerErrorInternalXMLRpcError XMLRPCFault = -32603
	// XmlrpcFaultApplicationError: start of reserved range for application
	// error codes
	XmlrpcFaultApplicationError XMLRPCFault = -32500
	// XmlrpcFaultSystemError: start of reserved range for system error codes
	XmlrpcFaultSystemError XMLRPCFault = -32400
	// XmlrpcFaultTransportError: start of reserved range for transport error
	// codes
	XmlrpcFaultTransportError XMLRPCFault = -32300
)

func marshalXMLRPCFault(p uintptr) (interface{}, error) {
	return XMLRPCFault(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// String returns the name in string for XMLRPCFault.
func (x XMLRPCFault) String() string {
	switch x {
	case XmlrpcFaultParseErrorNotWellFormed:
		return "ParseErrorNotWellFormed"
	case XmlrpcFaultParseErrorUnsupportedEncoding:
		return "ParseErrorUnsupportedEncoding"
	case XmlrpcFaultParseErrorInvalidCharacterForEncoding:
		return "ParseErrorInvalidCharacterForEncoding"
	case XmlrpcFaultServerErrorInvalidXMLRpc:
		return "ServerErrorInvalidXMLRpc"
	case XmlrpcFaultServerErrorRequestedMethodNotFound:
		return "ServerErrorRequestedMethodNotFound"
	case XmlrpcFaultServerErrorInvalidMethodParameters:
		return "ServerErrorInvalidMethodParameters"
	case XmlrpcFaultServerErrorInternalXMLRpcError:
		return "ServerErrorInternalXMLRpcError"
	case XmlrpcFaultApplicationError:
		return "ApplicationError"
	case XmlrpcFaultSystemError:
		return "SystemError"
	case XmlrpcFaultTransportError:
		return "TransportError"
	default:
		return fmt.Sprintf("XMLRPCFault(%d)", x)
	}
}

// XmlrpcBuildRequest: this creates an XML-RPC methodCall and returns it as a
// string. This is the low-level method that soup_xmlrpc_message_new() is built
// on.
//
// params is a #GVariant tuple representing the method parameters.
//
// Serialization details: - "a{s*}" and "{s*}" are serialized as &lt;struct&gt;
// - "ay" is serialized as &lt;base64&gt; - Other arrays and tuples are
// serialized as &lt;array&gt; - booleans are serialized as &lt;boolean&gt; -
// byte, int16, uint16 and int32 are serialized as &lt;int&gt; - uint32 and
// int64 are serialized as the nonstandard &lt;i8&gt; type - doubles are
// serialized as &lt;double&gt; - Strings are serialized as &lt;string&gt; -
// Variants (i.e. "v" type) are unwrapped and their child is serialized. -
// #GVariants created by soup_xmlrpc_variant_new_datetime() are serialized as
// &lt;dateTime.iso8601&gt; - Other types are not supported and will return NULL
// and set error. This notably includes: object-paths, signatures, uint64,
// handles, maybes and dictionaries with non-string keys.
//
// If params is floating, it is consumed.
func XmlrpcBuildRequest(methodName string, params *glib.Variant) (string, error) {
	var _arg1 *C.char     // out
	var _arg2 *C.GVariant // out
	var _cret *C.char     // in
	var _cerr *C.GError   // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(methodName)))
	_arg2 = (*C.GVariant)(gextras.StructNative(unsafe.Pointer(params)))

	_cret = C.soup_xmlrpc_build_request(_arg1, _arg2, &_cerr)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _utf8, _goerr
}

// XmlrpcBuildResponse: this creates a (successful) XML-RPC methodResponse and
// returns it as a string. To create a fault response, use
// soup_xmlrpc_build_fault(). This is the low-level method that
// soup_xmlrpc_message_set_response() is built on.
//
// See soup_xmlrpc_build_request() for serialization details, but note that
// since a method can only have a single return value, value should not be a
// tuple here (unless the return value is an array).
//
// If value is floating, it is consumed.
func XmlrpcBuildResponse(value *glib.Variant) (string, error) {
	var _arg1 *C.GVariant // out
	var _cret *C.char     // in
	var _cerr *C.GError   // in

	_arg1 = (*C.GVariant)(gextras.StructNative(unsafe.Pointer(value)))

	_cret = C.soup_xmlrpc_build_response(_arg1, &_cerr)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _utf8, _goerr
}

// NewXmlrpcMessage creates an XML-RPC methodCall and returns a Message, ready
// to send, for that method call.
//
// See soup_xmlrpc_build_request() for serialization details.
//
// If params is floating, it is consumed.
func NewXmlrpcMessage(uri string, methodName string, params *glib.Variant) (*Message, error) {
	var _arg1 *C.char        // out
	var _arg2 *C.char        // out
	var _arg3 *C.GVariant    // out
	var _cret *C.SoupMessage // in
	var _cerr *C.GError      // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(uri)))
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(methodName)))
	_arg3 = (*C.GVariant)(gextras.StructNative(unsafe.Pointer(params)))

	_cret = C.soup_xmlrpc_message_new(_arg1, _arg2, _arg3, &_cerr)

	var _message *Message // out
	var _goerr error      // out

	_message = wrapMessage(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _message, _goerr
}

// XmlrpcMessageSetResponse sets the status code and response body of msg to
// indicate a successful XML-RPC call, with a return value given by value. To
// set a fault response, use soup_xmlrpc_message_set_fault().
//
// See soup_xmlrpc_build_request() for serialization details.
//
// If value is floating, it is consumed.
func XmlrpcMessageSetResponse(msg *Message, value *glib.Variant) error {
	var _arg1 *C.SoupMessage // out
	var _arg2 *C.GVariant    // out
	var _cerr *C.GError      // in

	_arg1 = (*C.SoupMessage)(unsafe.Pointer(msg.Native()))
	_arg2 = (*C.GVariant)(gextras.StructNative(unsafe.Pointer(value)))

	C.soup_xmlrpc_message_set_response(_arg1, _arg2, &_cerr)

	var _goerr error // out

	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _goerr
}

// XmlrpcParseResponse parses method_response and returns the return value. If
// method_response is a fault, NULL is returned, and error will be set to an
// error in the SOUP_XMLRPC_FAULT domain, with the error code containing the
// fault code, and the error message containing the fault string. If
// method_response cannot be parsed, NULL is returned, and error will be set to
// an error in the SOUP_XMLRPC_ERROR domain.
//
// See soup_xmlrpc_params_parse() for deserialization details.
func XmlrpcParseResponse(methodResponse string, length int, signature string) (*glib.Variant, error) {
	var _arg1 *C.char     // out
	var _arg2 C.int       // out
	var _arg3 *C.char     // out
	var _cret *C.GVariant // in
	var _cerr *C.GError   // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(methodResponse)))
	_arg2 = C.int(length)
	_arg3 = (*C.char)(unsafe.Pointer(C.CString(signature)))

	_cret = C.soup_xmlrpc_parse_response(_arg1, _arg2, _arg3, &_cerr)

	var _variant *glib.Variant // out
	var _goerr error           // out

	_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.g_variant_ref(_cret)
	runtime.SetFinalizer(_variant, func(v *glib.Variant) {
		C.g_variant_unref((*C.GVariant)(gextras.StructNative(unsafe.Pointer(v))))
	})
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _variant, _goerr
}

// XmlrpcVariantGetDatetime: get the Date from special #GVariant created by
// soup_xmlrpc_variant_new_datetime() or by parsing a &lt;dateTime.iso8601&gt;
// node. See soup_xmlrpc_params_parse().
//
// If variant does not contain a datetime it will return an error but it is not
// considered a programmer error because it generally means parameters received
// are not in the expected type.
func XmlrpcVariantGetDatetime(variant *glib.Variant) (*Date, error) {
	var _arg1 *C.GVariant // out
	var _cret *C.SoupDate // in
	var _cerr *C.GError   // in

	_arg1 = (*C.GVariant)(gextras.StructNative(unsafe.Pointer(variant)))

	_cret = C.soup_xmlrpc_variant_get_datetime(_arg1, &_cerr)

	var _date *Date  // out
	var _goerr error // out

	_date = (*Date)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_date, func(v *Date) {
		C.soup_date_free((*C.SoupDate)(gextras.StructNative(unsafe.Pointer(v))))
	})
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _date, _goerr
}

// XmlrpcVariantNewDatetime: construct a special #GVariant used to serialize a
// &lt;dateTime.iso8601&gt; node. See soup_xmlrpc_build_request().
//
// The actual type of the returned #GVariant is unspecified and "v" or "*"
// should be used in variant format strings. For example:
// <informalexample><programlisting> args = g_variant_new ("(v)",
// soup_xmlrpc_variant_new_datetime (date)); </programlisting></informalexample>
func XmlrpcVariantNewDatetime(date *Date) *glib.Variant {
	var _arg1 *C.SoupDate // out
	var _cret *C.GVariant // in

	_arg1 = (*C.SoupDate)(gextras.StructNative(unsafe.Pointer(date)))

	_cret = C.soup_xmlrpc_variant_new_datetime(_arg1)

	var _variant *glib.Variant // out

	_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.g_variant_ref(_cret)
	runtime.SetFinalizer(_variant, func(v *glib.Variant) {
		C.g_variant_unref((*C.GVariant)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _variant
}
