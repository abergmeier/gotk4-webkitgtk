// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"fmt"
	_ "runtime/cgo"
	"strings"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: libsoup-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeCacheability  = coreglib.Type(C.soup_cacheability_get_type())
	GTypeAuthBasic     = coreglib.Type(C.soup_auth_basic_get_type())
	GTypeAuthDigest    = coreglib.Type(C.soup_auth_digest_get_type())
	GTypeAuthNTLM      = coreglib.Type(C.soup_auth_ntlm_get_type())
	GTypeAuthNegotiate = coreglib.Type(C.soup_auth_negotiate_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCacheability, F: marshalCacheability},
		coreglib.TypeMarshaler{T: GTypeAuthBasic, F: marshalAuthBasic},
		coreglib.TypeMarshaler{T: GTypeAuthDigest, F: marshalAuthDigest},
		coreglib.TypeMarshaler{T: GTypeAuthNTLM, F: marshalAuthNTLM},
		coreglib.TypeMarshaler{T: GTypeAuthNegotiate, F: marshalAuthNegotiate},
	})
}

// The function returns the following values:
//
func SessionErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.soup_session_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)
	type _ = glib.Quark
	type _ = uint32

	return _quark
}

// The function returns the following values:
//
func TLDErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.soup_tld_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)
	type _ = glib.Quark
	type _ = uint32

	return _quark
}

// The function returns the following values:
//
func WebsocketErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.soup_websocket_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)
	type _ = glib.Quark
	type _ = uint32

	return _quark
}

type Cacheability C.guint

const (
	CacheCacheable   Cacheability = 0b1
	CacheUncacheable Cacheability = 0b10
	CacheInvalidates Cacheability = 0b100
	CacheValidates   Cacheability = 0b1000
)

func marshalCacheability(p uintptr) (interface{}, error) {
	return Cacheability(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for Cacheability.
func (c Cacheability) String() string {
	if c == 0 {
		return "Cacheability(0)"
	}

	var builder strings.Builder
	builder.Grow(63)

	for c != 0 {
		next := c & (c - 1)
		bit := c - next

		switch bit {
		case CacheCacheable:
			builder.WriteString("Cacheable|")
		case CacheUncacheable:
			builder.WriteString("Uncacheable|")
		case CacheInvalidates:
			builder.WriteString("Invalidates|")
		case CacheValidates:
			builder.WriteString("Validates|")
		default:
			builder.WriteString(fmt.Sprintf("Cacheability(0b%b)|", bit))
		}

		c = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if c contains other.
func (c Cacheability) Has(other Cacheability) bool {
	return (c & other) == other
}

type AuthBasic struct {
	_ [0]func() // equal guard
	Auth
}

var (
	_ Auther = (*AuthBasic)(nil)
)

func wrapAuthBasic(obj *coreglib.Object) *AuthBasic {
	return &AuthBasic{
		Auth: Auth{
			Object: obj,
		},
	}
}

func marshalAuthBasic(p uintptr) (interface{}, error) {
	return wrapAuthBasic(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

type AuthDigest struct {
	_ [0]func() // equal guard
	Auth
}

var (
	_ Auther = (*AuthDigest)(nil)
)

func wrapAuthDigest(obj *coreglib.Object) *AuthDigest {
	return &AuthDigest{
		Auth: Auth{
			Object: obj,
		},
	}
}

func marshalAuthDigest(p uintptr) (interface{}, error) {
	return wrapAuthDigest(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

type AuthNTLM struct {
	_ [0]func() // equal guard
	Auth
}

var (
	_ Auther = (*AuthNTLM)(nil)
)

func wrapAuthNTLM(obj *coreglib.Object) *AuthNTLM {
	return &AuthNTLM{
		Auth: Auth{
			Object: obj,
		},
	}
}

func marshalAuthNTLM(p uintptr) (interface{}, error) {
	return wrapAuthNTLM(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

type AuthNegotiate struct {
	_ [0]func() // equal guard
	Auth
}

var (
	_ Auther = (*AuthNegotiate)(nil)
)

func wrapAuthNegotiate(obj *coreglib.Object) *AuthNegotiate {
	return &AuthNegotiate{
		Auth: Auth{
			Object: obj,
		},
	}
}

func marshalAuthNegotiate(p uintptr) (interface{}, error) {
	return wrapAuthNegotiate(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
