// Code generated by girgen. DO NOT EDIT.

package soupgnome

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4-webkitgtk/pkg/soup/v2"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: libsoup-gnome-2.4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <libsoup/soup-gnome.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.soup_cookie_jar_sqlite_get_type()), F: marshalCookieJarSqliter},
	})
}

const COOKIE_JAR_SQLITE_FILENAME = "filename"

type CookieJarSqlite struct {
	soup.CookieJarDB
}

func wrapCookieJarSqlite(obj *externglib.Object) *CookieJarSqlite {
	return &CookieJarSqlite{
		CookieJarDB: soup.CookieJarDB{
			CookieJar: soup.CookieJar{
				Object: obj,
				SessionFeature: soup.SessionFeature{
					Object: obj,
				},
			},
		},
	}
}

func marshalCookieJarSqliter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapCookieJarSqlite(obj), nil
}

func NewCookieJarSqlite(filename string, readOnly bool) *CookieJarSqlite {
	var _arg1 *C.char          // out
	var _arg2 C.gboolean       // out
	var _cret *C.SoupCookieJar // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))
	if readOnly {
		_arg2 = C.TRUE
	}

	_cret = C.soup_cookie_jar_sqlite_new(_arg1, _arg2)
	runtime.KeepAlive(filename)
	runtime.KeepAlive(readOnly)

	var _cookieJarSqlite *CookieJarSqlite // out

	_cookieJarSqlite = wrapCookieJarSqlite(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _cookieJarSqlite
}

func (*CookieJarSqlite) privateCookieJarSqlite() {}
