// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_application_info_get_type()), F: marshalApplicationInfo},
	})
}

type ApplicationInfo struct {
	nocopy gextras.NoCopy
	native *C.WebKitApplicationInfo
}

func marshalApplicationInfo(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return &ApplicationInfo{native: (*C.WebKitApplicationInfo)(unsafe.Pointer(b))}, nil
}

// NewApplicationInfo constructs a struct ApplicationInfo.
func NewApplicationInfo() *ApplicationInfo {
	var _cret *C.WebKitApplicationInfo // in

	_cret = C.webkit_application_info_new()

	var _applicationInfo *ApplicationInfo // out

	_applicationInfo = (*ApplicationInfo)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.webkit_application_info_ref(_cret)
	runtime.SetFinalizer(_applicationInfo, func(v *ApplicationInfo) {
		C.webkit_application_info_unref((*C.WebKitApplicationInfo)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _applicationInfo
}

// Name: get the name of the application. If webkit_application_info_set_name()
// hasn't been called with a valid name, this returns g_get_prgname().
func (info *ApplicationInfo) Name() string {
	var _arg0 *C.WebKitApplicationInfo // out
	var _cret *C.gchar                 // in

	_arg0 = (*C.WebKitApplicationInfo)(gextras.StructNative(unsafe.Pointer(info)))

	_cret = C.webkit_application_info_get_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Version: get the application version previously set with
// webkit_application_info_set_version().
func (info *ApplicationInfo) Version() (major uint64, minor uint64, micro uint64) {
	var _arg0 *C.WebKitApplicationInfo // out
	var _arg1 C.guint64                // in
	var _arg2 C.guint64                // in
	var _arg3 C.guint64                // in

	_arg0 = (*C.WebKitApplicationInfo)(gextras.StructNative(unsafe.Pointer(info)))

	C.webkit_application_info_get_version(_arg0, &_arg1, &_arg2, &_arg3)

	var _major uint64 // out
	var _minor uint64 // out
	var _micro uint64 // out

	_major = uint64(_arg1)
	_minor = uint64(_arg2)
	_micro = uint64(_arg3)

	return _major, _minor, _micro
}

// Ref: atomically increments the reference count of info by one. This function
// is MT-safe and may be called from any thread.
func (info *ApplicationInfo) ref() *ApplicationInfo {
	var _arg0 *C.WebKitApplicationInfo // out
	var _cret *C.WebKitApplicationInfo // in

	_arg0 = (*C.WebKitApplicationInfo)(gextras.StructNative(unsafe.Pointer(info)))

	_cret = C.webkit_application_info_ref(_arg0)

	var _applicationInfo *ApplicationInfo // out

	_applicationInfo = (*ApplicationInfo)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.webkit_application_info_ref(_cret)
	runtime.SetFinalizer(_applicationInfo, func(v *ApplicationInfo) {
		C.webkit_application_info_unref((*C.WebKitApplicationInfo)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _applicationInfo
}

// SetName: set the name of the application. If not provided, or NULL is passed,
// g_get_prgname() will be used.
func (info *ApplicationInfo) SetName(name string) {
	var _arg0 *C.WebKitApplicationInfo // out
	var _arg1 *C.gchar                 // out

	_arg0 = (*C.WebKitApplicationInfo)(gextras.StructNative(unsafe.Pointer(info)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))

	C.webkit_application_info_set_name(_arg0, _arg1)
}

// SetVersion: set the application version. If the application doesn't use the
// format major.minor.micro you can pass 0 as the micro to use major.minor, or
// pass 0 as both micro and minor to use only major number. Any other format
// must be converted to major.minor.micro so that it can be used in version
// comparisons.
func (info *ApplicationInfo) SetVersion(major uint64, minor uint64, micro uint64) {
	var _arg0 *C.WebKitApplicationInfo // out
	var _arg1 C.guint64                // out
	var _arg2 C.guint64                // out
	var _arg3 C.guint64                // out

	_arg0 = (*C.WebKitApplicationInfo)(gextras.StructNative(unsafe.Pointer(info)))
	_arg1 = C.guint64(major)
	_arg2 = C.guint64(minor)
	_arg3 = C.guint64(micro)

	C.webkit_application_info_set_version(_arg0, _arg1, _arg2, _arg3)
}

// Unref: atomically decrements the reference count of info by one. If the
// reference count drops to 0, all memory allocated by the KitApplicationInfo is
// released. This function is MT-safe and may be called from any thread.
func (info *ApplicationInfo) unref() {
	var _arg0 *C.WebKitApplicationInfo // out

	_arg0 = (*C.WebKitApplicationInfo)(gextras.StructNative(unsafe.Pointer(info)))

	C.webkit_application_info_unref(_arg0)
}
