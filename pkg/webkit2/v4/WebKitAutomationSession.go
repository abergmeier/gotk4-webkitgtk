// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_automation_browsing_context_presentation_get_type()), F: marshalAutomationBrowsingContextPresentation},
		{T: externglib.Type(C.webkit_automation_session_get_type()), F: marshalAutomationSessioner},
	})
}

// AutomationBrowsingContextPresentation: enum values used for determining the
// automation browsing context presentation.
type AutomationBrowsingContextPresentation int

const (
	// AutomationBrowsingContextPresentationWindow: window
	AutomationBrowsingContextPresentationWindow AutomationBrowsingContextPresentation = iota
	// AutomationBrowsingContextPresentationTab: tab
	AutomationBrowsingContextPresentationTab
)

func marshalAutomationBrowsingContextPresentation(p uintptr) (interface{}, error) {
	return AutomationBrowsingContextPresentation(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// String returns the name in string for AutomationBrowsingContextPresentation.
func (a AutomationBrowsingContextPresentation) String() string {
	switch a {
	case AutomationBrowsingContextPresentationWindow:
		return "Window"
	case AutomationBrowsingContextPresentationTab:
		return "Tab"
	default:
		return fmt.Sprintf("AutomationBrowsingContextPresentation(%d)", a)
	}
}

type AutomationSession struct {
	*externglib.Object
}

var _ gextras.Nativer = (*AutomationSession)(nil)

func wrapAutomationSession(obj *externglib.Object) *AutomationSession {
	return &AutomationSession{
		Object: obj,
	}
}

func marshalAutomationSessioner(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapAutomationSession(obj), nil
}

// ApplicationInfo: get the KitAutomationSession previously set with
// webkit_automation_session_set_application_info().
func (session *AutomationSession) ApplicationInfo() *ApplicationInfo {
	var _arg0 *C.WebKitAutomationSession // out
	var _cret *C.WebKitApplicationInfo   // in

	_arg0 = (*C.WebKitAutomationSession)(unsafe.Pointer(session.Native()))

	_cret = C.webkit_automation_session_get_application_info(_arg0)

	var _applicationInfo *ApplicationInfo // out

	_applicationInfo = (*ApplicationInfo)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_applicationInfo, func(v *ApplicationInfo) {
		C.webkit_application_info_unref((*C.WebKitApplicationInfo)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _applicationInfo
}

// ID: get the unique identifier of a KitAutomationSession
func (session *AutomationSession) ID() string {
	var _arg0 *C.WebKitAutomationSession // out
	var _cret *C.char                    // in

	_arg0 = (*C.WebKitAutomationSession)(unsafe.Pointer(session.Native()))

	_cret = C.webkit_automation_session_get_id(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// SetApplicationInfo: set the application information to session. This
// information will be used by the driver service to match the requested
// capabilities with the actual application information. If this information is
// not provided to the session when a new automation session is requested, the
// creation might fail if the client requested a specific browser name or
// version. This will not have any effect when called after the automation
// session has been fully created, so this must be called in the callback of
// KitWebContext::automation-started signal.
func (session *AutomationSession) SetApplicationInfo(info *ApplicationInfo) {
	var _arg0 *C.WebKitAutomationSession // out
	var _arg1 *C.WebKitApplicationInfo   // out

	_arg0 = (*C.WebKitAutomationSession)(unsafe.Pointer(session.Native()))
	_arg1 = (*C.WebKitApplicationInfo)(gextras.StructNative(unsafe.Pointer(info)))

	C.webkit_automation_session_set_application_info(_arg0, _arg1)
}
