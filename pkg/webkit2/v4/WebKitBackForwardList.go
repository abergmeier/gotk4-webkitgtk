// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"runtime/cgo"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_back_forward_list_get_type()), F: marshalBackForwardLister},
	})
}

type BackForwardList struct {
	*externglib.Object
}

var (
	_ externglib.Objector = (*BackForwardList)(nil)
)

func wrapBackForwardList(obj *externglib.Object) *BackForwardList {
	return &BackForwardList{
		Object: obj,
	}
}

func marshalBackForwardLister(p uintptr) (interface{}, error) {
	return wrapBackForwardList(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// BackItem returns the item that precedes the current item.
func (backForwardList *BackForwardList) BackItem() *BackForwardListItem {
	var _arg0 *C.WebKitBackForwardList     // out
	var _cret *C.WebKitBackForwardListItem // in

	_arg0 = (*C.WebKitBackForwardList)(unsafe.Pointer(backForwardList.Native()))

	_cret = C.webkit_back_forward_list_get_back_item(_arg0)
	runtime.KeepAlive(backForwardList)

	var _backForwardListItem *BackForwardListItem // out

	if _cret != nil {
		_backForwardListItem = wrapBackForwardListItem(externglib.Take(unsafe.Pointer(_cret)))
	}

	return _backForwardListItem
}

func (backForwardList *BackForwardList) BackList() []BackForwardListItem {
	var _arg0 *C.WebKitBackForwardList // out
	var _cret *C.GList                 // in

	_arg0 = (*C.WebKitBackForwardList)(unsafe.Pointer(backForwardList.Native()))

	_cret = C.webkit_back_forward_list_get_back_list(_arg0)
	runtime.KeepAlive(backForwardList)

	var _list []BackForwardListItem // out

	_list = make([]BackForwardListItem, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.WebKitBackForwardListItem)(v)
		var dst BackForwardListItem // out
		dst = *wrapBackForwardListItem(externglib.Take(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

//
// The function takes the following parameters:
//
//    - limit: number of items to retrieve.
//
func (backForwardList *BackForwardList) BackListWithLimit(limit uint) []BackForwardListItem {
	var _arg0 *C.WebKitBackForwardList // out
	var _arg1 C.guint                  // out
	var _cret *C.GList                 // in

	_arg0 = (*C.WebKitBackForwardList)(unsafe.Pointer(backForwardList.Native()))
	_arg1 = C.guint(limit)

	_cret = C.webkit_back_forward_list_get_back_list_with_limit(_arg0, _arg1)
	runtime.KeepAlive(backForwardList)
	runtime.KeepAlive(limit)

	var _list []BackForwardListItem // out

	_list = make([]BackForwardListItem, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.WebKitBackForwardListItem)(v)
		var dst BackForwardListItem // out
		dst = *wrapBackForwardListItem(externglib.Take(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// CurrentItem returns the current item in back_forward_list.
func (backForwardList *BackForwardList) CurrentItem() *BackForwardListItem {
	var _arg0 *C.WebKitBackForwardList     // out
	var _cret *C.WebKitBackForwardListItem // in

	_arg0 = (*C.WebKitBackForwardList)(unsafe.Pointer(backForwardList.Native()))

	_cret = C.webkit_back_forward_list_get_current_item(_arg0)
	runtime.KeepAlive(backForwardList)

	var _backForwardListItem *BackForwardListItem // out

	if _cret != nil {
		_backForwardListItem = wrapBackForwardListItem(externglib.Take(unsafe.Pointer(_cret)))
	}

	return _backForwardListItem
}

// ForwardItem returns the item that follows the current item.
func (backForwardList *BackForwardList) ForwardItem() *BackForwardListItem {
	var _arg0 *C.WebKitBackForwardList     // out
	var _cret *C.WebKitBackForwardListItem // in

	_arg0 = (*C.WebKitBackForwardList)(unsafe.Pointer(backForwardList.Native()))

	_cret = C.webkit_back_forward_list_get_forward_item(_arg0)
	runtime.KeepAlive(backForwardList)

	var _backForwardListItem *BackForwardListItem // out

	if _cret != nil {
		_backForwardListItem = wrapBackForwardListItem(externglib.Take(unsafe.Pointer(_cret)))
	}

	return _backForwardListItem
}

func (backForwardList *BackForwardList) ForwardList() []BackForwardListItem {
	var _arg0 *C.WebKitBackForwardList // out
	var _cret *C.GList                 // in

	_arg0 = (*C.WebKitBackForwardList)(unsafe.Pointer(backForwardList.Native()))

	_cret = C.webkit_back_forward_list_get_forward_list(_arg0)
	runtime.KeepAlive(backForwardList)

	var _list []BackForwardListItem // out

	_list = make([]BackForwardListItem, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.WebKitBackForwardListItem)(v)
		var dst BackForwardListItem // out
		dst = *wrapBackForwardListItem(externglib.Take(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

//
// The function takes the following parameters:
//
//    - limit: number of items to retrieve.
//
func (backForwardList *BackForwardList) ForwardListWithLimit(limit uint) []BackForwardListItem {
	var _arg0 *C.WebKitBackForwardList // out
	var _arg1 C.guint                  // out
	var _cret *C.GList                 // in

	_arg0 = (*C.WebKitBackForwardList)(unsafe.Pointer(backForwardList.Native()))
	_arg1 = C.guint(limit)

	_cret = C.webkit_back_forward_list_get_forward_list_with_limit(_arg0, _arg1)
	runtime.KeepAlive(backForwardList)
	runtime.KeepAlive(limit)

	var _list []BackForwardListItem // out

	_list = make([]BackForwardListItem, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.WebKitBackForwardListItem)(v)
		var dst BackForwardListItem // out
		dst = *wrapBackForwardListItem(externglib.Take(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

func (backForwardList *BackForwardList) Length() uint {
	var _arg0 *C.WebKitBackForwardList // out
	var _cret C.guint                  // in

	_arg0 = (*C.WebKitBackForwardList)(unsafe.Pointer(backForwardList.Native()))

	_cret = C.webkit_back_forward_list_get_length(_arg0)
	runtime.KeepAlive(backForwardList)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// NthItem returns the item at a given index relative to the current item.
//
// The function takes the following parameters:
//
//    - index of the item.
//
func (backForwardList *BackForwardList) NthItem(index int) *BackForwardListItem {
	var _arg0 *C.WebKitBackForwardList     // out
	var _arg1 C.gint                       // out
	var _cret *C.WebKitBackForwardListItem // in

	_arg0 = (*C.WebKitBackForwardList)(unsafe.Pointer(backForwardList.Native()))
	_arg1 = C.gint(index)

	_cret = C.webkit_back_forward_list_get_nth_item(_arg0, _arg1)
	runtime.KeepAlive(backForwardList)
	runtime.KeepAlive(index)

	var _backForwardListItem *BackForwardListItem // out

	if _cret != nil {
		_backForwardListItem = wrapBackForwardListItem(externglib.Take(unsafe.Pointer(_cret)))
	}

	return _backForwardListItem
}

// ConnectChanged: this signal is emitted when back_forward_list changes. This
// happens when the current item is updated, a new item is added or one or more
// items are removed. Note that both item_added and items_removed can NULL when
// only the current item is updated. Items are only removed when the list is
// cleared or the maximum items limit is reached.
func (backForwardList *BackForwardList) ConnectChanged(f func(itemAdded BackForwardListItem, itemsRemoved cgo.Handle)) externglib.SignalHandle {
	return backForwardList.Connect("changed", f)
}
