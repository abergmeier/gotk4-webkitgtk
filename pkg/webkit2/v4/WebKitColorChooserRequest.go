// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
// extern void _gotk4_webkit24_ColorChooserRequest_ConnectFinished(gpointer, guintptr);
import "C"

// glib.Type values for WebKitColorChooserRequest.go.
var GTypeColorChooserRequest = externglib.Type(C.webkit_color_chooser_request_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeColorChooserRequest, F: marshalColorChooserRequest},
	})
}

// ColorChooserRequestOverrider contains methods that are overridable.
type ColorChooserRequestOverrider interface {
}

type ColorChooserRequest struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*ColorChooserRequest)(nil)
)

func classInitColorChooserRequester(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapColorChooserRequest(obj *externglib.Object) *ColorChooserRequest {
	return &ColorChooserRequest{
		Object: obj,
	}
}

func marshalColorChooserRequest(p uintptr) (interface{}, error) {
	return wrapColorChooserRequest(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_webkit24_ColorChooserRequest_ConnectFinished
func _gotk4_webkit24_ColorChooserRequest_ConnectFinished(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectFinished is emitted when the request finishes. This signal can be
// emitted because the user completed the request calling
// webkit_color_chooser_request_finish(), or cancelled it with
// webkit_color_chooser_request_cancel() or because the color input element is
// removed from the DOM.
func (request *ColorChooserRequest) ConnectFinished(f func()) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(request, "finished", false, unsafe.Pointer(C._gotk4_webkit24_ColorChooserRequest_ConnectFinished), f)
}

// Cancel cancels request and the input element changes to use the initial color
// it has before the request started. The signal
// KitColorChooserRequest::finished is emitted to notify that the request has
// finished.
func (request *ColorChooserRequest) Cancel() {
	var _arg0 *C.WebKitColorChooserRequest // out

	_arg0 = (*C.WebKitColorChooserRequest)(unsafe.Pointer(externglib.InternObject(request).Native()))

	C.webkit_color_chooser_request_cancel(_arg0)
	runtime.KeepAlive(request)
}

// Finish finishes request and the input element keeps the current value of
// KitColorChooserRequest:rgba. The signal KitColorChooserRequest::finished is
// emitted to notify that the request has finished.
func (request *ColorChooserRequest) Finish() {
	var _arg0 *C.WebKitColorChooserRequest // out

	_arg0 = (*C.WebKitColorChooserRequest)(unsafe.Pointer(externglib.InternObject(request).Native()))

	C.webkit_color_chooser_request_finish(_arg0)
	runtime.KeepAlive(request)
}

// ElementRectangle gets the bounding box of the color input element.
//
// The function returns the following values:
//
//    - rect to fill in with the element area.
//
func (request *ColorChooserRequest) ElementRectangle() *gdk.Rectangle {
	var _arg0 *C.WebKitColorChooserRequest // out
	var _arg1 C.GdkRectangle               // in

	_arg0 = (*C.WebKitColorChooserRequest)(unsafe.Pointer(externglib.InternObject(request).Native()))

	C.webkit_color_chooser_request_get_element_rectangle(_arg0, &_arg1)
	runtime.KeepAlive(request)

	var _rect *gdk.Rectangle // out

	_rect = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _rect
}

// RGBA gets the current RGBA color of request.
//
// The function returns the following values:
//
//    - rgba to fill in with the current color.
//
func (request *ColorChooserRequest) RGBA() *gdk.RGBA {
	var _arg0 *C.WebKitColorChooserRequest // out
	var _arg1 C.GdkRGBA                    // in

	_arg0 = (*C.WebKitColorChooserRequest)(unsafe.Pointer(externglib.InternObject(request).Native()))

	C.webkit_color_chooser_request_get_rgba(_arg0, &_arg1)
	runtime.KeepAlive(request)

	var _rgba *gdk.RGBA // out

	_rgba = (*gdk.RGBA)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _rgba
}

// SetRGBA sets the current RGBA color of request.
//
// The function takes the following parameters:
//
//    - rgba: pointer RGBA.
//
func (request *ColorChooserRequest) SetRGBA(rgba *gdk.RGBA) {
	var _arg0 *C.WebKitColorChooserRequest // out
	var _arg1 *C.GdkRGBA                   // out

	_arg0 = (*C.WebKitColorChooserRequest)(unsafe.Pointer(externglib.InternObject(request).Native()))
	_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(rgba)))

	C.webkit_color_chooser_request_set_rgba(_arg0, _arg1)
	runtime.KeepAlive(request)
	runtime.KeepAlive(rgba)
}
