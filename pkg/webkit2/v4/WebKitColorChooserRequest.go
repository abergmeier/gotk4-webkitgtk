// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_color_chooser_request_get_type()), F: marshalColorChooserRequester},
	})
}

type ColorChooserRequest struct {
	*externglib.Object
}

func wrapColorChooserRequest(obj *externglib.Object) *ColorChooserRequest {
	return &ColorChooserRequest{
		Object: obj,
	}
}

func marshalColorChooserRequester(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapColorChooserRequest(obj), nil
}

// Cancel cancels request and the input element changes to use the initial color
// it has before the request started. The signal
// KitColorChooserRequest::finished is emitted to notify that the request has
// finished.
func (request *ColorChooserRequest) Cancel() {
	var _arg0 *C.WebKitColorChooserRequest // out

	_arg0 = (*C.WebKitColorChooserRequest)(unsafe.Pointer(request.Native()))

	C.webkit_color_chooser_request_cancel(_arg0)
	runtime.KeepAlive(request)
}

// Finish finishes request and the input element keeps the current value of
// KitColorChooserRequest:rgba. The signal KitColorChooserRequest::finished is
// emitted to notify that the request has finished.
func (request *ColorChooserRequest) Finish() {
	var _arg0 *C.WebKitColorChooserRequest // out

	_arg0 = (*C.WebKitColorChooserRequest)(unsafe.Pointer(request.Native()))

	C.webkit_color_chooser_request_finish(_arg0)
	runtime.KeepAlive(request)
}

// ElementRectangle gets the bounding box of the color input element.
func (request *ColorChooserRequest) ElementRectangle() gdk.Rectangle {
	var _arg0 *C.WebKitColorChooserRequest // out
	var _arg1 C.GdkRectangle               // in

	_arg0 = (*C.WebKitColorChooserRequest)(unsafe.Pointer(request.Native()))

	C.webkit_color_chooser_request_get_element_rectangle(_arg0, &_arg1)
	runtime.KeepAlive(request)

	var _rect gdk.Rectangle // out

	_rect = *(*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _rect
}

// RGBA gets the current RGBA color of request
func (request *ColorChooserRequest) RGBA() gdk.RGBA {
	var _arg0 *C.WebKitColorChooserRequest // out
	var _arg1 C.GdkRGBA                    // in

	_arg0 = (*C.WebKitColorChooserRequest)(unsafe.Pointer(request.Native()))

	C.webkit_color_chooser_request_get_rgba(_arg0, &_arg1)
	runtime.KeepAlive(request)

	var _rgba gdk.RGBA // out

	_rgba = *(*gdk.RGBA)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _rgba
}

// SetRGBA sets the current RGBA color of request
func (request *ColorChooserRequest) SetRGBA(rgba *gdk.RGBA) {
	var _arg0 *C.WebKitColorChooserRequest // out
	var _arg1 *C.GdkRGBA                   // out

	_arg0 = (*C.WebKitColorChooserRequest)(unsafe.Pointer(request.Native()))
	_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(rgba)))

	C.webkit_color_chooser_request_set_rgba(_arg0, _arg1)
	runtime.KeepAlive(request)
	runtime.KeepAlive(rgba)
}
