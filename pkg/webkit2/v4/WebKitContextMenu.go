// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_context_menu_get_type()), F: marshalContextMenuer},
	})
}

type ContextMenu struct {
	*externglib.Object
}

var _ gextras.Nativer = (*ContextMenu)(nil)

func wrapContextMenu(obj *externglib.Object) *ContextMenu {
	return &ContextMenu{
		Object: obj,
	}
}

func marshalContextMenuer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapContextMenu(obj), nil
}

// NewContextMenu creates a new KitContextMenu object to be used as a submenu of
// an existing KitContextMenu. The context menu of a KitWebView is created by
// the view and passed as an argument of KitWebView::context-menu signal. To add
// items to the menu use webkit_context_menu_prepend(),
// webkit_context_menu_append() or webkit_context_menu_insert(). See also
// webkit_context_menu_new_with_items() to create a KitContextMenu with a list
// of initial items.
func NewContextMenu() *ContextMenu {
	var _cret *C.WebKitContextMenu // in

	_cret = C.webkit_context_menu_new()

	var _contextMenu *ContextMenu // out

	_contextMenu = wrapContextMenu(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _contextMenu
}

// Append adds item at the end of the menu.
func (menu *ContextMenu) Append(item *ContextMenuItem) {
	var _arg0 *C.WebKitContextMenu     // out
	var _arg1 *C.WebKitContextMenuItem // out

	_arg0 = (*C.WebKitContextMenu)(unsafe.Pointer(menu.Native()))
	_arg1 = (*C.WebKitContextMenuItem)(unsafe.Pointer(item.Native()))

	C.webkit_context_menu_append(_arg0, _arg1)
}

// First gets the first item in the menu.
func (menu *ContextMenu) First() *ContextMenuItem {
	var _arg0 *C.WebKitContextMenu     // out
	var _cret *C.WebKitContextMenuItem // in

	_arg0 = (*C.WebKitContextMenu)(unsafe.Pointer(menu.Native()))

	_cret = C.webkit_context_menu_first(_arg0)

	var _contextMenuItem *ContextMenuItem // out

	_contextMenuItem = wrapContextMenuItem(externglib.Take(unsafe.Pointer(_cret)))

	return _contextMenuItem
}

// ItemAtPosition gets the item at the given position in the menu.
func (menu *ContextMenu) ItemAtPosition(position uint) *ContextMenuItem {
	var _arg0 *C.WebKitContextMenu     // out
	var _arg1 C.guint                  // out
	var _cret *C.WebKitContextMenuItem // in

	_arg0 = (*C.WebKitContextMenu)(unsafe.Pointer(menu.Native()))
	_arg1 = C.guint(position)

	_cret = C.webkit_context_menu_get_item_at_position(_arg0, _arg1)

	var _contextMenuItem *ContextMenuItem // out

	_contextMenuItem = wrapContextMenuItem(externglib.Take(unsafe.Pointer(_cret)))

	return _contextMenuItem
}

// NItems gets the length of the menu.
func (menu *ContextMenu) NItems() uint {
	var _arg0 *C.WebKitContextMenu // out
	var _cret C.guint              // in

	_arg0 = (*C.WebKitContextMenu)(unsafe.Pointer(menu.Native()))

	_cret = C.webkit_context_menu_get_n_items(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// UserData gets the user data of menu. This function can be used from the UI
// Process to get user data previously set from the Web Process with
// webkit_context_menu_set_user_data().
func (menu *ContextMenu) UserData() *glib.Variant {
	var _arg0 *C.WebKitContextMenu // out
	var _cret *C.GVariant          // in

	_arg0 = (*C.WebKitContextMenu)(unsafe.Pointer(menu.Native()))

	_cret = C.webkit_context_menu_get_user_data(_arg0)

	var _variant *glib.Variant // out

	_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_variant, func(v *glib.Variant) {
		C.g_variant_unref((*C.GVariant)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _variant
}

// Insert inserts item into the menu at the given position. If position is
// negative, or is larger than the number of items in the KitContextMenu, the
// item is added on to the end of the menu. The first position is 0.
func (menu *ContextMenu) Insert(item *ContextMenuItem, position int) {
	var _arg0 *C.WebKitContextMenu     // out
	var _arg1 *C.WebKitContextMenuItem // out
	var _arg2 C.gint                   // out

	_arg0 = (*C.WebKitContextMenu)(unsafe.Pointer(menu.Native()))
	_arg1 = (*C.WebKitContextMenuItem)(unsafe.Pointer(item.Native()))
	_arg2 = C.gint(position)

	C.webkit_context_menu_insert(_arg0, _arg1, _arg2)
}

// Last gets the last item in the menu.
func (menu *ContextMenu) Last() *ContextMenuItem {
	var _arg0 *C.WebKitContextMenu     // out
	var _cret *C.WebKitContextMenuItem // in

	_arg0 = (*C.WebKitContextMenu)(unsafe.Pointer(menu.Native()))

	_cret = C.webkit_context_menu_last(_arg0)

	var _contextMenuItem *ContextMenuItem // out

	_contextMenuItem = wrapContextMenuItem(externglib.Take(unsafe.Pointer(_cret)))

	return _contextMenuItem
}

// MoveItem moves item to the given position in the menu. If position is
// negative, or is larger than the number of items in the KitContextMenu, the
// item is added on to the end of the menu. The first position is 0.
func (menu *ContextMenu) MoveItem(item *ContextMenuItem, position int) {
	var _arg0 *C.WebKitContextMenu     // out
	var _arg1 *C.WebKitContextMenuItem // out
	var _arg2 C.gint                   // out

	_arg0 = (*C.WebKitContextMenu)(unsafe.Pointer(menu.Native()))
	_arg1 = (*C.WebKitContextMenuItem)(unsafe.Pointer(item.Native()))
	_arg2 = C.gint(position)

	C.webkit_context_menu_move_item(_arg0, _arg1, _arg2)
}

// Prepend adds item at the beginning of the menu.
func (menu *ContextMenu) Prepend(item *ContextMenuItem) {
	var _arg0 *C.WebKitContextMenu     // out
	var _arg1 *C.WebKitContextMenuItem // out

	_arg0 = (*C.WebKitContextMenu)(unsafe.Pointer(menu.Native()))
	_arg1 = (*C.WebKitContextMenuItem)(unsafe.Pointer(item.Native()))

	C.webkit_context_menu_prepend(_arg0, _arg1)
}

// Remove removes item from the menu. See also webkit_context_menu_remove_all()
// to remove all items.
func (menu *ContextMenu) Remove(item *ContextMenuItem) {
	var _arg0 *C.WebKitContextMenu     // out
	var _arg1 *C.WebKitContextMenuItem // out

	_arg0 = (*C.WebKitContextMenu)(unsafe.Pointer(menu.Native()))
	_arg1 = (*C.WebKitContextMenuItem)(unsafe.Pointer(item.Native()))

	C.webkit_context_menu_remove(_arg0, _arg1)
}

// RemoveAll removes all items of the menu.
func (menu *ContextMenu) RemoveAll() {
	var _arg0 *C.WebKitContextMenu // out

	_arg0 = (*C.WebKitContextMenu)(unsafe.Pointer(menu.Native()))

	C.webkit_context_menu_remove_all(_arg0)
}

// SetUserData sets user data to menu. This function can be used from a Web
// Process extension to set user data that can be retrieved from the UI Process
// using webkit_context_menu_get_user_data(). If the user_data #GVariant is
// floating, it is consumed.
func (menu *ContextMenu) SetUserData(userData *glib.Variant) {
	var _arg0 *C.WebKitContextMenu // out
	var _arg1 *C.GVariant          // out

	_arg0 = (*C.WebKitContextMenu)(unsafe.Pointer(menu.Native()))
	_arg1 = (*C.GVariant)(gextras.StructNative(unsafe.Pointer(userData)))

	C.webkit_context_menu_set_user_data(_arg0, _arg1)
}
