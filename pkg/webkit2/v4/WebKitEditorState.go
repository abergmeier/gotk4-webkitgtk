// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_editor_typing_attributes_get_type()), F: marshalEditorTypingAttributes},
		{T: externglib.Type(C.webkit_editor_state_get_type()), F: marshalEditorStater},
	})
}

// EditorTypingAttributes: enum values with flags representing typing
// attributes.
type EditorTypingAttributes int

const (
	// EditorTypingAttributeNone: no typing attributes.
	EditorTypingAttributeNone EditorTypingAttributes = 0b10
	// EditorTypingAttributeBold: bold typing attribute.
	EditorTypingAttributeBold EditorTypingAttributes = 0b100
	// EditorTypingAttributeItalic: italic typing attribute.
	EditorTypingAttributeItalic EditorTypingAttributes = 0b1000
	// EditorTypingAttributeUnderline: underline typing attribute.
	EditorTypingAttributeUnderline EditorTypingAttributes = 0b10000
	// EditorTypingAttributeStrikethrough: strikethrough typing attribute.
	EditorTypingAttributeStrikethrough EditorTypingAttributes = 0b100000
)

func marshalEditorTypingAttributes(p uintptr) (interface{}, error) {
	return EditorTypingAttributes(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// String returns the names in string for EditorTypingAttributes.
func (e EditorTypingAttributes) String() string {
	if e == 0 {
		return "EditorTypingAttributes(0)"
	}

	var builder strings.Builder
	builder.Grow(145)

	for e != 0 {
		next := e & (e - 1)
		bit := e - next

		switch bit {
		case EditorTypingAttributeNone:
			builder.WriteString("None|")
		case EditorTypingAttributeBold:
			builder.WriteString("Bold|")
		case EditorTypingAttributeItalic:
			builder.WriteString("Italic|")
		case EditorTypingAttributeUnderline:
			builder.WriteString("Underline|")
		case EditorTypingAttributeStrikethrough:
			builder.WriteString("Strikethrough|")
		default:
			builder.WriteString(fmt.Sprintf("EditorTypingAttributes(0b%b)|", bit))
		}

		e = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

type EditorState struct {
	*externglib.Object
}

var _ gextras.Nativer = (*EditorState)(nil)

func wrapEditorState(obj *externglib.Object) *EditorState {
	return &EditorState{
		Object: obj,
	}
}

func marshalEditorStater(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapEditorState(obj), nil
}

// TypingAttributes gets the typing attributes at the current cursor position.
// If there is a selection, this returns the typing attributes of the selected
// text. Note that in case of a selection, typing attributes are considered
// active only when they are present throughout the selection.
func (editorState *EditorState) TypingAttributes() uint {
	var _arg0 *C.WebKitEditorState // out
	var _cret C.guint              // in

	_arg0 = (*C.WebKitEditorState)(unsafe.Pointer(editorState.Native()))

	_cret = C.webkit_editor_state_get_typing_attributes(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// IsCopyAvailable gets whether a copy command can be issued.
func (editorState *EditorState) IsCopyAvailable() bool {
	var _arg0 *C.WebKitEditorState // out
	var _cret C.gboolean           // in

	_arg0 = (*C.WebKitEditorState)(unsafe.Pointer(editorState.Native()))

	_cret = C.webkit_editor_state_is_copy_available(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsCutAvailable gets whether a cut command can be issued.
func (editorState *EditorState) IsCutAvailable() bool {
	var _arg0 *C.WebKitEditorState // out
	var _cret C.gboolean           // in

	_arg0 = (*C.WebKitEditorState)(unsafe.Pointer(editorState.Native()))

	_cret = C.webkit_editor_state_is_cut_available(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsPasteAvailable gets whether a paste command can be issued.
func (editorState *EditorState) IsPasteAvailable() bool {
	var _arg0 *C.WebKitEditorState // out
	var _cret C.gboolean           // in

	_arg0 = (*C.WebKitEditorState)(unsafe.Pointer(editorState.Native()))

	_cret = C.webkit_editor_state_is_paste_available(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsRedoAvailable gets whether a redo command can be issued.
func (editorState *EditorState) IsRedoAvailable() bool {
	var _arg0 *C.WebKitEditorState // out
	var _cret C.gboolean           // in

	_arg0 = (*C.WebKitEditorState)(unsafe.Pointer(editorState.Native()))

	_cret = C.webkit_editor_state_is_redo_available(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsUndoAvailable gets whether an undo command can be issued.
func (editorState *EditorState) IsUndoAvailable() bool {
	var _arg0 *C.WebKitEditorState // out
	var _cret C.gboolean           // in

	_arg0 = (*C.WebKitEditorState)(unsafe.Pointer(editorState.Native()))

	_cret = C.webkit_editor_state_is_undo_available(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
