// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"runtime/cgo"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

// glib.Type values for WebKitFormSubmissionRequest.go.
var GTypeFormSubmissionRequest = externglib.Type(C.webkit_form_submission_request_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeFormSubmissionRequest, F: marshalFormSubmissionRequest},
	})
}

// FormSubmissionRequestOverrider contains methods that are overridable.
type FormSubmissionRequestOverrider interface {
}

type FormSubmissionRequest struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*FormSubmissionRequest)(nil)
)

func classInitFormSubmissionRequester(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapFormSubmissionRequest(obj *externglib.Object) *FormSubmissionRequest {
	return &FormSubmissionRequest{
		Object: obj,
	}
}

func marshalFormSubmissionRequest(p uintptr) (interface{}, error) {
	return wrapFormSubmissionRequest(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// TextFields: get a Table with the values of the text fields contained in the
// form associated to request. Note that fields will be missing if the form
// contains multiple text input elements with the same name, so this function
// does not reliably return all text fields.
//
// Deprecated: Use webkit_form_submission_request_list_text_fields() instead.
//
// The function returns the following values:
//
//    - hashTable (optional) with the form text fields, or NULL if the form
//      doesn't contain text fields.
//
func (request *FormSubmissionRequest) TextFields() map[cgo.Handle]cgo.Handle {
	var _arg0 *C.WebKitFormSubmissionRequest // out
	var _cret *C.GHashTable                  // in

	_arg0 = (*C.WebKitFormSubmissionRequest)(unsafe.Pointer(externglib.InternObject(request).Native()))

	_cret = C.webkit_form_submission_request_get_text_fields(_arg0)
	runtime.KeepAlive(request)

	var _hashTable map[cgo.Handle]cgo.Handle // out

	if _cret != nil {
		_hashTable = make(map[cgo.Handle]cgo.Handle, gextras.HashTableSize(unsafe.Pointer(_cret)))
		gextras.MoveHashTable(unsafe.Pointer(_cret), false, func(k, v unsafe.Pointer) {
			ksrc := *(**C.gpointer)(k)
			vsrc := *(**C.gpointer)(v)
			var kdst cgo.Handle // out
			var vdst cgo.Handle // out
			kdst = (cgo.Handle)(unsafe.Pointer(ksrc))
			vdst = (cgo.Handle)(unsafe.Pointer(vsrc))
			_hashTable[kdst] = vdst
		})
	}

	return _hashTable
}

// Submit: continue the form submission.
func (request *FormSubmissionRequest) Submit() {
	var _arg0 *C.WebKitFormSubmissionRequest // out

	_arg0 = (*C.WebKitFormSubmissionRequest)(unsafe.Pointer(externglib.InternObject(request).Native()))

	C.webkit_form_submission_request_submit(_arg0)
	runtime.KeepAlive(request)
}
