// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_geolocation_manager_get_type()), F: marshalGeolocationManagerer},
		{T: externglib.Type(C.webkit_geolocation_position_get_type()), F: marshalGeolocationPosition},
	})
}

type GeolocationManager struct {
	*externglib.Object
}

var _ gextras.Nativer = (*GeolocationManager)(nil)

func wrapGeolocationManager(obj *externglib.Object) *GeolocationManager {
	return &GeolocationManager{
		Object: obj,
	}
}

func marshalGeolocationManagerer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapGeolocationManager(obj), nil
}

// Failed: notify manager that determining the position failed.
func (manager *GeolocationManager) Failed(errorMessage string) {
	var _arg0 *C.WebKitGeolocationManager // out
	var _arg1 *C.char                     // out

	_arg0 = (*C.WebKitGeolocationManager)(unsafe.Pointer(manager.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(errorMessage)))

	C.webkit_geolocation_manager_failed(_arg0, _arg1)
}

// EnableHighAccuracy: get whether high accuracy is enabled.
func (manager *GeolocationManager) EnableHighAccuracy() bool {
	var _arg0 *C.WebKitGeolocationManager // out
	var _cret C.gboolean                  // in

	_arg0 = (*C.WebKitGeolocationManager)(unsafe.Pointer(manager.Native()))

	_cret = C.webkit_geolocation_manager_get_enable_high_accuracy(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// UpdatePosition: notify manager that position has been updated to position.
func (manager *GeolocationManager) UpdatePosition(position *GeolocationPosition) {
	var _arg0 *C.WebKitGeolocationManager  // out
	var _arg1 *C.WebKitGeolocationPosition // out

	_arg0 = (*C.WebKitGeolocationManager)(unsafe.Pointer(manager.Native()))
	_arg1 = (*C.WebKitGeolocationPosition)(gextras.StructNative(unsafe.Pointer(position)))

	C.webkit_geolocation_manager_update_position(_arg0, _arg1)
}

// GeolocationPosition is an opaque struct used to provide position updates to a
// KitGeolocationManager using webkit_geolocation_manager_update_position().
type GeolocationPosition struct {
	nocopy gextras.NoCopy
	native *C.WebKitGeolocationPosition
}

func marshalGeolocationPosition(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return &GeolocationPosition{native: (*C.WebKitGeolocationPosition)(unsafe.Pointer(b))}, nil
}

// NewGeolocationPosition constructs a struct GeolocationPosition.
func NewGeolocationPosition(latitude float64, longitude float64, accuracy float64) *GeolocationPosition {
	var _arg1 C.double                     // out
	var _arg2 C.double                     // out
	var _arg3 C.double                     // out
	var _cret *C.WebKitGeolocationPosition // in

	_arg1 = C.double(latitude)
	_arg2 = C.double(longitude)
	_arg3 = C.double(accuracy)

	_cret = C.webkit_geolocation_position_new(_arg1, _arg2, _arg3)

	var _geolocationPosition *GeolocationPosition // out

	_geolocationPosition = (*GeolocationPosition)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_geolocationPosition, func(v *GeolocationPosition) {
		C.webkit_geolocation_position_free((*C.WebKitGeolocationPosition)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _geolocationPosition
}

// Copy: make a copy of the KitGeolocationPosition
func (position *GeolocationPosition) Copy() *GeolocationPosition {
	var _arg0 *C.WebKitGeolocationPosition // out
	var _cret *C.WebKitGeolocationPosition // in

	_arg0 = (*C.WebKitGeolocationPosition)(gextras.StructNative(unsafe.Pointer(position)))

	_cret = C.webkit_geolocation_position_copy(_arg0)

	var _geolocationPosition *GeolocationPosition // out

	_geolocationPosition = (*GeolocationPosition)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_geolocationPosition, func(v *GeolocationPosition) {
		C.webkit_geolocation_position_free((*C.WebKitGeolocationPosition)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _geolocationPosition
}

// Free: free the KitGeolocationPosition
func (position *GeolocationPosition) free() {
	var _arg0 *C.WebKitGeolocationPosition // out

	_arg0 = (*C.WebKitGeolocationPosition)(gextras.StructNative(unsafe.Pointer(position)))

	C.webkit_geolocation_position_free(_arg0)
}

// SetAltitude: set the position altitude
func (position *GeolocationPosition) SetAltitude(altitude float64) {
	var _arg0 *C.WebKitGeolocationPosition // out
	var _arg1 C.double                     // out

	_arg0 = (*C.WebKitGeolocationPosition)(gextras.StructNative(unsafe.Pointer(position)))
	_arg1 = C.double(altitude)

	C.webkit_geolocation_position_set_altitude(_arg0, _arg1)
}

// SetAltitudeAccuracy: set the accuracy of position altitude
func (position *GeolocationPosition) SetAltitudeAccuracy(altitudeAccuracy float64) {
	var _arg0 *C.WebKitGeolocationPosition // out
	var _arg1 C.double                     // out

	_arg0 = (*C.WebKitGeolocationPosition)(gextras.StructNative(unsafe.Pointer(position)))
	_arg1 = C.double(altitudeAccuracy)

	C.webkit_geolocation_position_set_altitude_accuracy(_arg0, _arg1)
}

// SetHeading: set the position heading, as a positive angle between the
// direction of movement and the North direction, in clockwise direction.
func (position *GeolocationPosition) SetHeading(heading float64) {
	var _arg0 *C.WebKitGeolocationPosition // out
	var _arg1 C.double                     // out

	_arg0 = (*C.WebKitGeolocationPosition)(gextras.StructNative(unsafe.Pointer(position)))
	_arg1 = C.double(heading)

	C.webkit_geolocation_position_set_heading(_arg0, _arg1)
}

// SetSpeed: set the position speed
func (position *GeolocationPosition) SetSpeed(speed float64) {
	var _arg0 *C.WebKitGeolocationPosition // out
	var _arg1 C.double                     // out

	_arg0 = (*C.WebKitGeolocationPosition)(gextras.StructNative(unsafe.Pointer(position)))
	_arg1 = C.double(speed)

	C.webkit_geolocation_position_set_speed(_arg0, _arg1)
}

// SetTimestamp: set the position timestamp. By default it's the time when the
// position was created.
func (position *GeolocationPosition) SetTimestamp(timestamp uint64) {
	var _arg0 *C.WebKitGeolocationPosition // out
	var _arg1 C.guint64                    // out

	_arg0 = (*C.WebKitGeolocationPosition)(gextras.StructNative(unsafe.Pointer(position)))
	_arg1 = C.guint64(timestamp)

	C.webkit_geolocation_position_set_timestamp(_arg0, _arg1)
}
