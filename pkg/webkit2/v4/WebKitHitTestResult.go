// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"runtime"
	"strings"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_hit_test_result_context_get_type()), F: marshalHitTestResultContext},
		{T: externglib.Type(C.webkit_hit_test_result_get_type()), F: marshalHitTestResulter},
	})
}

// HitTestResultContext: enum values with flags representing the context of a
// KitHitTestResult.
type HitTestResultContext int

const (
	// HitTestResultContextDocument: anywhere in the document.
	HitTestResultContextDocument HitTestResultContext = 0b10
	// HitTestResultContextLink: hyperlink element.
	HitTestResultContextLink HitTestResultContext = 0b100
	// HitTestResultContextImage: image element.
	HitTestResultContextImage HitTestResultContext = 0b1000
	// HitTestResultContextMedia: video or audio element.
	HitTestResultContextMedia HitTestResultContext = 0b10000
	// HitTestResultContextEditable: editable element.
	HitTestResultContextEditable HitTestResultContext = 0b100000
	// HitTestResultContextScrollbar: scrollbar element.
	HitTestResultContextScrollbar HitTestResultContext = 0b1000000
	// HitTestResultContextSelection: selected element. Since 2.8.
	HitTestResultContextSelection HitTestResultContext = 0b10000000
)

func marshalHitTestResultContext(p uintptr) (interface{}, error) {
	return HitTestResultContext(externglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for HitTestResultContext.
func (h HitTestResultContext) String() string {
	if h == 0 {
		return "HitTestResultContext(0)"
	}

	var builder strings.Builder
	builder.Grow(194)

	for h != 0 {
		next := h & (h - 1)
		bit := h - next

		switch bit {
		case HitTestResultContextDocument:
			builder.WriteString("Document|")
		case HitTestResultContextLink:
			builder.WriteString("Link|")
		case HitTestResultContextImage:
			builder.WriteString("Image|")
		case HitTestResultContextMedia:
			builder.WriteString("Media|")
		case HitTestResultContextEditable:
			builder.WriteString("Editable|")
		case HitTestResultContextScrollbar:
			builder.WriteString("Scrollbar|")
		case HitTestResultContextSelection:
			builder.WriteString("Selection|")
		default:
			builder.WriteString(fmt.Sprintf("HitTestResultContext(0b%b)|", bit))
		}

		h = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if h contains other.
func (h HitTestResultContext) Has(other HitTestResultContext) bool {
	return (h & other) == other
}

type HitTestResult struct {
	*externglib.Object
}

func wrapHitTestResult(obj *externglib.Object) *HitTestResult {
	return &HitTestResult{
		Object: obj,
	}
}

func marshalHitTestResulter(p uintptr) (interface{}, error) {
	return wrapHitTestResult(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ContextIsEditable gets whether WEBKIT_HIT_TEST_RESULT_CONTEXT_EDITABLE flag
// is present in KitHitTestResult:context.
func (hitTestResult *HitTestResult) ContextIsEditable() bool {
	var _arg0 *C.WebKitHitTestResult // out
	var _cret C.gboolean             // in

	_arg0 = (*C.WebKitHitTestResult)(unsafe.Pointer(hitTestResult.Native()))

	_cret = C.webkit_hit_test_result_context_is_editable(_arg0)
	runtime.KeepAlive(hitTestResult)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ContextIsImage gets whether WEBKIT_HIT_TEST_RESULT_CONTEXT_IMAGE flag is
// present in KitHitTestResult:context.
func (hitTestResult *HitTestResult) ContextIsImage() bool {
	var _arg0 *C.WebKitHitTestResult // out
	var _cret C.gboolean             // in

	_arg0 = (*C.WebKitHitTestResult)(unsafe.Pointer(hitTestResult.Native()))

	_cret = C.webkit_hit_test_result_context_is_image(_arg0)
	runtime.KeepAlive(hitTestResult)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ContextIsLink gets whether WEBKIT_HIT_TEST_RESULT_CONTEXT_LINK flag is
// present in KitHitTestResult:context.
func (hitTestResult *HitTestResult) ContextIsLink() bool {
	var _arg0 *C.WebKitHitTestResult // out
	var _cret C.gboolean             // in

	_arg0 = (*C.WebKitHitTestResult)(unsafe.Pointer(hitTestResult.Native()))

	_cret = C.webkit_hit_test_result_context_is_link(_arg0)
	runtime.KeepAlive(hitTestResult)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ContextIsMedia gets whether WEBKIT_HIT_TEST_RESULT_CONTEXT_MEDIA flag is
// present in KitHitTestResult:context.
func (hitTestResult *HitTestResult) ContextIsMedia() bool {
	var _arg0 *C.WebKitHitTestResult // out
	var _cret C.gboolean             // in

	_arg0 = (*C.WebKitHitTestResult)(unsafe.Pointer(hitTestResult.Native()))

	_cret = C.webkit_hit_test_result_context_is_media(_arg0)
	runtime.KeepAlive(hitTestResult)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ContextIsScrollbar gets whether WEBKIT_HIT_TEST_RESULT_CONTEXT_SCROLLBAR flag
// is present in KitHitTestResult:context.
func (hitTestResult *HitTestResult) ContextIsScrollbar() bool {
	var _arg0 *C.WebKitHitTestResult // out
	var _cret C.gboolean             // in

	_arg0 = (*C.WebKitHitTestResult)(unsafe.Pointer(hitTestResult.Native()))

	_cret = C.webkit_hit_test_result_context_is_scrollbar(_arg0)
	runtime.KeepAlive(hitTestResult)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ContextIsSelection gets whether WEBKIT_HIT_TEST_RESULT_CONTEXT_SELECTION flag
// is present in KitHitTestResult:context.
func (hitTestResult *HitTestResult) ContextIsSelection() bool {
	var _arg0 *C.WebKitHitTestResult // out
	var _cret C.gboolean             // in

	_arg0 = (*C.WebKitHitTestResult)(unsafe.Pointer(hitTestResult.Native()))

	_cret = C.webkit_hit_test_result_context_is_selection(_arg0)
	runtime.KeepAlive(hitTestResult)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Context gets the value of the KitHitTestResult:context property.
func (hitTestResult *HitTestResult) Context() uint {
	var _arg0 *C.WebKitHitTestResult // out
	var _cret C.guint                // in

	_arg0 = (*C.WebKitHitTestResult)(unsafe.Pointer(hitTestResult.Native()))

	_cret = C.webkit_hit_test_result_get_context(_arg0)
	runtime.KeepAlive(hitTestResult)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// ImageURI gets the value of the KitHitTestResult:image-uri property.
func (hitTestResult *HitTestResult) ImageURI() string {
	var _arg0 *C.WebKitHitTestResult // out
	var _cret *C.gchar               // in

	_arg0 = (*C.WebKitHitTestResult)(unsafe.Pointer(hitTestResult.Native()))

	_cret = C.webkit_hit_test_result_get_image_uri(_arg0)
	runtime.KeepAlive(hitTestResult)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// LinkLabel gets the value of the KitHitTestResult:link-label property.
func (hitTestResult *HitTestResult) LinkLabel() string {
	var _arg0 *C.WebKitHitTestResult // out
	var _cret *C.gchar               // in

	_arg0 = (*C.WebKitHitTestResult)(unsafe.Pointer(hitTestResult.Native()))

	_cret = C.webkit_hit_test_result_get_link_label(_arg0)
	runtime.KeepAlive(hitTestResult)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// LinkTitle gets the value of the KitHitTestResult:link-title property.
func (hitTestResult *HitTestResult) LinkTitle() string {
	var _arg0 *C.WebKitHitTestResult // out
	var _cret *C.gchar               // in

	_arg0 = (*C.WebKitHitTestResult)(unsafe.Pointer(hitTestResult.Native()))

	_cret = C.webkit_hit_test_result_get_link_title(_arg0)
	runtime.KeepAlive(hitTestResult)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// LinkURI gets the value of the KitHitTestResult:link-uri property.
func (hitTestResult *HitTestResult) LinkURI() string {
	var _arg0 *C.WebKitHitTestResult // out
	var _cret *C.gchar               // in

	_arg0 = (*C.WebKitHitTestResult)(unsafe.Pointer(hitTestResult.Native()))

	_cret = C.webkit_hit_test_result_get_link_uri(_arg0)
	runtime.KeepAlive(hitTestResult)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// MediaURI gets the value of the KitHitTestResult:media-uri property.
func (hitTestResult *HitTestResult) MediaURI() string {
	var _arg0 *C.WebKitHitTestResult // out
	var _cret *C.gchar               // in

	_arg0 = (*C.WebKitHitTestResult)(unsafe.Pointer(hitTestResult.Native()))

	_cret = C.webkit_hit_test_result_get_media_uri(_arg0)
	runtime.KeepAlive(hitTestResult)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}
