// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"runtime"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_input_purpose_get_type()), F: marshalInputPurpose},
		{T: externglib.Type(C.webkit_input_hints_get_type()), F: marshalInputHints},
		{T: externglib.Type(C.webkit_input_method_context_get_type()), F: marshalInputMethodContexter},
		{T: externglib.Type(C.webkit_input_method_underline_get_type()), F: marshalInputMethodUnderline},
	})
}

// InputPurpose: enum values used to describe the primary purpose of the active
// editable element.
type InputPurpose int

const (
	// InputPurposeFreeForm: editable element expects any characters
	InputPurposeFreeForm InputPurpose = iota
	// InputPurposeDigits: editable element expects digits
	InputPurposeDigits
	// InputPurposeNumber: editable element expects a number
	InputPurposeNumber
	// InputPurposePhone: editable element expects a telephone
	InputPurposePhone
	// InputPurposeURL: editable element expects a URL
	InputPurposeURL
	// InputPurposeEmail: editable element expects an email
	InputPurposeEmail
	// InputPurposePassword: editable element expects a password
	InputPurposePassword
)

func marshalInputPurpose(p uintptr) (interface{}, error) {
	return InputPurpose(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// String returns the name in string for InputPurpose.
func (i InputPurpose) String() string {
	switch i {
	case InputPurposeFreeForm:
		return "FreeForm"
	case InputPurposeDigits:
		return "Digits"
	case InputPurposeNumber:
		return "Number"
	case InputPurposePhone:
		return "Phone"
	case InputPurposeURL:
		return "URL"
	case InputPurposeEmail:
		return "Email"
	case InputPurposePassword:
		return "Password"
	default:
		return fmt.Sprintf("InputPurpose(%d)", i)
	}
}

// InputHints: enum values used to describe hints that might be taken into
// account by input methods.
type InputHints int

const (
	// InputHintNone: no special behavior suggested
	InputHintNone InputHints = 0b0
	// InputHintSpellcheck: suggest spell checking
	InputHintSpellcheck InputHints = 0b1
	// InputHintLowercase: suggest to not autocapitlize
	InputHintLowercase InputHints = 0b10
	// InputHintUppercaseChars: suggest to capitalize all text
	InputHintUppercaseChars InputHints = 0b100
	// InputHintUppercaseWords: suggest to capitalize the first character of
	// each word
	InputHintUppercaseWords InputHints = 0b1000
	// InputHintUppercaseSentences: suggest to capitalize the first word of each
	// sentence
	InputHintUppercaseSentences InputHints = 0b10000
	// InputHintInhibitOsk: suggest to not show an onscreen keyboard
	InputHintInhibitOsk InputHints = 0b100000
)

func marshalInputHints(p uintptr) (interface{}, error) {
	return InputHints(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// String returns the names in string for InputHints.
func (i InputHints) String() string {
	if i == 0 {
		return "InputHints(0)"
	}

	var builder strings.Builder
	builder.Grow(148)

	for i != 0 {
		next := i & (i - 1)
		bit := i - next

		switch bit {
		case InputHintNone:
			builder.WriteString("None|")
		case InputHintSpellcheck:
			builder.WriteString("Spellcheck|")
		case InputHintLowercase:
			builder.WriteString("Lowercase|")
		case InputHintUppercaseChars:
			builder.WriteString("UppercaseChars|")
		case InputHintUppercaseWords:
			builder.WriteString("UppercaseWords|")
		case InputHintUppercaseSentences:
			builder.WriteString("UppercaseSentences|")
		case InputHintInhibitOsk:
			builder.WriteString("InhibitOsk|")
		default:
			builder.WriteString(fmt.Sprintf("InputHints(0b%b)|", bit))
		}

		i = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// InputMethodContextOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type InputMethodContextOverrider interface {
	Committed(text string)
	DeleteSurrounding(offset int, nChars uint)
	// FilterKeyEvent: allow key_event to be handled by the input method. If
	// TRUE is returned, then no further processing should be done for the key
	// event.
	FilterKeyEvent(keyEvent *gdk.EventKey) bool
	// NotifyCursorArea: notify context that cursor area changed in input
	// associated.
	NotifyCursorArea(x int, y int, width int, height int)
	// NotifyFocusIn: notify context that input associated has gained focus.
	NotifyFocusIn()
	// NotifyFocusOut: notify context that input associated has lost focus.
	NotifyFocusOut()
	// NotifySurrounding: notify context that the context surrounding the cursor
	// has changed. If there's no selection selection_index is the same as
	// cursor_index.
	NotifySurrounding(text string, length uint, cursorIndex uint, selectionIndex uint)
	PreeditChanged()
	PreeditFinished()
	PreeditStarted()
	// Reset the context. This will typically cause the input to clear the
	// preedit state.
	Reset()
	// SetEnablePreedit: set whether context should enable preedit to display
	// feedback.
	SetEnablePreedit(enabled bool)
}

type InputMethodContext struct {
	*externglib.Object
}

var _ gextras.Nativer = (*InputMethodContext)(nil)

// InputMethodContexter describes InputMethodContext's abstract methods.
type InputMethodContexter interface {
	// FilterKeyEvent: allow key_event to be handled by the input method.
	FilterKeyEvent(keyEvent *gdk.EventKey) bool
	// InputHints: get the value of the KitInputMethodContext:input-hints
	// property.
	InputHints() InputHints
	// InputPurpose: get the value of the KitInputMethodContext:input-purpose
	// property.
	InputPurpose() InputPurpose
	// NotifyCursorArea: notify context that cursor area changed in input
	// associated.
	NotifyCursorArea(x int, y int, width int, height int)
	// NotifyFocusIn: notify context that input associated has gained focus.
	NotifyFocusIn()
	// NotifyFocusOut: notify context that input associated has lost focus.
	NotifyFocusOut()
	// NotifySurrounding: notify context that the context surrounding the cursor
	// has changed.
	NotifySurrounding(text string, length int, cursorIndex uint, selectionIndex uint)
	// Reset the context.
	Reset()
	// SetEnablePreedit: set whether context should enable preedit to display
	// feedback.
	SetEnablePreedit(enabled bool)
	SetInputHints(hints InputHints)
	// SetInputPurpose: set the value of the KitInputMethodContext:input-purpose
	// property.
	SetInputPurpose(purpose InputPurpose)
}

var _ InputMethodContexter = (*InputMethodContext)(nil)

func wrapInputMethodContext(obj *externglib.Object) *InputMethodContext {
	return &InputMethodContext{
		Object: obj,
	}
}

func marshalInputMethodContexter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapInputMethodContext(obj), nil
}

// FilterKeyEvent: allow key_event to be handled by the input method. If TRUE is
// returned, then no further processing should be done for the key event.
func (context *InputMethodContext) FilterKeyEvent(keyEvent *gdk.EventKey) bool {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 *C.GdkEventKey              // out
	var _cret C.gboolean                  // in

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(context.Native()))
	_arg1 = (*C.GdkEventKey)(gextras.StructNative(unsafe.Pointer(keyEvent)))

	_cret = C.webkit_input_method_context_filter_key_event(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// InputHints: get the value of the KitInputMethodContext:input-hints property.
func (context *InputMethodContext) InputHints() InputHints {
	var _arg0 *C.WebKitInputMethodContext // out
	var _cret C.WebKitInputHints          // in

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(context.Native()))

	_cret = C.webkit_input_method_context_get_input_hints(_arg0)

	var _inputHints InputHints // out

	_inputHints = InputHints(_cret)

	return _inputHints
}

// InputPurpose: get the value of the KitInputMethodContext:input-purpose
// property.
func (context *InputMethodContext) InputPurpose() InputPurpose {
	var _arg0 *C.WebKitInputMethodContext // out
	var _cret C.WebKitInputPurpose        // in

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(context.Native()))

	_cret = C.webkit_input_method_context_get_input_purpose(_arg0)

	var _inputPurpose InputPurpose // out

	_inputPurpose = InputPurpose(_cret)

	return _inputPurpose
}

// NotifyCursorArea: notify context that cursor area changed in input
// associated.
func (context *InputMethodContext) NotifyCursorArea(x int, y int, width int, height int) {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 C.int                       // out
	var _arg2 C.int                       // out
	var _arg3 C.int                       // out
	var _arg4 C.int                       // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(context.Native()))
	_arg1 = C.int(x)
	_arg2 = C.int(y)
	_arg3 = C.int(width)
	_arg4 = C.int(height)

	C.webkit_input_method_context_notify_cursor_area(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// NotifyFocusIn: notify context that input associated has gained focus.
func (context *InputMethodContext) NotifyFocusIn() {
	var _arg0 *C.WebKitInputMethodContext // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(context.Native()))

	C.webkit_input_method_context_notify_focus_in(_arg0)
}

// NotifyFocusOut: notify context that input associated has lost focus.
func (context *InputMethodContext) NotifyFocusOut() {
	var _arg0 *C.WebKitInputMethodContext // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(context.Native()))

	C.webkit_input_method_context_notify_focus_out(_arg0)
}

// NotifySurrounding: notify context that the context surrounding the cursor has
// changed. If there's no selection selection_index is the same as cursor_index.
func (context *InputMethodContext) NotifySurrounding(text string, length int, cursorIndex uint, selectionIndex uint) {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 *C.gchar                    // out
	var _arg2 C.int                       // out
	var _arg3 C.guint                     // out
	var _arg4 C.guint                     // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(context.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	_arg2 = C.int(length)
	_arg3 = C.guint(cursorIndex)
	_arg4 = C.guint(selectionIndex)

	C.webkit_input_method_context_notify_surrounding(_arg0, _arg1, _arg2, _arg3, _arg4)
}

// Reset the context. This will typically cause the input to clear the preedit
// state.
func (context *InputMethodContext) Reset() {
	var _arg0 *C.WebKitInputMethodContext // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(context.Native()))

	C.webkit_input_method_context_reset(_arg0)
}

// SetEnablePreedit: set whether context should enable preedit to display
// feedback.
func (context *InputMethodContext) SetEnablePreedit(enabled bool) {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 C.gboolean                  // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(context.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_input_method_context_set_enable_preedit(_arg0, _arg1)
}

func (context *InputMethodContext) SetInputHints(hints InputHints) {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 C.WebKitInputHints          // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(context.Native()))
	_arg1 = C.WebKitInputHints(hints)

	C.webkit_input_method_context_set_input_hints(_arg0, _arg1)
}

// SetInputPurpose: set the value of the KitInputMethodContext:input-purpose
// property.
func (context *InputMethodContext) SetInputPurpose(purpose InputPurpose) {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 C.WebKitInputPurpose        // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(context.Native()))
	_arg1 = C.WebKitInputPurpose(purpose)

	C.webkit_input_method_context_set_input_purpose(_arg0, _arg1)
}

type InputMethodUnderline struct {
	nocopy gextras.NoCopy
	native *C.WebKitInputMethodUnderline
}

func marshalInputMethodUnderline(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return &InputMethodUnderline{native: (*C.WebKitInputMethodUnderline)(unsafe.Pointer(b))}, nil
}

// NewInputMethodUnderline constructs a struct InputMethodUnderline.
func NewInputMethodUnderline(startOffset uint, endOffset uint) *InputMethodUnderline {
	var _arg1 C.guint                       // out
	var _arg2 C.guint                       // out
	var _cret *C.WebKitInputMethodUnderline // in

	_arg1 = C.guint(startOffset)
	_arg2 = C.guint(endOffset)

	_cret = C.webkit_input_method_underline_new(_arg1, _arg2)

	var _inputMethodUnderline *InputMethodUnderline // out

	_inputMethodUnderline = (*InputMethodUnderline)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_inputMethodUnderline, func(v *InputMethodUnderline) {
		C.webkit_input_method_underline_free((*C.WebKitInputMethodUnderline)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _inputMethodUnderline
}

// Copy: make a copy of the KitInputMethodUnderline.
func (underline *InputMethodUnderline) Copy() *InputMethodUnderline {
	var _arg0 *C.WebKitInputMethodUnderline // out
	var _cret *C.WebKitInputMethodUnderline // in

	_arg0 = (*C.WebKitInputMethodUnderline)(gextras.StructNative(unsafe.Pointer(underline)))

	_cret = C.webkit_input_method_underline_copy(_arg0)

	var _inputMethodUnderline *InputMethodUnderline // out

	_inputMethodUnderline = (*InputMethodUnderline)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_inputMethodUnderline, func(v *InputMethodUnderline) {
		C.webkit_input_method_underline_free((*C.WebKitInputMethodUnderline)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _inputMethodUnderline
}

// Free: free the KitInputMethodUnderline.
func (underline *InputMethodUnderline) free() {
	var _arg0 *C.WebKitInputMethodUnderline // out

	_arg0 = (*C.WebKitInputMethodUnderline)(gextras.StructNative(unsafe.Pointer(underline)))

	C.webkit_input_method_underline_free(_arg0)
}

// SetColor: set the color of the underline. If rgba is NULL the foreground text
// color will be used for the underline too.
func (underline *InputMethodUnderline) SetColor(rgba *gdk.RGBA) {
	var _arg0 *C.WebKitInputMethodUnderline // out
	var _arg1 *C.GdkRGBA                    // out

	_arg0 = (*C.WebKitInputMethodUnderline)(gextras.StructNative(unsafe.Pointer(underline)))
	_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(rgba)))

	C.webkit_input_method_underline_set_color(_arg0, _arg1)
}
