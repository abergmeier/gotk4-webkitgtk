// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"runtime"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
// extern gboolean _gotk4_webkit24_InputMethodContextClass_filter_key_event(WebKitInputMethodContext*, GdkEventKey*);
// extern void _gotk4_webkit24_InputMethodContextClass_committed(WebKitInputMethodContext*, char*);
// extern void _gotk4_webkit24_InputMethodContextClass_delete_surrounding(WebKitInputMethodContext*, int, guint);
// extern void _gotk4_webkit24_InputMethodContextClass_get_preedit(WebKitInputMethodContext*, gchar**, GList**, guint*);
// extern void _gotk4_webkit24_InputMethodContextClass_notify_cursor_area(WebKitInputMethodContext*, int, int, int, int);
// extern void _gotk4_webkit24_InputMethodContextClass_notify_focus_in(WebKitInputMethodContext*);
// extern void _gotk4_webkit24_InputMethodContextClass_notify_focus_out(WebKitInputMethodContext*);
// extern void _gotk4_webkit24_InputMethodContextClass_notify_surrounding(WebKitInputMethodContext*, gchar*, guint, guint, guint);
// extern void _gotk4_webkit24_InputMethodContextClass_preedit_changed(WebKitInputMethodContext*);
// extern void _gotk4_webkit24_InputMethodContextClass_preedit_finished(WebKitInputMethodContext*);
// extern void _gotk4_webkit24_InputMethodContextClass_preedit_started(WebKitInputMethodContext*);
// extern void _gotk4_webkit24_InputMethodContextClass_reset(WebKitInputMethodContext*);
// extern void _gotk4_webkit24_InputMethodContextClass_set_enable_preedit(WebKitInputMethodContext*, gboolean);
// extern void _gotk4_webkit24_InputMethodContext_ConnectCommitted(gpointer, gchar*, guintptr);
// extern void _gotk4_webkit24_InputMethodContext_ConnectDeleteSurrounding(gpointer, gint, guint, guintptr);
// extern void _gotk4_webkit24_InputMethodContext_ConnectPreeditChanged(gpointer, guintptr);
// extern void _gotk4_webkit24_InputMethodContext_ConnectPreeditFinished(gpointer, guintptr);
// extern void _gotk4_webkit24_InputMethodContext_ConnectPreeditStarted(gpointer, guintptr);
import "C"

// glib.Type values for WebKitInputMethodContext.go.
var (
	GTypeInputPurpose         = externglib.Type(C.webkit_input_purpose_get_type())
	GTypeInputHints           = externglib.Type(C.webkit_input_hints_get_type())
	GTypeInputMethodContext   = externglib.Type(C.webkit_input_method_context_get_type())
	GTypeInputMethodUnderline = externglib.Type(C.webkit_input_method_underline_get_type())
)

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeInputPurpose, F: marshalInputPurpose},
		{T: GTypeInputHints, F: marshalInputHints},
		{T: GTypeInputMethodContext, F: marshalInputMethodContext},
		{T: GTypeInputMethodUnderline, F: marshalInputMethodUnderline},
	})
}

// InputPurpose: enum values used to describe the primary purpose of the active
// editable element.
type InputPurpose C.gint

const (
	// InputPurposeFreeForm: editable element expects any characters.
	InputPurposeFreeForm InputPurpose = iota
	// InputPurposeDigits: editable element expects digits.
	InputPurposeDigits
	// InputPurposeNumber: editable element expects a number.
	InputPurposeNumber
	// InputPurposePhone: editable element expects a telephone.
	InputPurposePhone
	// InputPurposeURL: editable element expects a URL.
	InputPurposeURL
	// InputPurposeEmail: editable element expects an email.
	InputPurposeEmail
	// InputPurposePassword: editable element expects a password.
	InputPurposePassword
)

func marshalInputPurpose(p uintptr) (interface{}, error) {
	return InputPurpose(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for InputPurpose.
func (i InputPurpose) String() string {
	switch i {
	case InputPurposeFreeForm:
		return "FreeForm"
	case InputPurposeDigits:
		return "Digits"
	case InputPurposeNumber:
		return "Number"
	case InputPurposePhone:
		return "Phone"
	case InputPurposeURL:
		return "URL"
	case InputPurposeEmail:
		return "Email"
	case InputPurposePassword:
		return "Password"
	default:
		return fmt.Sprintf("InputPurpose(%d)", i)
	}
}

// InputHints: enum values used to describe hints that might be taken into
// account by input methods.
type InputHints C.guint

const (
	// InputHintNone: no special behavior suggested.
	InputHintNone InputHints = 0b0
	// InputHintSpellcheck: suggest spell checking.
	InputHintSpellcheck InputHints = 0b1
	// InputHintLowercase: suggest to not autocapitlize.
	InputHintLowercase InputHints = 0b10
	// InputHintUppercaseChars: suggest to capitalize all text.
	InputHintUppercaseChars InputHints = 0b100
	// InputHintUppercaseWords: suggest to capitalize the first character of
	// each word.
	InputHintUppercaseWords InputHints = 0b1000
	// InputHintUppercaseSentences: suggest to capitalize the first word of each
	// sentence.
	InputHintUppercaseSentences InputHints = 0b10000
	// InputHintInhibitOSK: suggest to not show an onscreen keyboard.
	InputHintInhibitOSK InputHints = 0b100000
)

func marshalInputHints(p uintptr) (interface{}, error) {
	return InputHints(externglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for InputHints.
func (i InputHints) String() string {
	if i == 0 {
		return "InputHints(0)"
	}

	var builder strings.Builder
	builder.Grow(148)

	for i != 0 {
		next := i & (i - 1)
		bit := i - next

		switch bit {
		case InputHintNone:
			builder.WriteString("None|")
		case InputHintSpellcheck:
			builder.WriteString("Spellcheck|")
		case InputHintLowercase:
			builder.WriteString("Lowercase|")
		case InputHintUppercaseChars:
			builder.WriteString("UppercaseChars|")
		case InputHintUppercaseWords:
			builder.WriteString("UppercaseWords|")
		case InputHintUppercaseSentences:
			builder.WriteString("UppercaseSentences|")
		case InputHintInhibitOSK:
			builder.WriteString("InhibitOSK|")
		default:
			builder.WriteString(fmt.Sprintf("InputHints(0b%b)|", bit))
		}

		i = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if i contains other.
func (i InputHints) Has(other InputHints) bool {
	return (i & other) == other
}

// InputMethodContextOverrider contains methods that are overridable.
type InputMethodContextOverrider interface {
	// The function takes the following parameters:
	//
	Committed(text string)
	// The function takes the following parameters:
	//
	//    - offset
	//    - nChars
	//
	DeleteSurrounding(offset int, nChars uint)
	// FilterKeyEvent: allow key_event to be handled by the input method. If
	// TRUE is returned, then no further processing should be done for the key
	// event.
	//
	// The function takes the following parameters:
	//
	//    - keyEvent: key event to filter.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if the key event was handled, or FALSE otherwise.
	//
	FilterKeyEvent(keyEvent *gdk.EventKey) bool
	// Preedit: get the current preedit string for the context, and a list of
	// WebKitInputMethodUnderline to apply to the string. The string will be
	// displayed inserted at cursor_offset.
	//
	// The function returns the following values:
	//
	//    - text (optional): location to store the preedit string.
	//    - underlines (optional): location to store the underlines as a #GList
	//      of KitInputMethodUnderline.
	//    - cursorOffset (optional): location to store the position of cursor in
	//      preedit string.
	//
	Preedit() (string, []*InputMethodUnderline, uint)
	// NotifyCursorArea: notify context that cursor area changed in input
	// associated.
	//
	// The function takes the following parameters:
	//
	//    - x coordinate of cursor location.
	//    - y coordinate of cursor location.
	//    - width of cursor area.
	//    - height of cursor area.
	//
	NotifyCursorArea(x, y, width, height int)
	// NotifyFocusIn: notify context that input associated has gained focus.
	NotifyFocusIn()
	// NotifyFocusOut: notify context that input associated has lost focus.
	NotifyFocusOut()
	// NotifySurrounding: notify context that the context surrounding the cursor
	// has changed. If there's no selection selection_index is the same as
	// cursor_index.
	//
	// The function takes the following parameters:
	//
	//    - text surrounding the insertion point.
	//    - length of text, or -1 if text is nul-terminated.
	//    - cursorIndex: byte index of the insertion cursor within text.
	//    - selectionIndex: byte index of the selection cursor within text.
	//
	NotifySurrounding(text string, length, cursorIndex, selectionIndex uint)
	PreeditChanged()
	PreeditFinished()
	PreeditStarted()
	// Reset the context. This will typically cause the input to clear the
	// preedit state.
	Reset()
	// SetEnablePreedit: set whether context should enable preedit to display
	// feedback.
	//
	// The function takes the following parameters:
	//
	//    - enabled: whether to enable preedit.
	//
	SetEnablePreedit(enabled bool)
}

type InputMethodContext struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*InputMethodContext)(nil)
)

// InputMethodContexter describes types inherited from class InputMethodContext.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type InputMethodContexter interface {
	externglib.Objector
	baseInputMethodContext() *InputMethodContext
}

var _ InputMethodContexter = (*InputMethodContext)(nil)

func classInitInputMethodContexter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.WebKitInputMethodContextClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.WebKitInputMethodContextClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface{ Committed(text string) }); ok {
		pclass.committed = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_committed)
	}

	if _, ok := goval.(interface{ DeleteSurrounding(offset int, nChars uint) }); ok {
		pclass.delete_surrounding = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_delete_surrounding)
	}

	if _, ok := goval.(interface {
		FilterKeyEvent(keyEvent *gdk.EventKey) bool
	}); ok {
		pclass.filter_key_event = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_filter_key_event)
	}

	if _, ok := goval.(interface {
		Preedit() (string, []*InputMethodUnderline, uint)
	}); ok {
		pclass.get_preedit = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_get_preedit)
	}

	if _, ok := goval.(interface{ NotifyCursorArea(x, y, width, height int) }); ok {
		pclass.notify_cursor_area = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_notify_cursor_area)
	}

	if _, ok := goval.(interface{ NotifyFocusIn() }); ok {
		pclass.notify_focus_in = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_notify_focus_in)
	}

	if _, ok := goval.(interface{ NotifyFocusOut() }); ok {
		pclass.notify_focus_out = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_notify_focus_out)
	}

	if _, ok := goval.(interface {
		NotifySurrounding(text string, length, cursorIndex, selectionIndex uint)
	}); ok {
		pclass.notify_surrounding = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_notify_surrounding)
	}

	if _, ok := goval.(interface{ PreeditChanged() }); ok {
		pclass.preedit_changed = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_preedit_changed)
	}

	if _, ok := goval.(interface{ PreeditFinished() }); ok {
		pclass.preedit_finished = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_preedit_finished)
	}

	if _, ok := goval.(interface{ PreeditStarted() }); ok {
		pclass.preedit_started = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_preedit_started)
	}

	if _, ok := goval.(interface{ Reset() }); ok {
		pclass.reset = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_reset)
	}

	if _, ok := goval.(interface{ SetEnablePreedit(enabled bool) }); ok {
		pclass.set_enable_preedit = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_set_enable_preedit)
	}
}

//export _gotk4_webkit24_InputMethodContextClass_committed
func _gotk4_webkit24_InputMethodContextClass_committed(arg0 *C.WebKitInputMethodContext, arg1 *C.char) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Committed(text string) })

	var _text string // out

	_text = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	iface.Committed(_text)
}

//export _gotk4_webkit24_InputMethodContextClass_delete_surrounding
func _gotk4_webkit24_InputMethodContextClass_delete_surrounding(arg0 *C.WebKitInputMethodContext, arg1 C.int, arg2 C.guint) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ DeleteSurrounding(offset int, nChars uint) })

	var _offset int  // out
	var _nChars uint // out

	_offset = int(arg1)
	_nChars = uint(arg2)

	iface.DeleteSurrounding(_offset, _nChars)
}

//export _gotk4_webkit24_InputMethodContextClass_filter_key_event
func _gotk4_webkit24_InputMethodContextClass_filter_key_event(arg0 *C.WebKitInputMethodContext, arg1 *C.GdkEventKey) (cret C.gboolean) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		FilterKeyEvent(keyEvent *gdk.EventKey) bool
	})

	var _keyEvent *gdk.EventKey // out

	_keyEvent = (*gdk.EventKey)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.FilterKeyEvent(_keyEvent)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit24_InputMethodContextClass_get_preedit
func _gotk4_webkit24_InputMethodContextClass_get_preedit(arg0 *C.WebKitInputMethodContext, arg1 **C.gchar, arg2 **C.GList, arg3 *C.guint) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		Preedit() (string, []*InputMethodUnderline, uint)
	})

	text, underlines, cursorOffset := iface.Preedit()

	if text != "" {
		*arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	}
	if underlines != nil {
		for i := len(underlines) - 1; i >= 0; i-- {
			src := underlines[i]
			var dst *C.WebKitInputMethodUnderline // out
			dst = (*C.WebKitInputMethodUnderline)(gextras.StructNative(unsafe.Pointer(src)))
			*arg2 = C.g_list_prepend(*arg2, C.gpointer(unsafe.Pointer(dst)))
		}
	}
	*arg3 = C.guint(cursorOffset)
}

//export _gotk4_webkit24_InputMethodContextClass_notify_cursor_area
func _gotk4_webkit24_InputMethodContextClass_notify_cursor_area(arg0 *C.WebKitInputMethodContext, arg1 C.int, arg2 C.int, arg3 C.int, arg4 C.int) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ NotifyCursorArea(x, y, width, height int) })

	var _x int      // out
	var _y int      // out
	var _width int  // out
	var _height int // out

	_x = int(arg1)
	_y = int(arg2)
	_width = int(arg3)
	_height = int(arg4)

	iface.NotifyCursorArea(_x, _y, _width, _height)
}

//export _gotk4_webkit24_InputMethodContextClass_notify_focus_in
func _gotk4_webkit24_InputMethodContextClass_notify_focus_in(arg0 *C.WebKitInputMethodContext) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ NotifyFocusIn() })

	iface.NotifyFocusIn()
}

//export _gotk4_webkit24_InputMethodContextClass_notify_focus_out
func _gotk4_webkit24_InputMethodContextClass_notify_focus_out(arg0 *C.WebKitInputMethodContext) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ NotifyFocusOut() })

	iface.NotifyFocusOut()
}

//export _gotk4_webkit24_InputMethodContextClass_notify_surrounding
func _gotk4_webkit24_InputMethodContextClass_notify_surrounding(arg0 *C.WebKitInputMethodContext, arg1 *C.gchar, arg2 C.guint, arg3 C.guint, arg4 C.guint) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		NotifySurrounding(text string, length, cursorIndex, selectionIndex uint)
	})

	var _text string         // out
	var _length uint         // out
	var _cursorIndex uint    // out
	var _selectionIndex uint // out

	_text = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	_length = uint(arg2)
	_cursorIndex = uint(arg3)
	_selectionIndex = uint(arg4)

	iface.NotifySurrounding(_text, _length, _cursorIndex, _selectionIndex)
}

//export _gotk4_webkit24_InputMethodContextClass_preedit_changed
func _gotk4_webkit24_InputMethodContextClass_preedit_changed(arg0 *C.WebKitInputMethodContext) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ PreeditChanged() })

	iface.PreeditChanged()
}

//export _gotk4_webkit24_InputMethodContextClass_preedit_finished
func _gotk4_webkit24_InputMethodContextClass_preedit_finished(arg0 *C.WebKitInputMethodContext) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ PreeditFinished() })

	iface.PreeditFinished()
}

//export _gotk4_webkit24_InputMethodContextClass_preedit_started
func _gotk4_webkit24_InputMethodContextClass_preedit_started(arg0 *C.WebKitInputMethodContext) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ PreeditStarted() })

	iface.PreeditStarted()
}

//export _gotk4_webkit24_InputMethodContextClass_reset
func _gotk4_webkit24_InputMethodContextClass_reset(arg0 *C.WebKitInputMethodContext) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Reset() })

	iface.Reset()
}

//export _gotk4_webkit24_InputMethodContextClass_set_enable_preedit
func _gotk4_webkit24_InputMethodContextClass_set_enable_preedit(arg0 *C.WebKitInputMethodContext, arg1 C.gboolean) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ SetEnablePreedit(enabled bool) })

	var _enabled bool // out

	if arg1 != 0 {
		_enabled = true
	}

	iface.SetEnablePreedit(_enabled)
}

func wrapInputMethodContext(obj *externglib.Object) *InputMethodContext {
	return &InputMethodContext{
		Object: obj,
	}
}

func marshalInputMethodContext(p uintptr) (interface{}, error) {
	return wrapInputMethodContext(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (context *InputMethodContext) baseInputMethodContext() *InputMethodContext {
	return context
}

// BaseInputMethodContext returns the underlying base object.
func BaseInputMethodContext(obj InputMethodContexter) *InputMethodContext {
	return obj.baseInputMethodContext()
}

//export _gotk4_webkit24_InputMethodContext_ConnectCommitted
func _gotk4_webkit24_InputMethodContext_ConnectCommitted(arg0 C.gpointer, arg1 *C.gchar, arg2 C.guintptr) {
	var f func(text string)
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(text string))
	}

	var _text string // out

	_text = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	f(_text)
}

// ConnectCommitted is emitted when a complete input sequence has been entered
// by the user. This can be a single character immediately after a key press or
// the final result of preediting.
func (context *InputMethodContext) ConnectCommitted(f func(text string)) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(context, "committed", false, unsafe.Pointer(C._gotk4_webkit24_InputMethodContext_ConnectCommitted), f)
}

//export _gotk4_webkit24_InputMethodContext_ConnectDeleteSurrounding
func _gotk4_webkit24_InputMethodContext_ConnectDeleteSurrounding(arg0 C.gpointer, arg1 C.gint, arg2 C.guint, arg3 C.guintptr) {
	var f func(offset int, nChars uint)
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(offset int, nChars uint))
	}

	var _offset int  // out
	var _nChars uint // out

	_offset = int(arg1)
	_nChars = uint(arg2)

	f(_offset, _nChars)
}

// ConnectDeleteSurrounding is emitted when the input method wants to delete the
// context surrounding the cursor. If offset is a negative value, it means a
// position before the cursor.
func (context *InputMethodContext) ConnectDeleteSurrounding(f func(offset int, nChars uint)) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(context, "delete-surrounding", false, unsafe.Pointer(C._gotk4_webkit24_InputMethodContext_ConnectDeleteSurrounding), f)
}

//export _gotk4_webkit24_InputMethodContext_ConnectPreeditChanged
func _gotk4_webkit24_InputMethodContext_ConnectPreeditChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectPreeditChanged is emitted whenever the preedit sequence currently
// being entered has changed. It is also emitted at the end of a preedit
// sequence, in which case webkit_input_method_context_get_preedit() returns the
// empty string.
func (context *InputMethodContext) ConnectPreeditChanged(f func()) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(context, "preedit-changed", false, unsafe.Pointer(C._gotk4_webkit24_InputMethodContext_ConnectPreeditChanged), f)
}

//export _gotk4_webkit24_InputMethodContext_ConnectPreeditFinished
func _gotk4_webkit24_InputMethodContext_ConnectPreeditFinished(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectPreeditFinished is emitted when a preediting sequence has been
// completed or canceled.
func (context *InputMethodContext) ConnectPreeditFinished(f func()) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(context, "preedit-finished", false, unsafe.Pointer(C._gotk4_webkit24_InputMethodContext_ConnectPreeditFinished), f)
}

//export _gotk4_webkit24_InputMethodContext_ConnectPreeditStarted
func _gotk4_webkit24_InputMethodContext_ConnectPreeditStarted(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectPreeditStarted is emitted when a new preediting sequence starts.
func (context *InputMethodContext) ConnectPreeditStarted(f func()) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(context, "preedit-started", false, unsafe.Pointer(C._gotk4_webkit24_InputMethodContext_ConnectPreeditStarted), f)
}

// FilterKeyEvent: allow key_event to be handled by the input method. If TRUE is
// returned, then no further processing should be done for the key event.
//
// The function takes the following parameters:
//
//    - keyEvent: key event to filter.
//
// The function returns the following values:
//
//    - ok: TRUE if the key event was handled, or FALSE otherwise.
//
func (context *InputMethodContext) FilterKeyEvent(keyEvent *gdk.EventKey) bool {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 *C.GdkEventKey              // out
	var _cret C.gboolean                  // in

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(externglib.InternObject(context).Native()))
	_arg1 = (*C.GdkEventKey)(gextras.StructNative(unsafe.Pointer(keyEvent)))

	_cret = C.webkit_input_method_context_filter_key_event(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(keyEvent)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// InputHints: get the value of the KitInputMethodContext:input-hints property.
//
// The function returns the following values:
//
//    - inputHints of the input associated with context.
//
func (context *InputMethodContext) InputHints() InputHints {
	var _arg0 *C.WebKitInputMethodContext // out
	var _cret C.WebKitInputHints          // in

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(externglib.InternObject(context).Native()))

	_cret = C.webkit_input_method_context_get_input_hints(_arg0)
	runtime.KeepAlive(context)

	var _inputHints InputHints // out

	_inputHints = InputHints(_cret)

	return _inputHints
}

// InputPurpose: get the value of the KitInputMethodContext:input-purpose
// property.
//
// The function returns the following values:
//
//    - inputPurpose of the input associated with context.
//
func (context *InputMethodContext) InputPurpose() InputPurpose {
	var _arg0 *C.WebKitInputMethodContext // out
	var _cret C.WebKitInputPurpose        // in

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(externglib.InternObject(context).Native()))

	_cret = C.webkit_input_method_context_get_input_purpose(_arg0)
	runtime.KeepAlive(context)

	var _inputPurpose InputPurpose // out

	_inputPurpose = InputPurpose(_cret)

	return _inputPurpose
}

// Preedit: get the current preedit string for the context, and a list of
// WebKitInputMethodUnderline to apply to the string. The string will be
// displayed inserted at cursor_offset.
//
// The function returns the following values:
//
//    - text (optional): location to store the preedit string.
//    - underlines (optional): location to store the underlines as a #GList of
//      KitInputMethodUnderline.
//    - cursorOffset (optional): location to store the position of cursor in
//      preedit string.
//
func (context *InputMethodContext) Preedit() (string, []*InputMethodUnderline, uint) {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 *C.char                     // in
	var _arg2 *C.GList                    // in
	var _arg3 C.guint                     // in

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(externglib.InternObject(context).Native()))

	C.webkit_input_method_context_get_preedit(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(context)

	var _text string                        // out
	var _underlines []*InputMethodUnderline // out
	var _cursorOffset uint                  // out

	if _arg1 != nil {
		_text = C.GoString((*C.gchar)(unsafe.Pointer(_arg1)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if _arg2 != nil {
		_underlines = make([]*InputMethodUnderline, 0, gextras.ListSize(unsafe.Pointer(_arg2)))
		gextras.MoveList(unsafe.Pointer(_arg2), true, func(v unsafe.Pointer) {
			src := (*C.WebKitInputMethodUnderline)(v)
			var dst *InputMethodUnderline // out
			dst = (*InputMethodUnderline)(gextras.NewStructNative(unsafe.Pointer(src)))
			_underlines = append(_underlines, dst)
		})
	}
	_cursorOffset = uint(_arg3)

	return _text, _underlines, _cursorOffset
}

// NotifyCursorArea: notify context that cursor area changed in input
// associated.
//
// The function takes the following parameters:
//
//    - x coordinate of cursor location.
//    - y coordinate of cursor location.
//    - width of cursor area.
//    - height of cursor area.
//
func (context *InputMethodContext) NotifyCursorArea(x, y, width, height int) {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 C.int                       // out
	var _arg2 C.int                       // out
	var _arg3 C.int                       // out
	var _arg4 C.int                       // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(externglib.InternObject(context).Native()))
	_arg1 = C.int(x)
	_arg2 = C.int(y)
	_arg3 = C.int(width)
	_arg4 = C.int(height)

	C.webkit_input_method_context_notify_cursor_area(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(context)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// NotifyFocusIn: notify context that input associated has gained focus.
func (context *InputMethodContext) NotifyFocusIn() {
	var _arg0 *C.WebKitInputMethodContext // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(externglib.InternObject(context).Native()))

	C.webkit_input_method_context_notify_focus_in(_arg0)
	runtime.KeepAlive(context)
}

// NotifyFocusOut: notify context that input associated has lost focus.
func (context *InputMethodContext) NotifyFocusOut() {
	var _arg0 *C.WebKitInputMethodContext // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(externglib.InternObject(context).Native()))

	C.webkit_input_method_context_notify_focus_out(_arg0)
	runtime.KeepAlive(context)
}

// NotifySurrounding: notify context that the context surrounding the cursor has
// changed. If there's no selection selection_index is the same as cursor_index.
//
// The function takes the following parameters:
//
//    - text surrounding the insertion point.
//    - length of text, or -1 if text is nul-terminated.
//    - cursorIndex: byte index of the insertion cursor within text.
//    - selectionIndex: byte index of the selection cursor within text.
//
func (context *InputMethodContext) NotifySurrounding(text string, length int, cursorIndex, selectionIndex uint) {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 *C.gchar                    // out
	var _arg2 C.int                       // out
	var _arg3 C.guint                     // out
	var _arg4 C.guint                     // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(externglib.InternObject(context).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(length)
	_arg3 = C.guint(cursorIndex)
	_arg4 = C.guint(selectionIndex)

	C.webkit_input_method_context_notify_surrounding(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(context)
	runtime.KeepAlive(text)
	runtime.KeepAlive(length)
	runtime.KeepAlive(cursorIndex)
	runtime.KeepAlive(selectionIndex)
}

// Reset the context. This will typically cause the input to clear the preedit
// state.
func (context *InputMethodContext) Reset() {
	var _arg0 *C.WebKitInputMethodContext // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(externglib.InternObject(context).Native()))

	C.webkit_input_method_context_reset(_arg0)
	runtime.KeepAlive(context)
}

// SetEnablePreedit: set whether context should enable preedit to display
// feedback.
//
// The function takes the following parameters:
//
//    - enabled: whether to enable preedit.
//
func (context *InputMethodContext) SetEnablePreedit(enabled bool) {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 C.gboolean                  // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(externglib.InternObject(context).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_input_method_context_set_enable_preedit(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(enabled)
}

// The function takes the following parameters:
//
func (context *InputMethodContext) SetInputHints(hints InputHints) {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 C.WebKitInputHints          // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(externglib.InternObject(context).Native()))
	_arg1 = C.WebKitInputHints(hints)

	C.webkit_input_method_context_set_input_hints(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(hints)
}

// SetInputPurpose: set the value of the KitInputMethodContext:input-purpose
// property.
//
// The function takes the following parameters:
//
//    - purpose: KitInputPurpose.
//
func (context *InputMethodContext) SetInputPurpose(purpose InputPurpose) {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 C.WebKitInputPurpose        // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(externglib.InternObject(context).Native()))
	_arg1 = C.WebKitInputPurpose(purpose)

	C.webkit_input_method_context_set_input_purpose(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(purpose)
}

// InputMethodUnderline: instance of this type is always passed by reference.
type InputMethodUnderline struct {
	*inputMethodUnderline
}

// inputMethodUnderline is the struct that's finalized.
type inputMethodUnderline struct {
	native *C.WebKitInputMethodUnderline
}

func marshalInputMethodUnderline(p uintptr) (interface{}, error) {
	b := externglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &InputMethodUnderline{&inputMethodUnderline{(*C.WebKitInputMethodUnderline)(b)}}, nil
}

// NewInputMethodUnderline constructs a struct InputMethodUnderline.
func NewInputMethodUnderline(startOffset uint, endOffset uint) *InputMethodUnderline {
	var _arg1 C.guint                       // out
	var _arg2 C.guint                       // out
	var _cret *C.WebKitInputMethodUnderline // in

	_arg1 = C.guint(startOffset)
	_arg2 = C.guint(endOffset)

	_cret = C.webkit_input_method_underline_new(_arg1, _arg2)
	runtime.KeepAlive(startOffset)
	runtime.KeepAlive(endOffset)

	var _inputMethodUnderline *InputMethodUnderline // out

	_inputMethodUnderline = (*InputMethodUnderline)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_inputMethodUnderline)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.webkit_input_method_underline_free((*C.WebKitInputMethodUnderline)(intern.C))
		},
	)

	return _inputMethodUnderline
}

// Copy: make a copy of the KitInputMethodUnderline.
//
// The function returns the following values:
//
//    - inputMethodUnderline: copy of passed in KitInputMethodUnderline.
//
func (underline *InputMethodUnderline) Copy() *InputMethodUnderline {
	var _arg0 *C.WebKitInputMethodUnderline // out
	var _cret *C.WebKitInputMethodUnderline // in

	_arg0 = (*C.WebKitInputMethodUnderline)(gextras.StructNative(unsafe.Pointer(underline)))

	_cret = C.webkit_input_method_underline_copy(_arg0)
	runtime.KeepAlive(underline)

	var _inputMethodUnderline *InputMethodUnderline // out

	_inputMethodUnderline = (*InputMethodUnderline)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_inputMethodUnderline)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.webkit_input_method_underline_free((*C.WebKitInputMethodUnderline)(intern.C))
		},
	)

	return _inputMethodUnderline
}

// SetColor: set the color of the underline. If rgba is NULL the foreground text
// color will be used for the underline too.
//
// The function takes the following parameters:
//
//    - rgba (optional) or NULL.
//
func (underline *InputMethodUnderline) SetColor(rgba *gdk.RGBA) {
	var _arg0 *C.WebKitInputMethodUnderline // out
	var _arg1 *C.GdkRGBA                    // out

	_arg0 = (*C.WebKitInputMethodUnderline)(gextras.StructNative(unsafe.Pointer(underline)))
	if rgba != nil {
		_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(rgba)))
	}

	C.webkit_input_method_underline_set_color(_arg0, _arg1)
	runtime.KeepAlive(underline)
	runtime.KeepAlive(rgba)
}
