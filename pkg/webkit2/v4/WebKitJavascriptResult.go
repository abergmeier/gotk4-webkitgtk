// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4-webkitgtk/pkg/javascriptcore/v4"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_javascript_result_get_type()), F: marshalJavascriptResult},
	})
}

type JavascriptResult struct {
	nocopy gextras.NoCopy
	native *C.WebKitJavascriptResult
}

func marshalJavascriptResult(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return &JavascriptResult{native: (*C.WebKitJavascriptResult)(unsafe.Pointer(b))}, nil
}

// JsValue: get the CValue of js_result.
func (jsResult *JavascriptResult) JsValue() *javascriptcore.Value {
	var _arg0 *C.WebKitJavascriptResult // out
	var _cret *C.JSCValue               // in

	_arg0 = (*C.WebKitJavascriptResult)(gextras.StructNative(unsafe.Pointer(jsResult)))

	_cret = C.webkit_javascript_result_get_js_value(_arg0)

	var _value *javascriptcore.Value // out

	{
		obj := externglib.Take(unsafe.Pointer(_cret))
		_value = &javascriptcore.Value{
			Object: obj,
		}
	}

	return _value
}

// Ref: atomically increments the reference count of js_result by one. This
// function is MT-safe and may be called from any thread.
func (jsResult *JavascriptResult) ref() *JavascriptResult {
	var _arg0 *C.WebKitJavascriptResult // out
	var _cret *C.WebKitJavascriptResult // in

	_arg0 = (*C.WebKitJavascriptResult)(gextras.StructNative(unsafe.Pointer(jsResult)))

	_cret = C.webkit_javascript_result_ref(_arg0)

	var _javascriptResult *JavascriptResult // out

	_javascriptResult = (*JavascriptResult)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.webkit_javascript_result_ref(_cret)
	runtime.SetFinalizer(_javascriptResult, func(v *JavascriptResult) {
		C.webkit_javascript_result_unref((*C.WebKitJavascriptResult)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _javascriptResult
}

// Unref: atomically decrements the reference count of js_result by one. If the
// reference count drops to 0, all memory allocated by the KitJavascriptResult
// is released. This function is MT-safe and may be called from any thread.
func (jsResult *JavascriptResult) unref() {
	var _arg0 *C.WebKitJavascriptResult // out

	_arg0 = (*C.WebKitJavascriptResult)(gextras.StructNative(unsafe.Pointer(jsResult)))

	C.webkit_javascript_result_unref(_arg0)
}
