// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_mime_info_get_type()), F: marshalMIMEInfo},
	})
}

// MIMEInfo: instance of this type is always passed by reference.
type MIMEInfo struct {
	*mimeInfo
}

// mimeInfo is the struct that's finalized.
type mimeInfo struct {
	native *C.WebKitMimeInfo
}

func marshalMIMEInfo(p uintptr) (interface{}, error) {
	b := externglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &MIMEInfo{&mimeInfo{(*C.WebKitMimeInfo)(b)}}, nil
}

// Description: deprecated: since version 2.32.
func (info *MIMEInfo) Description() string {
	var _arg0 *C.WebKitMimeInfo // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitMimeInfo)(gextras.StructNative(unsafe.Pointer(info)))

	_cret = C.webkit_mime_info_get_description(_arg0)
	runtime.KeepAlive(info)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Extensions: get the list of file extensions associated to the MIME type of
// info
//
// Deprecated: since version 2.32.
func (info *MIMEInfo) Extensions() []string {
	var _arg0 *C.WebKitMimeInfo // out
	var _cret **C.gchar         // in

	_arg0 = (*C.WebKitMimeInfo)(gextras.StructNative(unsafe.Pointer(info)))

	_cret = C.webkit_mime_info_get_extensions(_arg0)
	runtime.KeepAlive(info)

	var _utf8s []string // out

	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}

	return _utf8s
}

// MIMEType: deprecated: since version 2.32.
func (info *MIMEInfo) MIMEType() string {
	var _arg0 *C.WebKitMimeInfo // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitMimeInfo)(gextras.StructNative(unsafe.Pointer(info)))

	_cret = C.webkit_mime_info_get_mime_type(_arg0)
	runtime.KeepAlive(info)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}
