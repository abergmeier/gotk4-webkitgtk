// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_navigation_type_get_type()), F: marshalNavigationType},
		{T: externglib.Type(C.webkit_navigation_action_get_type()), F: marshalNavigationAction},
	})
}

// NavigationType: enum values used to denote the various navigation types.
type NavigationType int

const (
	// NavigationTypeLinkClicked: navigation was triggered by clicking a link.
	NavigationTypeLinkClicked NavigationType = iota
	// NavigationTypeFormSubmitted: navigation was triggered by submitting a
	// form.
	NavigationTypeFormSubmitted
	// NavigationTypeBackForward: navigation was triggered by navigating forward
	// or backward.
	NavigationTypeBackForward
	// NavigationTypeReload: navigation was triggered by reloading.
	NavigationTypeReload
	// NavigationTypeFormResubmitted: navigation was triggered by resubmitting a
	// form.
	NavigationTypeFormResubmitted
	// NavigationTypeOther: navigation was triggered by some other action.
	NavigationTypeOther
)

func marshalNavigationType(p uintptr) (interface{}, error) {
	return NavigationType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// String returns the name in string for NavigationType.
func (n NavigationType) String() string {
	switch n {
	case NavigationTypeLinkClicked:
		return "LinkClicked"
	case NavigationTypeFormSubmitted:
		return "FormSubmitted"
	case NavigationTypeBackForward:
		return "BackForward"
	case NavigationTypeReload:
		return "Reload"
	case NavigationTypeFormResubmitted:
		return "FormResubmitted"
	case NavigationTypeOther:
		return "Other"
	default:
		return fmt.Sprintf("NavigationType(%d)", n)
	}
}

type NavigationAction struct {
	nocopy gextras.NoCopy
	native *C.WebKitNavigationAction
}

func marshalNavigationAction(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return &NavigationAction{native: (*C.WebKitNavigationAction)(unsafe.Pointer(b))}, nil
}

// Copy: make a copy of navigation.
func (navigation *NavigationAction) Copy() *NavigationAction {
	var _arg0 *C.WebKitNavigationAction // out
	var _cret *C.WebKitNavigationAction // in

	_arg0 = (*C.WebKitNavigationAction)(gextras.StructNative(unsafe.Pointer(navigation)))

	_cret = C.webkit_navigation_action_copy(_arg0)

	var _navigationAction *NavigationAction // out

	_navigationAction = (*NavigationAction)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_navigationAction, func(v *NavigationAction) {
		C.webkit_navigation_action_free((*C.WebKitNavigationAction)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _navigationAction
}

// Free: free the KitNavigationAction
func (navigation *NavigationAction) free() {
	var _arg0 *C.WebKitNavigationAction // out

	_arg0 = (*C.WebKitNavigationAction)(gextras.StructNative(unsafe.Pointer(navigation)))

	C.webkit_navigation_action_free(_arg0)
}

// Modifiers: return a bitmask of ModifierType values describing the modifier
// keys that were in effect when the navigation was requested
func (navigation *NavigationAction) Modifiers() uint {
	var _arg0 *C.WebKitNavigationAction // out
	var _cret C.guint                   // in

	_arg0 = (*C.WebKitNavigationAction)(gextras.StructNative(unsafe.Pointer(navigation)))

	_cret = C.webkit_navigation_action_get_modifiers(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// MouseButton: return the number of the mouse button that triggered the
// navigation, or 0 if the navigation was not started by a mouse event.
func (navigation *NavigationAction) MouseButton() uint {
	var _arg0 *C.WebKitNavigationAction // out
	var _cret C.guint                   // in

	_arg0 = (*C.WebKitNavigationAction)(gextras.StructNative(unsafe.Pointer(navigation)))

	_cret = C.webkit_navigation_action_get_mouse_button(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// NavigationType: return the type of action that triggered the navigation.
func (navigation *NavigationAction) NavigationType() NavigationType {
	var _arg0 *C.WebKitNavigationAction // out
	var _cret C.WebKitNavigationType    // in

	_arg0 = (*C.WebKitNavigationAction)(gextras.StructNative(unsafe.Pointer(navigation)))

	_cret = C.webkit_navigation_action_get_navigation_type(_arg0)

	var _navigationType NavigationType // out

	_navigationType = NavigationType(_cret)

	return _navigationType
}

// Request: return the KitURIRequest associated with the navigation action.
// Modifications to the returned object are <emphasis>not</emphasis> taken into
// account when the request is sent over the network, and is intended only to
// aid in evaluating whether a navigation action should be taken or not. To
// modify requests before they are sent over the network the
// KitPage::send-request signal can be used instead.
func (navigation *NavigationAction) Request() *URIRequest {
	var _arg0 *C.WebKitNavigationAction // out
	var _cret *C.WebKitURIRequest       // in

	_arg0 = (*C.WebKitNavigationAction)(gextras.StructNative(unsafe.Pointer(navigation)))

	_cret = C.webkit_navigation_action_get_request(_arg0)

	var _uriRequest *URIRequest // out

	_uriRequest = wrapURIRequest(externglib.Take(unsafe.Pointer(_cret)))

	return _uriRequest
}

// IsRedirect returns whether the navigation was redirected.
func (navigation *NavigationAction) IsRedirect() bool {
	var _arg0 *C.WebKitNavigationAction // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitNavigationAction)(gextras.StructNative(unsafe.Pointer(navigation)))

	_cret = C.webkit_navigation_action_is_redirect(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsUserGesture: return whether the navigation was triggered by a user gesture
// like a mouse click.
func (navigation *NavigationAction) IsUserGesture() bool {
	var _arg0 *C.WebKitNavigationAction // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitNavigationAction)(gextras.StructNative(unsafe.Pointer(navigation)))

	_cret = C.webkit_navigation_action_is_user_gesture(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
