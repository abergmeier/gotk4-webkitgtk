// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_network_proxy_mode_get_type()), F: marshalNetworkProxyMode},
		{T: externglib.Type(C.webkit_network_proxy_settings_get_type()), F: marshalNetworkProxySettings},
	})
}

// NetworkProxyMode: enum values used to set the network proxy mode.
type NetworkProxyMode int

const (
	// NetworkProxyModeDefault: use the default proxy of the system.
	NetworkProxyModeDefault NetworkProxyMode = iota
	// NetworkProxyModeNoProxy: do not use any proxy.
	NetworkProxyModeNoProxy
	// NetworkProxyModeCustom: use custom proxy settings.
	NetworkProxyModeCustom
)

func marshalNetworkProxyMode(p uintptr) (interface{}, error) {
	return NetworkProxyMode(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// String returns the name in string for NetworkProxyMode.
func (n NetworkProxyMode) String() string {
	switch n {
	case NetworkProxyModeDefault:
		return "Default"
	case NetworkProxyModeNoProxy:
		return "NoProxy"
	case NetworkProxyModeCustom:
		return "Custom"
	default:
		return fmt.Sprintf("NetworkProxyMode(%d)", n)
	}
}

type NetworkProxySettings struct {
	nocopy gextras.NoCopy
	native *C.WebKitNetworkProxySettings
}

func marshalNetworkProxySettings(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return &NetworkProxySettings{native: (*C.WebKitNetworkProxySettings)(unsafe.Pointer(b))}, nil
}

// NewNetworkProxySettings constructs a struct NetworkProxySettings.
func NewNetworkProxySettings(defaultProxyUri string, ignoreHosts []string) *NetworkProxySettings {
	var _arg1 *C.gchar // out
	var _arg2 **C.gchar
	var _cret *C.WebKitNetworkProxySettings // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(defaultProxyUri)))
	{
		_arg2 = (**C.gchar)(C.malloc(C.ulong(len(ignoreHosts)+1) * C.ulong(unsafe.Sizeof(uint(0)))))
		{
			out := unsafe.Slice(_arg2, len(ignoreHosts)+1)
			var zero *C.gchar
			out[len(ignoreHosts)] = zero
			for i := range ignoreHosts {
				out[i] = (*C.gchar)(unsafe.Pointer(C.CString(ignoreHosts[i])))
			}
		}
	}

	_cret = C.webkit_network_proxy_settings_new(_arg1, _arg2)

	var _networkProxySettings *NetworkProxySettings // out

	_networkProxySettings = (*NetworkProxySettings)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_networkProxySettings, func(v *NetworkProxySettings) {
		C.webkit_network_proxy_settings_free((*C.WebKitNetworkProxySettings)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _networkProxySettings
}

// AddProxyForScheme adds a URI-scheme-specific proxy. URIs whose scheme matches
// uri_scheme will be proxied via proxy_uri. As with the default proxy URI, if
// proxy_uri starts with "socks://", it will be treated as referring to all
// three of the socks5, socks4a, and socks4 proxy types.
func (proxySettings *NetworkProxySettings) AddProxyForScheme(scheme string, proxyUri string) {
	var _arg0 *C.WebKitNetworkProxySettings // out
	var _arg1 *C.gchar                      // out
	var _arg2 *C.gchar                      // out

	_arg0 = (*C.WebKitNetworkProxySettings)(gextras.StructNative(unsafe.Pointer(proxySettings)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(scheme)))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(proxyUri)))

	C.webkit_network_proxy_settings_add_proxy_for_scheme(_arg0, _arg1, _arg2)
}

// Copy: make a copy of the KitNetworkProxySettings.
func (proxySettings *NetworkProxySettings) Copy() *NetworkProxySettings {
	var _arg0 *C.WebKitNetworkProxySettings // out
	var _cret *C.WebKitNetworkProxySettings // in

	_arg0 = (*C.WebKitNetworkProxySettings)(gextras.StructNative(unsafe.Pointer(proxySettings)))

	_cret = C.webkit_network_proxy_settings_copy(_arg0)

	var _networkProxySettings *NetworkProxySettings // out

	_networkProxySettings = (*NetworkProxySettings)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_networkProxySettings, func(v *NetworkProxySettings) {
		C.webkit_network_proxy_settings_free((*C.WebKitNetworkProxySettings)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _networkProxySettings
}

// Free: free the KitNetworkProxySettings.
func (proxySettings *NetworkProxySettings) free() {
	var _arg0 *C.WebKitNetworkProxySettings // out

	_arg0 = (*C.WebKitNetworkProxySettings)(gextras.StructNative(unsafe.Pointer(proxySettings)))

	C.webkit_network_proxy_settings_free(_arg0)
}
