// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

// glib.Type values for WebKitNotificationPermissionRequest.go.
var GTypeNotificationPermissionRequest = externglib.Type(C.webkit_notification_permission_request_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeNotificationPermissionRequest, F: marshalNotificationPermissionRequest},
	})
}

// NotificationPermissionRequestOverrider contains methods that are overridable.
type NotificationPermissionRequestOverrider interface {
}

type NotificationPermissionRequest struct {
	_ [0]func() // equal guard
	*externglib.Object

	PermissionRequest
}

var (
	_ externglib.Objector = (*NotificationPermissionRequest)(nil)
)

func classInitNotificationPermissionRequester(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapNotificationPermissionRequest(obj *externglib.Object) *NotificationPermissionRequest {
	return &NotificationPermissionRequest{
		Object: obj,
		PermissionRequest: PermissionRequest{
			Object: obj,
		},
	}
}

func marshalNotificationPermissionRequest(p uintptr) (interface{}, error) {
	return wrapNotificationPermissionRequest(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
