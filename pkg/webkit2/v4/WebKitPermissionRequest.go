// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
// extern void _gotk4_webkit24_PermissionRequestIface_allow(WebKitPermissionRequest*);
// extern void _gotk4_webkit24_PermissionRequestIface_deny(WebKitPermissionRequest*);
import "C"

// glib.Type values for WebKitPermissionRequest.go.
var GTypePermissionRequest = externglib.Type(C.webkit_permission_request_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypePermissionRequest, F: marshalPermissionRequest},
	})
}

// PermissionRequestOverrider contains methods that are overridable.
type PermissionRequestOverrider interface {
	// Allow the action which triggered this request.
	Allow()
	// Deny the action which triggered this request.
	Deny()
}

//
// PermissionRequest wraps an interface. This means the user can get the
// underlying type by calling Cast().
type PermissionRequest struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*PermissionRequest)(nil)
)

// PermissionRequester describes PermissionRequest's interface methods.
type PermissionRequester interface {
	externglib.Objector

	// Allow the action which triggered this request.
	Allow()
	// Deny the action which triggered this request.
	Deny()
}

var _ PermissionRequester = (*PermissionRequest)(nil)

func ifaceInitPermissionRequester(gifacePtr, data C.gpointer) {
	iface := (*C.WebKitPermissionRequestIface)(unsafe.Pointer(gifacePtr))
	iface.allow = (*[0]byte)(C._gotk4_webkit24_PermissionRequestIface_allow)
	iface.deny = (*[0]byte)(C._gotk4_webkit24_PermissionRequestIface_deny)
}

//export _gotk4_webkit24_PermissionRequestIface_allow
func _gotk4_webkit24_PermissionRequestIface_allow(arg0 *C.WebKitPermissionRequest) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(PermissionRequestOverrider)

	iface.Allow()
}

//export _gotk4_webkit24_PermissionRequestIface_deny
func _gotk4_webkit24_PermissionRequestIface_deny(arg0 *C.WebKitPermissionRequest) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(PermissionRequestOverrider)

	iface.Deny()
}

func wrapPermissionRequest(obj *externglib.Object) *PermissionRequest {
	return &PermissionRequest{
		Object: obj,
	}
}

func marshalPermissionRequest(p uintptr) (interface{}, error) {
	return wrapPermissionRequest(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Allow the action which triggered this request.
func (request *PermissionRequest) Allow() {
	var _arg0 *C.WebKitPermissionRequest // out

	_arg0 = (*C.WebKitPermissionRequest)(unsafe.Pointer(externglib.InternObject(request).Native()))

	C.webkit_permission_request_allow(_arg0)
	runtime.KeepAlive(request)
}

// Deny the action which triggered this request.
func (request *PermissionRequest) Deny() {
	var _arg0 *C.WebKitPermissionRequest // out

	_arg0 = (*C.WebKitPermissionRequest)(unsafe.Pointer(externglib.InternObject(request).Native()))

	C.webkit_permission_request_deny(_arg0)
	runtime.KeepAlive(request)
}
