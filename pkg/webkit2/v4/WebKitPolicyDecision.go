// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_policy_decision_get_type()), F: marshalPolicyDecisioner},
	})
}

type PolicyDecision struct {
	*externglib.Object
}

// PolicyDecisioner describes PolicyDecision's abstract methods.
type PolicyDecisioner interface {
	externglib.Objector

	// Download: spawn a download from this decision.
	Download()
	// Ignore the action which triggered this decision.
	Ignore()
	// Use: accept the action which triggered this decision.
	Use()
	// UseWithPolicies: accept the navigation action which triggered this
	// decision, and continue with policies affecting all subsequent loads of
	// resources in the origin associated with the accepted navigation action.
	UseWithPolicies(policies *WebsitePolicies)
}

var _ PolicyDecisioner = (*PolicyDecision)(nil)

func wrapPolicyDecision(obj *externglib.Object) *PolicyDecision {
	return &PolicyDecision{
		Object: obj,
	}
}

func marshalPolicyDecisioner(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapPolicyDecision(obj), nil
}

// Download: spawn a download from this decision.
func (decision *PolicyDecision) Download() {
	var _arg0 *C.WebKitPolicyDecision // out

	_arg0 = (*C.WebKitPolicyDecision)(unsafe.Pointer(decision.Native()))

	C.webkit_policy_decision_download(_arg0)
	runtime.KeepAlive(decision)
}

// Ignore the action which triggered this decision. For instance, for a
// KitResponsePolicyDecision, this would cancel the request.
func (decision *PolicyDecision) Ignore() {
	var _arg0 *C.WebKitPolicyDecision // out

	_arg0 = (*C.WebKitPolicyDecision)(unsafe.Pointer(decision.Native()))

	C.webkit_policy_decision_ignore(_arg0)
	runtime.KeepAlive(decision)
}

// Use: accept the action which triggered this decision.
func (decision *PolicyDecision) Use() {
	var _arg0 *C.WebKitPolicyDecision // out

	_arg0 = (*C.WebKitPolicyDecision)(unsafe.Pointer(decision.Native()))

	C.webkit_policy_decision_use(_arg0)
	runtime.KeepAlive(decision)
}

// UseWithPolicies: accept the navigation action which triggered this decision,
// and continue with policies affecting all subsequent loads of resources in the
// origin associated with the accepted navigation action.
//
// For example, a navigation decision to a video sharing website may be accepted
// under the priviso no movies are allowed to autoplay. The autoplay policy in
// this case would be set in the policies.
func (decision *PolicyDecision) UseWithPolicies(policies *WebsitePolicies) {
	var _arg0 *C.WebKitPolicyDecision  // out
	var _arg1 *C.WebKitWebsitePolicies // out

	_arg0 = (*C.WebKitPolicyDecision)(unsafe.Pointer(decision.Native()))
	_arg1 = (*C.WebKitWebsitePolicies)(unsafe.Pointer(policies.Native()))

	C.webkit_policy_decision_use_with_policies(_arg0, _arg1)
	runtime.KeepAlive(decision)
	runtime.KeepAlive(policies)
}
