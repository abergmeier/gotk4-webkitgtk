// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_print_operation_response_get_type()), F: marshalPrintOperationResponse},
		{T: externglib.Type(C.webkit_print_operation_get_type()), F: marshalPrintOperationer},
	})
}

// PrintOperationResponse: enum values representing the response of the print
// dialog shown with webkit_print_operation_run_dialog().
type PrintOperationResponse int

const (
	// PrintOperationResponsePrint: print button was clicked in print dialog.
	PrintOperationResponsePrint PrintOperationResponse = iota
	// PrintOperationResponseCancel: print dialog was cancelled.
	PrintOperationResponseCancel
)

func marshalPrintOperationResponse(p uintptr) (interface{}, error) {
	return PrintOperationResponse(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PrintOperationResponse.
func (p PrintOperationResponse) String() string {
	switch p {
	case PrintOperationResponsePrint:
		return "Print"
	case PrintOperationResponseCancel:
		return "Cancel"
	default:
		return fmt.Sprintf("PrintOperationResponse(%d)", p)
	}
}

type PrintOperation struct {
	*externglib.Object
}

func wrapPrintOperation(obj *externglib.Object) *PrintOperation {
	return &PrintOperation{
		Object: obj,
	}
}

func marshalPrintOperationer(p uintptr) (interface{}, error) {
	return wrapPrintOperation(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewPrintOperation: create a new KitPrintOperation to print web_view contents.
//
// The function takes the following parameters:
//
//    - webView: KitWebView.
//
func NewPrintOperation(webView *WebView) *PrintOperation {
	var _arg1 *C.WebKitWebView        // out
	var _cret *C.WebKitPrintOperation // in

	_arg1 = (*C.WebKitWebView)(unsafe.Pointer(webView.Native()))

	_cret = C.webkit_print_operation_new(_arg1)
	runtime.KeepAlive(webView)

	var _printOperation *PrintOperation // out

	_printOperation = wrapPrintOperation(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _printOperation
}

// PageSetup: return the current page setup of print_operation. It returns NULL
// until either webkit_print_operation_set_page_setup() or
// webkit_print_operation_run_dialog() have been called.
func (printOperation *PrintOperation) PageSetup() *gtk.PageSetup {
	var _arg0 *C.WebKitPrintOperation // out
	var _cret *C.GtkPageSetup         // in

	_arg0 = (*C.WebKitPrintOperation)(unsafe.Pointer(printOperation.Native()))

	_cret = C.webkit_print_operation_get_page_setup(_arg0)
	runtime.KeepAlive(printOperation)

	var _pageSetup *gtk.PageSetup // out

	{
		obj := externglib.Take(unsafe.Pointer(_cret))
		_pageSetup = &gtk.PageSetup{
			Object: obj,
		}
	}

	return _pageSetup
}

// PrintSettings: return the current print settings of print_operation. It
// returns NULL until either webkit_print_operation_set_print_settings() or
// webkit_print_operation_run_dialog() have been called.
func (printOperation *PrintOperation) PrintSettings() *gtk.PrintSettings {
	var _arg0 *C.WebKitPrintOperation // out
	var _cret *C.GtkPrintSettings     // in

	_arg0 = (*C.WebKitPrintOperation)(unsafe.Pointer(printOperation.Native()))

	_cret = C.webkit_print_operation_get_print_settings(_arg0)
	runtime.KeepAlive(printOperation)

	var _printSettings *gtk.PrintSettings // out

	{
		obj := externglib.Take(unsafe.Pointer(_cret))
		_printSettings = &gtk.PrintSettings{
			Object: obj,
		}
	}

	return _printSettings
}

// Print: start a print operation using current print settings and page setup
// without showing the print dialog. If either print settings or page setup are
// not set with webkit_print_operation_set_print_settings() and
// webkit_print_operation_set_page_setup(), the default options will be used and
// the print job will be sent to the default printer. The
// KitPrintOperation::finished signal is emitted when the printing operation
// finishes. If an error occurs while printing the signal
// KitPrintOperation::failed is emitted before KitPrintOperation::finished.
func (printOperation *PrintOperation) Print() {
	var _arg0 *C.WebKitPrintOperation // out

	_arg0 = (*C.WebKitPrintOperation)(unsafe.Pointer(printOperation.Native()))

	C.webkit_print_operation_print(_arg0)
	runtime.KeepAlive(printOperation)
}

// RunDialog: run the print dialog and start printing using the options selected
// by the user. This method returns when the print dialog is closed. If the
// print dialog is cancelled WEBKIT_PRINT_OPERATION_RESPONSE_CANCEL is returned.
// If the user clicks on the print button, WEBKIT_PRINT_OPERATION_RESPONSE_PRINT
// is returned and the print operation starts. In this case, the
// KitPrintOperation::finished signal is emitted when the operation finishes. If
// an error occurs while printing, the signal KitPrintOperation::failed is
// emitted before KitPrintOperation::finished. If the print dialog is not
// cancelled current print settings and page setup of print_operation are
// updated with options selected by the user when Print button is pressed in
// print dialog. You can get the updated print settings and page setup by
// calling webkit_print_operation_get_print_settings() and
// webkit_print_operation_get_page_setup() after this method.
//
// The function takes the following parameters:
//
//    - parent: transient parent of the print dialog.
//
func (printOperation *PrintOperation) RunDialog(parent *gtk.Window) PrintOperationResponse {
	var _arg0 *C.WebKitPrintOperation        // out
	var _arg1 *C.GtkWindow                   // out
	var _cret C.WebKitPrintOperationResponse // in

	_arg0 = (*C.WebKitPrintOperation)(unsafe.Pointer(printOperation.Native()))
	if parent != nil {
		_arg1 = (*C.GtkWindow)(unsafe.Pointer(parent.Native()))
	}

	_cret = C.webkit_print_operation_run_dialog(_arg0, _arg1)
	runtime.KeepAlive(printOperation)
	runtime.KeepAlive(parent)

	var _printOperationResponse PrintOperationResponse // out

	_printOperationResponse = PrintOperationResponse(_cret)

	return _printOperationResponse
}

// SetPageSetup: set the current page setup of print_operation. Current page
// setup is used for the initial values of the print dialog when
// webkit_print_operation_run_dialog() is called.
//
// The function takes the following parameters:
//
//    - pageSetup to set.
//
func (printOperation *PrintOperation) SetPageSetup(pageSetup *gtk.PageSetup) {
	var _arg0 *C.WebKitPrintOperation // out
	var _arg1 *C.GtkPageSetup         // out

	_arg0 = (*C.WebKitPrintOperation)(unsafe.Pointer(printOperation.Native()))
	_arg1 = (*C.GtkPageSetup)(unsafe.Pointer(pageSetup.Native()))

	C.webkit_print_operation_set_page_setup(_arg0, _arg1)
	runtime.KeepAlive(printOperation)
	runtime.KeepAlive(pageSetup)
}

// SetPrintSettings: set the current print settings of print_operation. Current
// print settings are used for the initial values of the print dialog when
// webkit_print_operation_run_dialog() is called.
//
// The function takes the following parameters:
//
//    - printSettings to set.
//
func (printOperation *PrintOperation) SetPrintSettings(printSettings *gtk.PrintSettings) {
	var _arg0 *C.WebKitPrintOperation // out
	var _arg1 *C.GtkPrintSettings     // out

	_arg0 = (*C.WebKitPrintOperation)(unsafe.Pointer(printOperation.Native()))
	_arg1 = (*C.GtkPrintSettings)(unsafe.Pointer(printSettings.Native()))

	C.webkit_print_operation_set_print_settings(_arg0, _arg1)
	runtime.KeepAlive(printOperation)
	runtime.KeepAlive(printSettings)
}

// ConnectCreateCustomWidget: emitted when displaying the print dialog with
// webkit_print_operation_run_dialog(). The returned KitPrintCustomWidget will
// be added to the print dialog and it will be owned by the print_operation.
// However, the object is guaranteed to be alive until the
// KitPrintCustomWidget::apply is emitted.
func (printOperation *PrintOperation) ConnectCreateCustomWidget(f func() PrintCustomWidget) externglib.SignalHandle {
	return printOperation.Connect("create-custom-widget", f)
}

// ConnectFinished: emitted when the print operation has finished doing
// everything required for printing.
func (printOperation *PrintOperation) ConnectFinished(f func()) externglib.SignalHandle {
	return printOperation.Connect("finished", f)
}
