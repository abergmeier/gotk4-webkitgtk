// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_security_manager_get_type()), F: marshalSecurityManagerer},
	})
}

type SecurityManager struct {
	*externglib.Object
}

func wrapSecurityManager(obj *externglib.Object) *SecurityManager {
	return &SecurityManager{
		Object: obj,
	}
}

func marshalSecurityManagerer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapSecurityManager(obj), nil
}

// RegisterURISchemeAsCorsEnabled: register scheme as a CORS (Cross-origin
// resource sharing) enabled scheme. This means that CORS requests are allowed.
// See W3C CORS specification http://www.w3.org/TR/cors/.
func (securityManager *SecurityManager) RegisterURISchemeAsCorsEnabled(scheme string) {
	var _arg0 *C.WebKitSecurityManager // out
	var _arg1 *C.gchar                 // out

	_arg0 = (*C.WebKitSecurityManager)(unsafe.Pointer(securityManager.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(scheme)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_security_manager_register_uri_scheme_as_cors_enabled(_arg0, _arg1)
	runtime.KeepAlive(securityManager)
	runtime.KeepAlive(scheme)
}

// RegisterURISchemeAsDisplayIsolated: register scheme as a display isolated
// scheme. This means that pages cannot display these URIs unless they are from
// the same scheme.
func (securityManager *SecurityManager) RegisterURISchemeAsDisplayIsolated(scheme string) {
	var _arg0 *C.WebKitSecurityManager // out
	var _arg1 *C.gchar                 // out

	_arg0 = (*C.WebKitSecurityManager)(unsafe.Pointer(securityManager.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(scheme)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_security_manager_register_uri_scheme_as_display_isolated(_arg0, _arg1)
	runtime.KeepAlive(securityManager)
	runtime.KeepAlive(scheme)
}

// RegisterURISchemeAsEmptyDocument: register scheme as an empty document
// scheme. This means that they are allowed to commit synchronously.
func (securityManager *SecurityManager) RegisterURISchemeAsEmptyDocument(scheme string) {
	var _arg0 *C.WebKitSecurityManager // out
	var _arg1 *C.gchar                 // out

	_arg0 = (*C.WebKitSecurityManager)(unsafe.Pointer(securityManager.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(scheme)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_security_manager_register_uri_scheme_as_empty_document(_arg0, _arg1)
	runtime.KeepAlive(securityManager)
	runtime.KeepAlive(scheme)
}

// RegisterURISchemeAsLocal: register scheme as a local scheme. This means that
// other non-local pages cannot link to or access URIs of this scheme.
func (securityManager *SecurityManager) RegisterURISchemeAsLocal(scheme string) {
	var _arg0 *C.WebKitSecurityManager // out
	var _arg1 *C.gchar                 // out

	_arg0 = (*C.WebKitSecurityManager)(unsafe.Pointer(securityManager.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(scheme)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_security_manager_register_uri_scheme_as_local(_arg0, _arg1)
	runtime.KeepAlive(securityManager)
	runtime.KeepAlive(scheme)
}

// RegisterURISchemeAsNoAccess: register scheme as a no-access scheme. This
// means that pages loaded with this URI scheme cannot access pages loaded with
// any other URI scheme.
func (securityManager *SecurityManager) RegisterURISchemeAsNoAccess(scheme string) {
	var _arg0 *C.WebKitSecurityManager // out
	var _arg1 *C.gchar                 // out

	_arg0 = (*C.WebKitSecurityManager)(unsafe.Pointer(securityManager.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(scheme)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_security_manager_register_uri_scheme_as_no_access(_arg0, _arg1)
	runtime.KeepAlive(securityManager)
	runtime.KeepAlive(scheme)
}

// RegisterURISchemeAsSecure: register scheme as a secure scheme. This means
// that mixed content warnings won't be generated for this scheme when included
// by an HTTPS page.
func (securityManager *SecurityManager) RegisterURISchemeAsSecure(scheme string) {
	var _arg0 *C.WebKitSecurityManager // out
	var _arg1 *C.gchar                 // out

	_arg0 = (*C.WebKitSecurityManager)(unsafe.Pointer(securityManager.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(scheme)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_security_manager_register_uri_scheme_as_secure(_arg0, _arg1)
	runtime.KeepAlive(securityManager)
	runtime.KeepAlive(scheme)
}

// URISchemeIsCorsEnabled: whether scheme is considered as a CORS enabled
// scheme. See also
// webkit_security_manager_register_uri_scheme_as_cors_enabled().
func (securityManager *SecurityManager) URISchemeIsCorsEnabled(scheme string) bool {
	var _arg0 *C.WebKitSecurityManager // out
	var _arg1 *C.gchar                 // out
	var _cret C.gboolean               // in

	_arg0 = (*C.WebKitSecurityManager)(unsafe.Pointer(securityManager.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(scheme)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_security_manager_uri_scheme_is_cors_enabled(_arg0, _arg1)
	runtime.KeepAlive(securityManager)
	runtime.KeepAlive(scheme)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// URISchemeIsDisplayIsolated: whether scheme is considered as a display
// isolated scheme. See also
// webkit_security_manager_register_uri_scheme_as_display_isolated().
func (securityManager *SecurityManager) URISchemeIsDisplayIsolated(scheme string) bool {
	var _arg0 *C.WebKitSecurityManager // out
	var _arg1 *C.gchar                 // out
	var _cret C.gboolean               // in

	_arg0 = (*C.WebKitSecurityManager)(unsafe.Pointer(securityManager.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(scheme)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_security_manager_uri_scheme_is_display_isolated(_arg0, _arg1)
	runtime.KeepAlive(securityManager)
	runtime.KeepAlive(scheme)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// URISchemeIsEmptyDocument: whether scheme is considered as an empty document
// scheme. See also
// webkit_security_manager_register_uri_scheme_as_empty_document().
func (securityManager *SecurityManager) URISchemeIsEmptyDocument(scheme string) bool {
	var _arg0 *C.WebKitSecurityManager // out
	var _arg1 *C.gchar                 // out
	var _cret C.gboolean               // in

	_arg0 = (*C.WebKitSecurityManager)(unsafe.Pointer(securityManager.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(scheme)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_security_manager_uri_scheme_is_empty_document(_arg0, _arg1)
	runtime.KeepAlive(securityManager)
	runtime.KeepAlive(scheme)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// URISchemeIsLocal: whether scheme is considered as a local scheme. See also
// webkit_security_manager_register_uri_scheme_as_local().
func (securityManager *SecurityManager) URISchemeIsLocal(scheme string) bool {
	var _arg0 *C.WebKitSecurityManager // out
	var _arg1 *C.gchar                 // out
	var _cret C.gboolean               // in

	_arg0 = (*C.WebKitSecurityManager)(unsafe.Pointer(securityManager.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(scheme)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_security_manager_uri_scheme_is_local(_arg0, _arg1)
	runtime.KeepAlive(securityManager)
	runtime.KeepAlive(scheme)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// URISchemeIsNoAccess: whether scheme is considered as a no-access scheme. See
// also webkit_security_manager_register_uri_scheme_as_no_access().
func (securityManager *SecurityManager) URISchemeIsNoAccess(scheme string) bool {
	var _arg0 *C.WebKitSecurityManager // out
	var _arg1 *C.gchar                 // out
	var _cret C.gboolean               // in

	_arg0 = (*C.WebKitSecurityManager)(unsafe.Pointer(securityManager.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(scheme)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_security_manager_uri_scheme_is_no_access(_arg0, _arg1)
	runtime.KeepAlive(securityManager)
	runtime.KeepAlive(scheme)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// URISchemeIsSecure: whether scheme is considered as a secure scheme. See also
// webkit_security_manager_register_uri_scheme_as_secure().
func (securityManager *SecurityManager) URISchemeIsSecure(scheme string) bool {
	var _arg0 *C.WebKitSecurityManager // out
	var _arg1 *C.gchar                 // out
	var _cret C.gboolean               // in

	_arg0 = (*C.WebKitSecurityManager)(unsafe.Pointer(securityManager.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(scheme)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_security_manager_uri_scheme_is_secure(_arg0, _arg1)
	runtime.KeepAlive(securityManager)
	runtime.KeepAlive(scheme)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
