// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_security_origin_get_type()), F: marshalSecurityOrigin},
	})
}

type SecurityOrigin struct {
	nocopy gextras.NoCopy
	native *C.WebKitSecurityOrigin
}

func marshalSecurityOrigin(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return &SecurityOrigin{native: (*C.WebKitSecurityOrigin)(unsafe.Pointer(b))}, nil
}

// NewSecurityOrigin constructs a struct SecurityOrigin.
func NewSecurityOrigin(protocol string, host string, port uint16) *SecurityOrigin {
	var _arg1 *C.gchar                // out
	var _arg2 *C.gchar                // out
	var _arg3 C.guint16               // out
	var _cret *C.WebKitSecurityOrigin // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(protocol)))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(host)))
	_arg3 = C.guint16(port)

	_cret = C.webkit_security_origin_new(_arg1, _arg2, _arg3)

	var _securityOrigin *SecurityOrigin // out

	_securityOrigin = (*SecurityOrigin)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.webkit_security_origin_ref(_cret)
	runtime.SetFinalizer(_securityOrigin, func(v *SecurityOrigin) {
		C.webkit_security_origin_unref((*C.WebKitSecurityOrigin)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _securityOrigin
}

// NewSecurityOriginForURI constructs a struct SecurityOrigin.
func NewSecurityOriginForURI(uri string) *SecurityOrigin {
	var _arg1 *C.gchar                // out
	var _cret *C.WebKitSecurityOrigin // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(uri)))

	_cret = C.webkit_security_origin_new_for_uri(_arg1)

	var _securityOrigin *SecurityOrigin // out

	_securityOrigin = (*SecurityOrigin)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.webkit_security_origin_ref(_cret)
	runtime.SetFinalizer(_securityOrigin, func(v *SecurityOrigin) {
		C.webkit_security_origin_unref((*C.WebKitSecurityOrigin)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _securityOrigin
}

// Host gets the hostname of origin. It is reasonable for this to be NULL if its
// protocol does not require a host component.
func (origin *SecurityOrigin) Host() string {
	var _arg0 *C.WebKitSecurityOrigin // out
	var _cret *C.gchar                // in

	_arg0 = (*C.WebKitSecurityOrigin)(gextras.StructNative(unsafe.Pointer(origin)))

	_cret = C.webkit_security_origin_get_host(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Port gets the port of origin. This function will always return 0 if the port
// is the default port for the given protocol. For example, http://example.com
// has the same security origin as http://example.com:80, and this function will
// return 0 for a KitSecurityOrigin constructed from either URI.
func (origin *SecurityOrigin) Port() uint16 {
	var _arg0 *C.WebKitSecurityOrigin // out
	var _cret C.guint16               // in

	_arg0 = (*C.WebKitSecurityOrigin)(gextras.StructNative(unsafe.Pointer(origin)))

	_cret = C.webkit_security_origin_get_port(_arg0)

	var _guint16 uint16 // out

	_guint16 = uint16(_cret)

	return _guint16
}

// Protocol gets the protocol of origin.
func (origin *SecurityOrigin) Protocol() string {
	var _arg0 *C.WebKitSecurityOrigin // out
	var _cret *C.gchar                // in

	_arg0 = (*C.WebKitSecurityOrigin)(gextras.StructNative(unsafe.Pointer(origin)))

	_cret = C.webkit_security_origin_get_protocol(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// IsOpaque: this function returns FALSE. KitSecurityOrigin is now a simple
// wrapper around a &lt;protocol, host, port&gt; triplet, and no longer
// represents an origin as defined by web standards that may be opaque.
//
// Deprecated: since version 2.32.
func (origin *SecurityOrigin) IsOpaque() bool {
	var _arg0 *C.WebKitSecurityOrigin // out
	var _cret C.gboolean              // in

	_arg0 = (*C.WebKitSecurityOrigin)(gextras.StructNative(unsafe.Pointer(origin)))

	_cret = C.webkit_security_origin_is_opaque(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Ref: atomically increments the reference count of origin by one. This
// function is MT-safe and may be called from any thread.
func (origin *SecurityOrigin) ref() *SecurityOrigin {
	var _arg0 *C.WebKitSecurityOrigin // out
	var _cret *C.WebKitSecurityOrigin // in

	_arg0 = (*C.WebKitSecurityOrigin)(gextras.StructNative(unsafe.Pointer(origin)))

	_cret = C.webkit_security_origin_ref(_arg0)

	var _securityOrigin *SecurityOrigin // out

	_securityOrigin = (*SecurityOrigin)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.webkit_security_origin_ref(_cret)
	runtime.SetFinalizer(_securityOrigin, func(v *SecurityOrigin) {
		C.webkit_security_origin_unref((*C.WebKitSecurityOrigin)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _securityOrigin
}

// String gets a string representation of origin. The string representation is a
// valid URI with only protocol, host, and port components, or NULL.
func (origin *SecurityOrigin) String() string {
	var _arg0 *C.WebKitSecurityOrigin // out
	var _cret *C.gchar                // in

	_arg0 = (*C.WebKitSecurityOrigin)(gextras.StructNative(unsafe.Pointer(origin)))

	_cret = C.webkit_security_origin_to_string(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Unref: atomically decrements the reference count of origin by one. If the
// reference count drops to 0, all memory allocated by KitSecurityOrigin is
// released. This function is MT-safe and may be called from any thread.
func (origin *SecurityOrigin) unref() {
	var _arg0 *C.WebKitSecurityOrigin // out

	_arg0 = (*C.WebKitSecurityOrigin)(gextras.StructNative(unsafe.Pointer(origin)))

	C.webkit_security_origin_unref(_arg0)
}
