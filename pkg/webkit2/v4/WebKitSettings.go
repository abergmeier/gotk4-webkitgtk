// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_hardware_acceleration_policy_get_type()), F: marshalHardwareAccelerationPolicy},
		{T: externglib.Type(C.webkit_settings_get_type()), F: marshalSettingser},
	})
}

// HardwareAccelerationPolicy: enum values used for determining the hardware
// acceleration policy.
type HardwareAccelerationPolicy int

const (
	// HardwareAccelerationPolicyOnDemand: hardware acceleration is
	// enabled/disabled as request by web contents.
	HardwareAccelerationPolicyOnDemand HardwareAccelerationPolicy = iota
	// HardwareAccelerationPolicyAlways: hardware acceleration is always
	// enabled, even for websites not requesting it.
	HardwareAccelerationPolicyAlways
	// HardwareAccelerationPolicyNever: hardware acceleration is always
	// disabled, even for websites requesting it.
	HardwareAccelerationPolicyNever
)

func marshalHardwareAccelerationPolicy(p uintptr) (interface{}, error) {
	return HardwareAccelerationPolicy(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// String returns the name in string for HardwareAccelerationPolicy.
func (h HardwareAccelerationPolicy) String() string {
	switch h {
	case HardwareAccelerationPolicyOnDemand:
		return "OnDemand"
	case HardwareAccelerationPolicyAlways:
		return "Always"
	case HardwareAccelerationPolicyNever:
		return "Never"
	default:
		return fmt.Sprintf("HardwareAccelerationPolicy(%d)", h)
	}
}

type Settings struct {
	*externglib.Object
}

var _ gextras.Nativer = (*Settings)(nil)

func wrapSettings(obj *externglib.Object) *Settings {
	return &Settings{
		Object: obj,
	}
}

func marshalSettingser(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapSettings(obj), nil
}

// NewSettings creates a new KitSettings instance with default values. It must
// be manually attached to a KitWebView. See also
// webkit_settings_new_with_settings().
func NewSettings() *Settings {
	var _cret *C.WebKitSettings // in

	_cret = C.webkit_settings_new()

	var _settings *Settings // out

	_settings = wrapSettings(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _settings
}

// AllowFileAccessFromFileUrls: get the
// KitSettings:allow-file-access-from-file-urls property.
func (settings *Settings) AllowFileAccessFromFileUrls() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_allow_file_access_from_file_urls(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AllowModalDialogs: get the KitSettings:allow-modal-dialogs property.
func (settings *Settings) AllowModalDialogs() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_allow_modal_dialogs(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AllowTopNavigationToDataUrls: get the
// KitSettings:allow-top-navigation-to-data-urls property.
func (settings *Settings) AllowTopNavigationToDataUrls() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_allow_top_navigation_to_data_urls(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AllowUniversalAccessFromFileUrls: get the
// KitSettings:allow-universal-access-from-file-urls property.
func (settings *Settings) AllowUniversalAccessFromFileUrls() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_allow_universal_access_from_file_urls(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AutoLoadImages: get the KitSettings:auto-load-images property.
func (settings *Settings) AutoLoadImages() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_auto_load_images(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// CursiveFontFamily gets the KitSettings:cursive-font-family property.
func (settings *Settings) CursiveFontFamily() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_cursive_font_family(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// DefaultCharset gets the KitSettings:default-charset property.
func (settings *Settings) DefaultCharset() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_default_charset(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

func (settings *Settings) DefaultFontFamily() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_default_font_family(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// DefaultFontSize gets the KitSettings:default-font-size property.
func (settings *Settings) DefaultFontSize() uint32 {
	var _arg0 *C.WebKitSettings // out
	var _cret C.guint32         // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_default_font_size(_arg0)

	var _guint32 uint32 // out

	_guint32 = uint32(_cret)

	return _guint32
}

// DefaultMonospaceFontSize gets the KitSettings:default-monospace-font-size
// property.
func (settings *Settings) DefaultMonospaceFontSize() uint32 {
	var _arg0 *C.WebKitSettings // out
	var _cret C.guint32         // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_default_monospace_font_size(_arg0)

	var _guint32 uint32 // out

	_guint32 = uint32(_cret)

	return _guint32
}

// DrawCompositingIndicators: get the KitSettings:draw-compositing-indicators
// property.
func (settings *Settings) DrawCompositingIndicators() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_draw_compositing_indicators(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableAccelerated2DCanvas: get the KitSettings:enable-accelerated-2d-canvas
// property.
//
// Deprecated: since version 2.32.
func (settings *Settings) EnableAccelerated2DCanvas() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_accelerated_2d_canvas(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableBackForwardNavigationGestures: get the
// KitSettings:enable-back-forward-navigation-gestures property.
func (settings *Settings) EnableBackForwardNavigationGestures() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_back_forward_navigation_gestures(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableCaretBrowsing: get the KitSettings:enable-caret-browsing property.
func (settings *Settings) EnableCaretBrowsing() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_caret_browsing(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableDeveloperExtras: get the KitSettings:enable-developer-extras property.
func (settings *Settings) EnableDeveloperExtras() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_developer_extras(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableDnsPrefetching: get the KitSettings:enable-dns-prefetching property.
func (settings *Settings) EnableDnsPrefetching() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_dns_prefetching(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableEncryptedMedia: get the KitSettings:enable-encrypted-media property.
func (settings *Settings) EnableEncryptedMedia() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_encrypted_media(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableFrameFlattening: get the KitSettings:enable-frame-flattening property.
func (settings *Settings) EnableFrameFlattening() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_frame_flattening(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableFullscreen: get the KitSettings:enable-fullscreen property.
func (settings *Settings) EnableFullscreen() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_fullscreen(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableHtml5Database: get the KitSettings:enable-html5-database property.
func (settings *Settings) EnableHtml5Database() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_html5_database(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableHtml5LocalStorage: get the KitSettings:enable-html5-local-storage
// property.
func (settings *Settings) EnableHtml5LocalStorage() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_html5_local_storage(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableHyperlinkAuditing: get the KitSettings:enable-hyperlink-auditing
// property.
func (settings *Settings) EnableHyperlinkAuditing() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_hyperlink_auditing(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableJava: get the KitSettings:enable-java property.
func (settings *Settings) EnableJava() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_java(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableJavascript: get the KitSettings:enable-javascript property.
func (settings *Settings) EnableJavascript() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_javascript(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableJavascriptMarkup: get the KitSettings:enable-javascript-markup
// property.
func (settings *Settings) EnableJavascriptMarkup() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_javascript_markup(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableMedia: get the KitSettings:enable-media property.
func (settings *Settings) EnableMedia() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_media(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableMediaCapabilities: get the KitSettings:enable-media-capabilities
// property.
func (settings *Settings) EnableMediaCapabilities() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_media_capabilities(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableMediaStream: get the KitSettings:enable-media-stream property.
func (settings *Settings) EnableMediaStream() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_media_stream(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableMediasource: get the KitSettings:enable-mediasource property.
func (settings *Settings) EnableMediasource() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_mediasource(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableMockCaptureDevices: get the KitSettings:enable-mock-capture-devices
// property.
func (settings *Settings) EnableMockCaptureDevices() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_mock_capture_devices(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableOfflineWebApplicationCache: get the
// KitSettings:enable-offline-web-application-cache property.
func (settings *Settings) EnableOfflineWebApplicationCache() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_offline_web_application_cache(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnablePageCache: get the KitSettings:enable-page-cache property.
func (settings *Settings) EnablePageCache() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_page_cache(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnablePlugins: get the KitSettings:enable-plugins property.
//
// Deprecated: since version 2.32.
func (settings *Settings) EnablePlugins() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_plugins(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnablePrivateBrowsing: get the KitSettings:enable-private-browsing property.
//
// Deprecated: Use KitWebView:is-ephemeral or KitWebContext:is-ephemeral
// instead.
func (settings *Settings) EnablePrivateBrowsing() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_private_browsing(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableResizableTextAreas: get the KitSettings:enable-resizable-text-areas
// property.
func (settings *Settings) EnableResizableTextAreas() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_resizable_text_areas(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableSiteSpecificQuirks: get the KitSettings:enable-site-specific-quirks
// property.
func (settings *Settings) EnableSiteSpecificQuirks() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_site_specific_quirks(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableSmoothScrolling: get the KitSettings:enable-smooth-scrolling property.
func (settings *Settings) EnableSmoothScrolling() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_smooth_scrolling(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableSpatialNavigation: get the KitSettings:enable-spatial-navigation
// property.
func (settings *Settings) EnableSpatialNavigation() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_spatial_navigation(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableTabsToLinks: get the KitSettings:enable-tabs-to-links property.
func (settings *Settings) EnableTabsToLinks() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_tabs_to_links(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableWebaudio: get the KitSettings:enable-webaudio property.
func (settings *Settings) EnableWebaudio() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_webaudio(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableWebgl: get the KitSettings:enable-webgl property.
func (settings *Settings) EnableWebgl() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_webgl(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableWriteConsoleMessagesToStdout: get the
// KitSettings:enable-write-console-messages-to-stdout property.
func (settings *Settings) EnableWriteConsoleMessagesToStdout() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_write_console_messages_to_stdout(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableXssAuditor: get the KitSettings:enable-xss-auditor property.
func (settings *Settings) EnableXssAuditor() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_enable_xss_auditor(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// FantasyFontFamily gets the KitSettings:fantasy-font-family property.
func (settings *Settings) FantasyFontFamily() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_fantasy_font_family(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// HardwareAccelerationPolicy: get the KitSettings:hardware-acceleration-policy
// property.
func (settings *Settings) HardwareAccelerationPolicy() HardwareAccelerationPolicy {
	var _arg0 *C.WebKitSettings                  // out
	var _cret C.WebKitHardwareAccelerationPolicy // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_hardware_acceleration_policy(_arg0)

	var _hardwareAccelerationPolicy HardwareAccelerationPolicy // out

	_hardwareAccelerationPolicy = HardwareAccelerationPolicy(_cret)

	return _hardwareAccelerationPolicy
}

// JavascriptCanAccessClipboard: get the
// KitSettings:javascript-can-access-clipboard property.
func (settings *Settings) JavascriptCanAccessClipboard() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_javascript_can_access_clipboard(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// JavascriptCanOpenWindowsAutomatically: get the
// KitSettings:javascript-can-open-windows-automatically property.
func (settings *Settings) JavascriptCanOpenWindowsAutomatically() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_javascript_can_open_windows_automatically(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// LoadIconsIgnoringImageLoadSetting: get the
// KitSettings:load-icons-ignoring-image-load-setting property.
func (settings *Settings) LoadIconsIgnoringImageLoadSetting() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_load_icons_ignoring_image_load_setting(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// MediaContentTypesRequiringHardwareSupport gets the
// KitSettings:media-content-types-requiring-hardware-support property.
func (settings *Settings) MediaContentTypesRequiringHardwareSupport() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_media_content_types_requiring_hardware_support(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// MediaPlaybackAllowsInline: get the KitSettings:media-playback-allows-inline
// property.
func (settings *Settings) MediaPlaybackAllowsInline() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_media_playback_allows_inline(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// MediaPlaybackRequiresUserGesture: get the
// KitSettings:media-playback-requires-user-gesture property.
func (settings *Settings) MediaPlaybackRequiresUserGesture() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_media_playback_requires_user_gesture(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// MinimumFontSize gets the KitSettings:minimum-font-size property.
func (settings *Settings) MinimumFontSize() uint32 {
	var _arg0 *C.WebKitSettings // out
	var _cret C.guint32         // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_minimum_font_size(_arg0)

	var _guint32 uint32 // out

	_guint32 = uint32(_cret)

	return _guint32
}

// MonospaceFontFamily gets the KitSettings:monospace-font-family property.
func (settings *Settings) MonospaceFontFamily() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_monospace_font_family(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// PictographFontFamily gets the KitSettings:pictograph-font-family property.
func (settings *Settings) PictographFontFamily() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_pictograph_font_family(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// PrintBackgrounds: get the KitSettings:print-backgrounds property.
func (settings *Settings) PrintBackgrounds() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_print_backgrounds(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SansSerifFontFamily gets the KitSettings:sans-serif-font-family property.
func (settings *Settings) SansSerifFontFamily() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_sans_serif_font_family(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// SerifFontFamily gets the KitSettings:serif-font-family property.
func (settings *Settings) SerifFontFamily() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_serif_font_family(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// UserAgent: get the KitSettings:user-agent property.
func (settings *Settings) UserAgent() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_user_agent(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// ZoomTextOnly: get the KitSettings:zoom-text-only property.
func (settings *Settings) ZoomTextOnly() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.webkit_settings_get_zoom_text_only(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetAllowFileAccessFromFileUrls: set the
// KitSettings:allow-file-access-from-file-urls property.
func (settings *Settings) SetAllowFileAccessFromFileUrls(allowed bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if allowed {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_allow_file_access_from_file_urls(_arg0, _arg1)
}

// SetAllowModalDialogs: set the KitSettings:allow-modal-dialogs property.
func (settings *Settings) SetAllowModalDialogs(allowed bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if allowed {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_allow_modal_dialogs(_arg0, _arg1)
}

// SetAllowTopNavigationToDataUrls: set the
// KitSettings:allow-top-navigation-to-data-urls property.
func (settings *Settings) SetAllowTopNavigationToDataUrls(allowed bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if allowed {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_allow_top_navigation_to_data_urls(_arg0, _arg1)
}

// SetAllowUniversalAccessFromFileUrls: set the
// KitSettings:allow-universal-access-from-file-urls property.
func (settings *Settings) SetAllowUniversalAccessFromFileUrls(allowed bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if allowed {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_allow_universal_access_from_file_urls(_arg0, _arg1)
}

// SetAutoLoadImages: set the KitSettings:auto-load-images property.
func (settings *Settings) SetAutoLoadImages(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_auto_load_images(_arg0, _arg1)
}

// SetCursiveFontFamily: set the KitSettings:cursive-font-family property.
func (settings *Settings) SetCursiveFontFamily(cursiveFontFamily string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(cursiveFontFamily)))

	C.webkit_settings_set_cursive_font_family(_arg0, _arg1)
}

// SetDefaultCharset: set the KitSettings:default-charset property.
func (settings *Settings) SetDefaultCharset(defaultCharset string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(defaultCharset)))

	C.webkit_settings_set_default_charset(_arg0, _arg1)
}

// SetDefaultFontFamily: set the KitSettings:default-font-family property.
func (settings *Settings) SetDefaultFontFamily(defaultFontFamily string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(defaultFontFamily)))

	C.webkit_settings_set_default_font_family(_arg0, _arg1)
}

// SetDefaultFontSize: set the KitSettings:default-font-size property.
func (settings *Settings) SetDefaultFontSize(fontSize uint32) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.guint32         // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.guint32(fontSize)

	C.webkit_settings_set_default_font_size(_arg0, _arg1)
}

// SetDefaultMonospaceFontSize: set the KitSettings:default-monospace-font-size
// property.
func (settings *Settings) SetDefaultMonospaceFontSize(fontSize uint32) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.guint32         // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.guint32(fontSize)

	C.webkit_settings_set_default_monospace_font_size(_arg0, _arg1)
}

// SetDrawCompositingIndicators: set the KitSettings:draw-compositing-indicators
// property.
func (settings *Settings) SetDrawCompositingIndicators(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_draw_compositing_indicators(_arg0, _arg1)
}

// SetEnableAccelerated2DCanvas: set the
// KitSettings:enable-accelerated-2d-canvas property.
//
// Deprecated: since version 2.32.
func (settings *Settings) SetEnableAccelerated2DCanvas(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_accelerated_2d_canvas(_arg0, _arg1)
}

// SetEnableBackForwardNavigationGestures: set the
// KitSettings:enable-back-forward-navigation-gestures property.
func (settings *Settings) SetEnableBackForwardNavigationGestures(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_back_forward_navigation_gestures(_arg0, _arg1)
}

// SetEnableCaretBrowsing: set the KitSettings:enable-caret-browsing property.
func (settings *Settings) SetEnableCaretBrowsing(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_caret_browsing(_arg0, _arg1)
}

// SetEnableDeveloperExtras: set the KitSettings:enable-developer-extras
// property.
func (settings *Settings) SetEnableDeveloperExtras(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_developer_extras(_arg0, _arg1)
}

// SetEnableDnsPrefetching: set the KitSettings:enable-dns-prefetching property.
func (settings *Settings) SetEnableDnsPrefetching(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_dns_prefetching(_arg0, _arg1)
}

// SetEnableEncryptedMedia: set the KitSettings:enable-encrypted-media property.
func (settings *Settings) SetEnableEncryptedMedia(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_encrypted_media(_arg0, _arg1)
}

// SetEnableFrameFlattening: set the KitSettings:enable-frame-flattening
// property.
func (settings *Settings) SetEnableFrameFlattening(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_frame_flattening(_arg0, _arg1)
}

// SetEnableFullscreen: set the KitSettings:enable-fullscreen property.
func (settings *Settings) SetEnableFullscreen(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_fullscreen(_arg0, _arg1)
}

// SetEnableHtml5Database: set the KitSettings:enable-html5-database property.
func (settings *Settings) SetEnableHtml5Database(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_html5_database(_arg0, _arg1)
}

// SetEnableHtml5LocalStorage: set the KitSettings:enable-html5-local-storage
// property.
func (settings *Settings) SetEnableHtml5LocalStorage(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_html5_local_storage(_arg0, _arg1)
}

// SetEnableHyperlinkAuditing: set the KitSettings:enable-hyperlink-auditing
// property.
func (settings *Settings) SetEnableHyperlinkAuditing(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_hyperlink_auditing(_arg0, _arg1)
}

// SetEnableJava: set the KitSettings:enable-java property.
func (settings *Settings) SetEnableJava(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_java(_arg0, _arg1)
}

// SetEnableJavascript: set the KitSettings:enable-javascript property.
func (settings *Settings) SetEnableJavascript(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_javascript(_arg0, _arg1)
}

// SetEnableJavascriptMarkup: set the KitSettings:enable-javascript-markup
// property.
func (settings *Settings) SetEnableJavascriptMarkup(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_javascript_markup(_arg0, _arg1)
}

// SetEnableMedia: set the KitSettings:enable-media property.
func (settings *Settings) SetEnableMedia(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_media(_arg0, _arg1)
}

// SetEnableMediaCapabilities: set the KitSettings:enable-media-capabilities
// property.
func (settings *Settings) SetEnableMediaCapabilities(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_media_capabilities(_arg0, _arg1)
}

// SetEnableMediaStream: set the KitSettings:enable-media-stream property.
func (settings *Settings) SetEnableMediaStream(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_media_stream(_arg0, _arg1)
}

// SetEnableMediasource: set the KitSettings:enable-mediasource property.
func (settings *Settings) SetEnableMediasource(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_mediasource(_arg0, _arg1)
}

// SetEnableMockCaptureDevices: set the KitSettings:enable-mock-capture-devices
// property.
func (settings *Settings) SetEnableMockCaptureDevices(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_mock_capture_devices(_arg0, _arg1)
}

// SetEnableOfflineWebApplicationCache: set the
// KitSettings:enable-offline-web-application-cache property.
func (settings *Settings) SetEnableOfflineWebApplicationCache(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_offline_web_application_cache(_arg0, _arg1)
}

// SetEnablePageCache: set the KitSettings:enable-page-cache property.
func (settings *Settings) SetEnablePageCache(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_page_cache(_arg0, _arg1)
}

// SetEnablePlugins: set the KitSettings:enable-plugins property.
//
// Deprecated: since version 2.32.
func (settings *Settings) SetEnablePlugins(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_plugins(_arg0, _arg1)
}

// SetEnablePrivateBrowsing: set the KitSettings:enable-private-browsing
// property.
//
// Deprecated: Use KitWebView:is-ephemeral or KitWebContext:is-ephemeral
// instead.
func (settings *Settings) SetEnablePrivateBrowsing(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_private_browsing(_arg0, _arg1)
}

// SetEnableResizableTextAreas: set the KitSettings:enable-resizable-text-areas
// property.
func (settings *Settings) SetEnableResizableTextAreas(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_resizable_text_areas(_arg0, _arg1)
}

// SetEnableSiteSpecificQuirks: set the KitSettings:enable-site-specific-quirks
// property.
func (settings *Settings) SetEnableSiteSpecificQuirks(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_site_specific_quirks(_arg0, _arg1)
}

// SetEnableSmoothScrolling: set the KitSettings:enable-smooth-scrolling
// property.
func (settings *Settings) SetEnableSmoothScrolling(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_smooth_scrolling(_arg0, _arg1)
}

// SetEnableSpatialNavigation: set the KitSettings:enable-spatial-navigation
// property.
func (settings *Settings) SetEnableSpatialNavigation(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_spatial_navigation(_arg0, _arg1)
}

// SetEnableTabsToLinks: set the KitSettings:enable-tabs-to-links property.
func (settings *Settings) SetEnableTabsToLinks(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_tabs_to_links(_arg0, _arg1)
}

// SetEnableWebaudio: set the KitSettings:enable-webaudio property.
func (settings *Settings) SetEnableWebaudio(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_webaudio(_arg0, _arg1)
}

// SetEnableWebgl: set the KitSettings:enable-webgl property.
func (settings *Settings) SetEnableWebgl(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_webgl(_arg0, _arg1)
}

// SetEnableWriteConsoleMessagesToStdout: set the
// KitSettings:enable-write-console-messages-to-stdout property.
func (settings *Settings) SetEnableWriteConsoleMessagesToStdout(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_write_console_messages_to_stdout(_arg0, _arg1)
}

// SetEnableXssAuditor: set the KitSettings:enable-xss-auditor property.
func (settings *Settings) SetEnableXssAuditor(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_xss_auditor(_arg0, _arg1)
}

// SetFantasyFontFamily: set the KitSettings:fantasy-font-family property.
func (settings *Settings) SetFantasyFontFamily(fantasyFontFamily string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(fantasyFontFamily)))

	C.webkit_settings_set_fantasy_font_family(_arg0, _arg1)
}

// SetHardwareAccelerationPolicy: set the
// KitSettings:hardware-acceleration-policy property.
func (settings *Settings) SetHardwareAccelerationPolicy(policy HardwareAccelerationPolicy) {
	var _arg0 *C.WebKitSettings                  // out
	var _arg1 C.WebKitHardwareAccelerationPolicy // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.WebKitHardwareAccelerationPolicy(policy)

	C.webkit_settings_set_hardware_acceleration_policy(_arg0, _arg1)
}

// SetJavascriptCanAccessClipboard: set the
// KitSettings:javascript-can-access-clipboard property.
func (settings *Settings) SetJavascriptCanAccessClipboard(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_javascript_can_access_clipboard(_arg0, _arg1)
}

// SetJavascriptCanOpenWindowsAutomatically: set the
// KitSettings:javascript-can-open-windows-automatically property.
func (settings *Settings) SetJavascriptCanOpenWindowsAutomatically(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_javascript_can_open_windows_automatically(_arg0, _arg1)
}

// SetLoadIconsIgnoringImageLoadSetting: set the
// KitSettings:load-icons-ignoring-image-load-setting property.
func (settings *Settings) SetLoadIconsIgnoringImageLoadSetting(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_load_icons_ignoring_image_load_setting(_arg0, _arg1)
}

// SetMediaContentTypesRequiringHardwareSupport: set the
// KitSettings:media-content-types-requiring-hardware-support property.
func (settings *Settings) SetMediaContentTypesRequiringHardwareSupport(contentTypes string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(contentTypes)))

	C.webkit_settings_set_media_content_types_requiring_hardware_support(_arg0, _arg1)
}

// SetMediaPlaybackAllowsInline: set the
// KitSettings:media-playback-allows-inline property.
func (settings *Settings) SetMediaPlaybackAllowsInline(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_media_playback_allows_inline(_arg0, _arg1)
}

// SetMediaPlaybackRequiresUserGesture: set the
// KitSettings:media-playback-requires-user-gesture property.
func (settings *Settings) SetMediaPlaybackRequiresUserGesture(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_media_playback_requires_user_gesture(_arg0, _arg1)
}

// SetMinimumFontSize: set the KitSettings:minimum-font-size property.
func (settings *Settings) SetMinimumFontSize(fontSize uint32) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.guint32         // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.guint32(fontSize)

	C.webkit_settings_set_minimum_font_size(_arg0, _arg1)
}

// SetMonospaceFontFamily: set the KitSettings:monospace-font-family property.
func (settings *Settings) SetMonospaceFontFamily(monospaceFontFamily string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(monospaceFontFamily)))

	C.webkit_settings_set_monospace_font_family(_arg0, _arg1)
}

// SetPictographFontFamily: set the KitSettings:pictograph-font-family property.
func (settings *Settings) SetPictographFontFamily(pictographFontFamily string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(pictographFontFamily)))

	C.webkit_settings_set_pictograph_font_family(_arg0, _arg1)
}

// SetPrintBackgrounds: set the KitSettings:print-backgrounds property.
func (settings *Settings) SetPrintBackgrounds(printBackgrounds bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if printBackgrounds {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_print_backgrounds(_arg0, _arg1)
}

// SetSansSerifFontFamily: set the KitSettings:sans-serif-font-family property.
func (settings *Settings) SetSansSerifFontFamily(sansSerifFontFamily string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(sansSerifFontFamily)))

	C.webkit_settings_set_sans_serif_font_family(_arg0, _arg1)
}

// SetSerifFontFamily: set the KitSettings:serif-font-family property.
func (settings *Settings) SetSerifFontFamily(serifFontFamily string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(serifFontFamily)))

	C.webkit_settings_set_serif_font_family(_arg0, _arg1)
}

// SetUserAgent: set the KitSettings:user-agent property.
func (settings *Settings) SetUserAgent(userAgent string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(userAgent)))

	C.webkit_settings_set_user_agent(_arg0, _arg1)
}

// SetUserAgentWithApplicationDetails: set the KitSettings:user-agent property
// by appending the application details to the default user agent. If no
// application name or version is given, the default user agent used will be
// used. If only the version is given, the default engine version is used with
// the given application name.
func (settings *Settings) SetUserAgentWithApplicationDetails(applicationName string, applicationVersion string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out
	var _arg2 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(applicationName)))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(applicationVersion)))

	C.webkit_settings_set_user_agent_with_application_details(_arg0, _arg1, _arg2)
}

// SetZoomTextOnly: set the KitSettings:zoom-text-only property.
func (settings *Settings) SetZoomTextOnly(zoomTextOnly bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(settings.Native()))
	if zoomTextOnly {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_zoom_text_only(_arg0, _arg1)
}

// SettingsFontSizeToPixels: convert points to the equivalent value in pixels,
// based on the current screen DPI. Applications can use this function to
// convert font size values in points to font size values in pixels when setting
// the font size properties of KitSettings.
func SettingsFontSizeToPixels(points uint32) uint32 {
	var _arg1 C.guint32 // out
	var _cret C.guint32 // in

	_arg1 = C.guint32(points)

	_cret = C.webkit_settings_font_size_to_pixels(_arg1)

	var _guint32 uint32 // out

	_guint32 = uint32(_cret)

	return _guint32
}

// SettingsFontSizeToPoints: convert pixels to the equivalent value in points,
// based on the current screen DPI. Applications can use this function to
// convert font size values in pixels to font size values in points when getting
// the font size properties of KitSettings.
func SettingsFontSizeToPoints(pixels uint32) uint32 {
	var _arg1 C.guint32 // out
	var _cret C.guint32 // in

	_arg1 = C.guint32(pixels)

	_cret = C.webkit_settings_font_size_to_points(_arg1)

	var _guint32 uint32 // out

	_guint32 = uint32(_cret)

	return _guint32
}
