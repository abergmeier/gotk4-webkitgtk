// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4-webkitgtk/pkg/soup/v2"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

// glib.Type values for WebKitURIResponse.go.
var GTypeURIResponse = externglib.Type(C.webkit_uri_response_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeURIResponse, F: marshalURIResponse},
	})
}

// URIResponseOverrider contains methods that are overridable.
type URIResponseOverrider interface {
}

type URIResponse struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*URIResponse)(nil)
)

func classInitURIResponser(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapURIResponse(obj *externglib.Object) *URIResponse {
	return &URIResponse{
		Object: obj,
	}
}

func marshalURIResponse(p uintptr) (interface{}, error) {
	return wrapURIResponse(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ContentLength: get the expected content length of the KitURIResponse. It can
// be 0 if the server provided an incorrect or missing Content-Length.
//
// The function returns the following values:
//
//    - guint64: expected content length of response.
//
func (response *URIResponse) ContentLength() uint64 {
	var _arg0 *C.WebKitURIResponse // out
	var _cret C.guint64            // in

	_arg0 = (*C.WebKitURIResponse)(unsafe.Pointer(externglib.InternObject(response).Native()))

	_cret = C.webkit_uri_response_get_content_length(_arg0)
	runtime.KeepAlive(response)

	var _guint64 uint64 // out

	_guint64 = uint64(_cret)

	return _guint64
}

// HTTPHeaders: get the HTTP headers of a KitURIResponse as a MessageHeaders.
//
// The function returns the following values:
//
//    - messageHeaders with the HTTP headers of response or NULL if response is
//      not an HTTP response.
//
func (response *URIResponse) HTTPHeaders() *soup.MessageHeaders {
	var _arg0 *C.WebKitURIResponse  // out
	var _cret *C.SoupMessageHeaders // in

	_arg0 = (*C.WebKitURIResponse)(unsafe.Pointer(externglib.InternObject(response).Native()))

	_cret = C.webkit_uri_response_get_http_headers(_arg0)
	runtime.KeepAlive(response)

	var _messageHeaders *soup.MessageHeaders // out

	_messageHeaders = (*soup.MessageHeaders)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _messageHeaders
}

// The function returns the following values:
//
//    - utf8: MIME type of the KitURIResponse.
//
func (response *URIResponse) MIMEType() string {
	var _arg0 *C.WebKitURIResponse // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitURIResponse)(unsafe.Pointer(externglib.InternObject(response).Native()))

	_cret = C.webkit_uri_response_get_mime_type(_arg0)
	runtime.KeepAlive(response)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// StatusCode: get the status code of the KitURIResponse as returned by the
// server. It will normally be a KnownStatusCode, for example SOUP_STATUS_OK,
// though the server can respond with any unsigned integer.
//
// The function returns the following values:
//
//    - guint status code of response.
//
func (response *URIResponse) StatusCode() uint {
	var _arg0 *C.WebKitURIResponse // out
	var _cret C.guint              // in

	_arg0 = (*C.WebKitURIResponse)(unsafe.Pointer(externglib.InternObject(response).Native()))

	_cret = C.webkit_uri_response_get_status_code(_arg0)
	runtime.KeepAlive(response)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// SuggestedFilename: get the suggested filename for response, as specified by
// the 'Content-Disposition' HTTP header, or NULL if it's not present.
//
// The function returns the following values:
//
//    - utf8: suggested filename or NULL if the 'Content-Disposition' HTTP header
//      is not present.
//
func (response *URIResponse) SuggestedFilename() string {
	var _arg0 *C.WebKitURIResponse // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitURIResponse)(unsafe.Pointer(externglib.InternObject(response).Native()))

	_cret = C.webkit_uri_response_get_suggested_filename(_arg0)
	runtime.KeepAlive(response)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function returns the following values:
//
//    - utf8: uri of the KitURIResponse.
//
func (response *URIResponse) URI() string {
	var _arg0 *C.WebKitURIResponse // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitURIResponse)(unsafe.Pointer(externglib.InternObject(response).Native()))

	_cret = C.webkit_uri_response_get_uri(_arg0)
	runtime.KeepAlive(response)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}
