// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
// void _gotk4_gio2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_user_content_filter_store_get_type()), F: marshalUserContentFilterStorer},
	})
}

type UserContentFilterStore struct {
	*externglib.Object
}

func wrapUserContentFilterStore(obj *externglib.Object) *UserContentFilterStore {
	return &UserContentFilterStore{
		Object: obj,
	}
}

func marshalUserContentFilterStorer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapUserContentFilterStore(obj), nil
}

// NewUserContentFilterStore: create a new KitUserContentFilterStore to
// manipulate filters stored at storage_path. The path must point to a local
// filesystem, and will be created if needed.
func NewUserContentFilterStore(storagePath string) *UserContentFilterStore {
	var _arg1 *C.gchar                        // out
	var _cret *C.WebKitUserContentFilterStore // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(storagePath)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_user_content_filter_store_new(_arg1)
	runtime.KeepAlive(storagePath)

	var _userContentFilterStore *UserContentFilterStore // out

	_userContentFilterStore = wrapUserContentFilterStore(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _userContentFilterStore
}

// FetchIdentifiers: asynchronously retrieve a list of the identifiers for all
// the stored filters.
//
// When the operation is finished, callback will be invoked, which then can use
// webkit_user_content_filter_store_fetch_identifiers_finish() to obtain the
// list of filter identifiers.
func (store *UserContentFilterStore) FetchIdentifiers(ctx context.Context, callback gio.AsyncReadyCallback) {
	var _arg0 *C.WebKitUserContentFilterStore // out
	var _arg1 *C.GCancellable                 // out
	var _arg2 C.GAsyncReadyCallback           // out
	var _arg3 C.gpointer

	_arg0 = (*C.WebKitUserContentFilterStore)(unsafe.Pointer(store.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	if callback != nil {
		_arg2 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg3 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.webkit_user_content_filter_store_fetch_identifiers(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(store)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(callback)
}

// FetchIdentifiersFinish finishes an asynchronous fetch of the list of
// identifiers for the stored filters previously started with
// webkit_user_content_filter_store_fetch_identifiers().
func (store *UserContentFilterStore) FetchIdentifiersFinish(result gio.AsyncResulter) []string {
	var _arg0 *C.WebKitUserContentFilterStore // out
	var _arg1 *C.GAsyncResult                 // out
	var _cret **C.gchar                       // in

	_arg0 = (*C.WebKitUserContentFilterStore)(unsafe.Pointer(store.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.webkit_user_content_filter_store_fetch_identifiers_finish(_arg0, _arg1)
	runtime.KeepAlive(store)
	runtime.KeepAlive(result)

	var _utf8s []string // out

	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _utf8s
}

func (store *UserContentFilterStore) Path() string {
	var _arg0 *C.WebKitUserContentFilterStore // out
	var _cret *C.gchar                        // in

	_arg0 = (*C.WebKitUserContentFilterStore)(unsafe.Pointer(store.Native()))

	_cret = C.webkit_user_content_filter_store_get_path(_arg0)
	runtime.KeepAlive(store)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Load: asynchronously load a content filter given its identifier. The filter
// must have been previously stored using
// webkit_user_content_filter_store_save().
//
// When the operation is finished, callback will be invoked, which then can use
// webkit_user_content_filter_store_load_finish() to obtain the resulting
// filter.
func (store *UserContentFilterStore) Load(ctx context.Context, identifier string, callback gio.AsyncReadyCallback) {
	var _arg0 *C.WebKitUserContentFilterStore // out
	var _arg2 *C.GCancellable                 // out
	var _arg1 *C.gchar                        // out
	var _arg3 C.GAsyncReadyCallback           // out
	var _arg4 C.gpointer

	_arg0 = (*C.WebKitUserContentFilterStore)(unsafe.Pointer(store.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(identifier)))
	defer C.free(unsafe.Pointer(_arg1))
	if callback != nil {
		_arg3 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg4 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.webkit_user_content_filter_store_load(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(store)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(identifier)
	runtime.KeepAlive(callback)
}

// LoadFinish finishes an asynchronous filter load previously started with
// webkit_user_content_filter_store_load().
func (store *UserContentFilterStore) LoadFinish(result gio.AsyncResulter) (*UserContentFilter, error) {
	var _arg0 *C.WebKitUserContentFilterStore // out
	var _arg1 *C.GAsyncResult                 // out
	var _cret *C.WebKitUserContentFilter      // in
	var _cerr *C.GError                       // in

	_arg0 = (*C.WebKitUserContentFilterStore)(unsafe.Pointer(store.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.webkit_user_content_filter_store_load_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(store)
	runtime.KeepAlive(result)

	var _userContentFilter *UserContentFilter // out
	var _goerr error                          // out

	_userContentFilter = (*UserContentFilter)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_userContentFilter)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.webkit_user_content_filter_unref((*C.WebKitUserContentFilter)(intern.C))
		},
	)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _userContentFilter, _goerr
}

// Remove: asynchronously remove a content filter given its identifier.
//
// When the operation is finished, callback will be invoked, which then can use
// webkit_user_content_filter_store_remove_finish() to check whether the removal
// was successful.
func (store *UserContentFilterStore) Remove(ctx context.Context, identifier string, callback gio.AsyncReadyCallback) {
	var _arg0 *C.WebKitUserContentFilterStore // out
	var _arg2 *C.GCancellable                 // out
	var _arg1 *C.gchar                        // out
	var _arg3 C.GAsyncReadyCallback           // out
	var _arg4 C.gpointer

	_arg0 = (*C.WebKitUserContentFilterStore)(unsafe.Pointer(store.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(identifier)))
	defer C.free(unsafe.Pointer(_arg1))
	if callback != nil {
		_arg3 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg4 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.webkit_user_content_filter_store_remove(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(store)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(identifier)
	runtime.KeepAlive(callback)
}

// RemoveFinish finishes an asynchronous filter removal previously started with
// webkit_user_content_filter_store_remove().
func (store *UserContentFilterStore) RemoveFinish(result gio.AsyncResulter) error {
	var _arg0 *C.WebKitUserContentFilterStore // out
	var _arg1 *C.GAsyncResult                 // out
	var _cerr *C.GError                       // in

	_arg0 = (*C.WebKitUserContentFilterStore)(unsafe.Pointer(store.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.webkit_user_content_filter_store_remove_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(store)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Save: asynchronously save a content filter from a source rule set in the
// WebKit content extesions JSON format
// (https://webkit.org/blog/3476/content-blockers-first-look/).
//
// The identifier can be used afterwards to refer to the filter when using
// webkit_user_content_filter_store_remove() and
// webkit_user_content_filter_store_load(). When the identifier has been used in
// the past, the new filter source will replace the one saved beforehand for the
// same identifier.
//
// When the operation is finished, callback will be invoked, which then can use
// webkit_user_content_filter_store_save_finish() to obtain the resulting
// filter.
func (store *UserContentFilterStore) Save(ctx context.Context, identifier string, source *glib.Bytes, callback gio.AsyncReadyCallback) {
	var _arg0 *C.WebKitUserContentFilterStore // out
	var _arg3 *C.GCancellable                 // out
	var _arg1 *C.gchar                        // out
	var _arg2 *C.GBytes                       // out
	var _arg4 C.GAsyncReadyCallback           // out
	var _arg5 C.gpointer

	_arg0 = (*C.WebKitUserContentFilterStore)(unsafe.Pointer(store.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(identifier)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GBytes)(gextras.StructNative(unsafe.Pointer(source)))
	if callback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg5 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.webkit_user_content_filter_store_save(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(store)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(identifier)
	runtime.KeepAlive(source)
	runtime.KeepAlive(callback)
}

// SaveFinish finishes an asynchronous filter save previously started with
// webkit_user_content_filter_store_save().
func (store *UserContentFilterStore) SaveFinish(result gio.AsyncResulter) (*UserContentFilter, error) {
	var _arg0 *C.WebKitUserContentFilterStore // out
	var _arg1 *C.GAsyncResult                 // out
	var _cret *C.WebKitUserContentFilter      // in
	var _cerr *C.GError                       // in

	_arg0 = (*C.WebKitUserContentFilterStore)(unsafe.Pointer(store.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.webkit_user_content_filter_store_save_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(store)
	runtime.KeepAlive(result)

	var _userContentFilter *UserContentFilter // out
	var _goerr error                          // out

	_userContentFilter = (*UserContentFilter)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_userContentFilter)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.webkit_user_content_filter_unref((*C.WebKitUserContentFilter)(intern.C))
		},
	)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _userContentFilter, _goerr
}

// SaveFromFile: asynchronously save a content filter from the contents of a
// file, which must be native to the platform, as checked by g_file_is_native().
// See webkit_user_content_filter_store_save() for more details.
//
// When the operation is finished, callback will be invoked, which then can use
// webkit_user_content_filter_store_save_finish() to obtain the resulting
// filter.
func (store *UserContentFilterStore) SaveFromFile(ctx context.Context, identifier string, file gio.Filer, callback gio.AsyncReadyCallback) {
	var _arg0 *C.WebKitUserContentFilterStore // out
	var _arg3 *C.GCancellable                 // out
	var _arg1 *C.gchar                        // out
	var _arg2 *C.GFile                        // out
	var _arg4 C.GAsyncReadyCallback           // out
	var _arg5 C.gpointer

	_arg0 = (*C.WebKitUserContentFilterStore)(unsafe.Pointer(store.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(identifier)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GFile)(unsafe.Pointer(file.Native()))
	if callback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg5 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.webkit_user_content_filter_store_save_from_file(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(store)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(identifier)
	runtime.KeepAlive(file)
	runtime.KeepAlive(callback)
}

// SaveFromFileFinish finishes and asynchronous filter save previously started
// with webkit_user_content_filter_store_save_from_file().
func (store *UserContentFilterStore) SaveFromFileFinish(result gio.AsyncResulter) (*UserContentFilter, error) {
	var _arg0 *C.WebKitUserContentFilterStore // out
	var _arg1 *C.GAsyncResult                 // out
	var _cret *C.WebKitUserContentFilter      // in
	var _cerr *C.GError                       // in

	_arg0 = (*C.WebKitUserContentFilterStore)(unsafe.Pointer(store.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.webkit_user_content_filter_store_save_from_file_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(store)
	runtime.KeepAlive(result)

	var _userContentFilter *UserContentFilter // out
	var _goerr error                          // out

	_userContentFilter = (*UserContentFilter)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_userContentFilter)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.webkit_user_content_filter_unref((*C.WebKitUserContentFilter)(intern.C))
		},
	)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _userContentFilter, _goerr
}
