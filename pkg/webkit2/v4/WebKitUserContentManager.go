// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_user_content_manager_get_type()), F: marshalUserContentManagerer},
	})
}

type UserContentManager struct {
	*externglib.Object
}

var _ gextras.Nativer = (*UserContentManager)(nil)

func wrapUserContentManager(obj *externglib.Object) *UserContentManager {
	return &UserContentManager{
		Object: obj,
	}
}

func marshalUserContentManagerer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapUserContentManager(obj), nil
}

// NewUserContentManager creates a new user content manager.
func NewUserContentManager() *UserContentManager {
	var _cret *C.WebKitUserContentManager // in

	_cret = C.webkit_user_content_manager_new()

	var _userContentManager *UserContentManager // out

	_userContentManager = wrapUserContentManager(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _userContentManager
}

// AddFilter adds a KitUserContentFilter to the given KitUserContentManager. The
// same KitUserContentFilter can be reused with multiple KitUserContentManager
// instances.
//
// Filters need to be saved and loaded from KitUserContentFilterStore.
func (manager *UserContentManager) AddFilter(filter *UserContentFilter) {
	var _arg0 *C.WebKitUserContentManager // out
	var _arg1 *C.WebKitUserContentFilter  // out

	_arg0 = (*C.WebKitUserContentManager)(unsafe.Pointer(manager.Native()))
	_arg1 = (*C.WebKitUserContentFilter)(gextras.StructNative(unsafe.Pointer(filter)))

	C.webkit_user_content_manager_add_filter(_arg0, _arg1)
}

// AddScript adds a KitUserScript to the given KitUserContentManager. The same
// KitUserScript can be reused with multiple KitUserContentManager instances.
func (manager *UserContentManager) AddScript(script *UserScript) {
	var _arg0 *C.WebKitUserContentManager // out
	var _arg1 *C.WebKitUserScript         // out

	_arg0 = (*C.WebKitUserContentManager)(unsafe.Pointer(manager.Native()))
	_arg1 = (*C.WebKitUserScript)(gextras.StructNative(unsafe.Pointer(script)))

	C.webkit_user_content_manager_add_script(_arg0, _arg1)
}

// AddStyleSheet adds a KitUserStyleSheet to the given KitUserContentManager.
// The same KitUserStyleSheet can be reused with multiple KitUserContentManager
// instances.
func (manager *UserContentManager) AddStyleSheet(stylesheet *UserStyleSheet) {
	var _arg0 *C.WebKitUserContentManager // out
	var _arg1 *C.WebKitUserStyleSheet     // out

	_arg0 = (*C.WebKitUserContentManager)(unsafe.Pointer(manager.Native()))
	_arg1 = (*C.WebKitUserStyleSheet)(gextras.StructNative(unsafe.Pointer(stylesheet)))

	C.webkit_user_content_manager_add_style_sheet(_arg0, _arg1)
}

// RegisterScriptMessageHandler registers a new user script message handler.
// After it is registered, scripts can use
// window.webkit.messageHandlers.&lt;name&gt;.postMessage(value) to send
// messages. Those messages are received by connecting handlers to the
// KitUserContentManager::script-message-received signal. The handler name is
// used as the detail of the signal. To avoid race conditions between
// registering the handler name, and starting to receive the signals, it is
// recommended to connect to the signal *before* registering the handler name:
//
// <informalexample><programlisting> WebKitWebView *view = webkit_web_view_new
// (); WebKitUserContentManager *manager =
// webkit_web_view_get_user_content_manager (); g_signal_connect (manager,
// "script-message-received::foobar", G_CALLBACK (handle_script_message), NULL);
// webkit_user_content_manager_register_script_message_handler (manager,
// "foobar"); </programlisting></informalexample>
//
// Registering a script message handler will fail if the requested name has been
// already registered before.
func (manager *UserContentManager) RegisterScriptMessageHandler(name string) bool {
	var _arg0 *C.WebKitUserContentManager // out
	var _arg1 *C.gchar                    // out
	var _cret C.gboolean                  // in

	_arg0 = (*C.WebKitUserContentManager)(unsafe.Pointer(manager.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))

	_cret = C.webkit_user_content_manager_register_script_message_handler(_arg0, _arg1)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RegisterScriptMessageHandlerInWorld registers a new user script message
// handler in script world with name world_name. See
// webkit_user_content_manager_register_script_message_handler() for full
// description.
//
// Registering a script message handler will fail if the requested name has been
// already registered before.
func (manager *UserContentManager) RegisterScriptMessageHandlerInWorld(name string, worldName string) bool {
	var _arg0 *C.WebKitUserContentManager // out
	var _arg1 *C.gchar                    // out
	var _arg2 *C.gchar                    // out
	var _cret C.gboolean                  // in

	_arg0 = (*C.WebKitUserContentManager)(unsafe.Pointer(manager.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(worldName)))

	_cret = C.webkit_user_content_manager_register_script_message_handler_in_world(_arg0, _arg1, _arg2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RemoveAllFilters removes all content filters from the given
// KitUserContentManager.
func (manager *UserContentManager) RemoveAllFilters() {
	var _arg0 *C.WebKitUserContentManager // out

	_arg0 = (*C.WebKitUserContentManager)(unsafe.Pointer(manager.Native()))

	C.webkit_user_content_manager_remove_all_filters(_arg0)
}

// RemoveAllScripts removes all user scripts from the given
// KitUserContentManager
//
// See also webkit_user_content_manager_remove_script().
func (manager *UserContentManager) RemoveAllScripts() {
	var _arg0 *C.WebKitUserContentManager // out

	_arg0 = (*C.WebKitUserContentManager)(unsafe.Pointer(manager.Native()))

	C.webkit_user_content_manager_remove_all_scripts(_arg0)
}

// RemoveAllStyleSheets removes all user style sheets from the given
// KitUserContentManager.
func (manager *UserContentManager) RemoveAllStyleSheets() {
	var _arg0 *C.WebKitUserContentManager // out

	_arg0 = (*C.WebKitUserContentManager)(unsafe.Pointer(manager.Native()))

	C.webkit_user_content_manager_remove_all_style_sheets(_arg0)
}

// RemoveFilter removes a filter from the given KitUserContentManager.
//
// Since 2.24
func (manager *UserContentManager) RemoveFilter(filter *UserContentFilter) {
	var _arg0 *C.WebKitUserContentManager // out
	var _arg1 *C.WebKitUserContentFilter  // out

	_arg0 = (*C.WebKitUserContentManager)(unsafe.Pointer(manager.Native()))
	_arg1 = (*C.WebKitUserContentFilter)(gextras.StructNative(unsafe.Pointer(filter)))

	C.webkit_user_content_manager_remove_filter(_arg0, _arg1)
}

// RemoveFilterByID removes a filter from the given KitUserContentManager given
// the identifier of a KitUserContentFilter as returned by
// webkit_user_content_filter_get_identifier().
func (manager *UserContentManager) RemoveFilterByID(filterId string) {
	var _arg0 *C.WebKitUserContentManager // out
	var _arg1 *C.char                     // out

	_arg0 = (*C.WebKitUserContentManager)(unsafe.Pointer(manager.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(filterId)))

	C.webkit_user_content_manager_remove_filter_by_id(_arg0, _arg1)
}

// RemoveScript removes a KitUserScript from the given KitUserContentManager.
//
// See also webkit_user_content_manager_remove_all_scripts().
func (manager *UserContentManager) RemoveScript(script *UserScript) {
	var _arg0 *C.WebKitUserContentManager // out
	var _arg1 *C.WebKitUserScript         // out

	_arg0 = (*C.WebKitUserContentManager)(unsafe.Pointer(manager.Native()))
	_arg1 = (*C.WebKitUserScript)(gextras.StructNative(unsafe.Pointer(script)))

	C.webkit_user_content_manager_remove_script(_arg0, _arg1)
}

// RemoveStyleSheet removes a KitUserStyleSheet from the given
// KitUserContentManager.
//
// See also webkit_user_content_manager_remove_all_style_sheets().
func (manager *UserContentManager) RemoveStyleSheet(stylesheet *UserStyleSheet) {
	var _arg0 *C.WebKitUserContentManager // out
	var _arg1 *C.WebKitUserStyleSheet     // out

	_arg0 = (*C.WebKitUserContentManager)(unsafe.Pointer(manager.Native()))
	_arg1 = (*C.WebKitUserStyleSheet)(gextras.StructNative(unsafe.Pointer(stylesheet)))

	C.webkit_user_content_manager_remove_style_sheet(_arg0, _arg1)
}

// UnregisterScriptMessageHandler unregisters a previously registered message
// handler.
//
// Note that this does *not* disconnect handlers for the
// KitUserContentManager::script-message-received signal; they will be kept
// connected, but the signal will not be emitted unless the handler name is
// registered again.
//
// See also webkit_user_content_manager_register_script_message_handler().
func (manager *UserContentManager) UnregisterScriptMessageHandler(name string) {
	var _arg0 *C.WebKitUserContentManager // out
	var _arg1 *C.gchar                    // out

	_arg0 = (*C.WebKitUserContentManager)(unsafe.Pointer(manager.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))

	C.webkit_user_content_manager_unregister_script_message_handler(_arg0, _arg1)
}

// UnregisterScriptMessageHandlerInWorld unregisters a previously registered
// message handler in script world with name world_name.
//
// Note that this does *not* disconnect handlers for the
// KitUserContentManager::script-message-received signal; they will be kept
// connected, but the signal will not be emitted unless the handler name is
// registered again.
//
// See also
// webkit_user_content_manager_register_script_message_handler_in_world().
func (manager *UserContentManager) UnregisterScriptMessageHandlerInWorld(name string, worldName string) {
	var _arg0 *C.WebKitUserContentManager // out
	var _arg1 *C.gchar                    // out
	var _arg2 *C.gchar                    // out

	_arg0 = (*C.WebKitUserContentManager)(unsafe.Pointer(manager.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(worldName)))

	C.webkit_user_content_manager_unregister_script_message_handler_in_world(_arg0, _arg1, _arg2)
}
