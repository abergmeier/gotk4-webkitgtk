// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_user_message_error_get_type()), F: marshalUserMessageError},
		{T: externglib.Type(C.webkit_user_message_get_type()), F: marshalUserMessager},
	})
}

// UserMessageError: enum values used to denote errors happening when sending
// user messages.
type UserMessageError int

const (
	// UserMessageUnhandledMessage was not handled by the receiver.
	UserMessageUnhandledMessage UserMessageError = iota
)

func marshalUserMessageError(p uintptr) (interface{}, error) {
	return UserMessageError(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// String returns the name in string for UserMessageError.
func (u UserMessageError) String() string {
	switch u {
	case UserMessageUnhandledMessage:
		return "Message"
	default:
		return fmt.Sprintf("UserMessageError(%d)", u)
	}
}

type UserMessage struct {
	externglib.InitiallyUnowned
}

var _ gextras.Nativer = (*UserMessage)(nil)

func wrapUserMessage(obj *externglib.Object) *UserMessage {
	return &UserMessage{
		InitiallyUnowned: externglib.InitiallyUnowned{
			Object: obj,
		},
	}
}

func marshalUserMessager(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapUserMessage(obj), nil
}

// NewUserMessage: create a new KitUserMessage with name.
func NewUserMessage(name string, parameters *glib.Variant) *UserMessage {
	var _arg1 *C.char              // out
	var _arg2 *C.GVariant          // out
	var _cret *C.WebKitUserMessage // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(name)))
	_arg2 = (*C.GVariant)(gextras.StructNative(unsafe.Pointer(parameters)))

	_cret = C.webkit_user_message_new(_arg1, _arg2)

	var _userMessage *UserMessage // out

	_userMessage = wrapUserMessage(externglib.Take(unsafe.Pointer(_cret)))

	return _userMessage
}

// NewUserMessageWithFdList: create a new KitUserMessage including also a list
// of UNIX file descriptors to be sent.
func NewUserMessageWithFdList(name string, parameters *glib.Variant, fdList *gio.UnixFDList) *UserMessage {
	var _arg1 *C.char              // out
	var _arg2 *C.GVariant          // out
	var _arg3 *C.GUnixFDList       // out
	var _cret *C.WebKitUserMessage // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(name)))
	_arg2 = (*C.GVariant)(gextras.StructNative(unsafe.Pointer(parameters)))
	_arg3 = (*C.GUnixFDList)(unsafe.Pointer(fdList.Native()))

	_cret = C.webkit_user_message_new_with_fd_list(_arg1, _arg2, _arg3)

	var _userMessage *UserMessage // out

	_userMessage = wrapUserMessage(externglib.Take(unsafe.Pointer(_cret)))

	return _userMessage
}

// FdList: get the message list of file descritpor
func (message *UserMessage) FdList() *gio.UnixFDList {
	var _arg0 *C.WebKitUserMessage // out
	var _cret *C.GUnixFDList       // in

	_arg0 = (*C.WebKitUserMessage)(unsafe.Pointer(message.Native()))

	_cret = C.webkit_user_message_get_fd_list(_arg0)

	var _unixFDList *gio.UnixFDList // out

	{
		obj := externglib.Take(unsafe.Pointer(_cret))
		_unixFDList = &gio.UnixFDList{
			Object: obj,
		}
	}

	return _unixFDList
}

// Name: get the message name
func (message *UserMessage) Name() string {
	var _arg0 *C.WebKitUserMessage // out
	var _cret *C.char              // in

	_arg0 = (*C.WebKitUserMessage)(unsafe.Pointer(message.Native()))

	_cret = C.webkit_user_message_get_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Parameters: get the message parameters
func (message *UserMessage) Parameters() *glib.Variant {
	var _arg0 *C.WebKitUserMessage // out
	var _cret *C.GVariant          // in

	_arg0 = (*C.WebKitUserMessage)(unsafe.Pointer(message.Native()))

	_cret = C.webkit_user_message_get_parameters(_arg0)

	var _variant *glib.Variant // out

	_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_variant, func(v *glib.Variant) {
		C.g_variant_unref((*C.GVariant)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _variant
}

// SendReply: send a reply to message. If reply is floating, it's consumed. You
// can only send a reply to a KitUserMessage that has been received.
func (message *UserMessage) SendReply(reply *UserMessage) {
	var _arg0 *C.WebKitUserMessage // out
	var _arg1 *C.WebKitUserMessage // out

	_arg0 = (*C.WebKitUserMessage)(unsafe.Pointer(message.Native()))
	_arg1 = (*C.WebKitUserMessage)(unsafe.Pointer(reply.Native()))

	C.webkit_user_message_send_reply(_arg0, _arg1)
}
