// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
// void _gotk4_gio2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_web_resource_get_type()), F: marshalWebResourcer},
	})
}

type WebResource struct {
	*externglib.Object
}

var _ gextras.Nativer = (*WebResource)(nil)

func wrapWebResource(obj *externglib.Object) *WebResource {
	return &WebResource{
		Object: obj,
	}
}

func marshalWebResourcer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWebResource(obj), nil
}

// Data: asynchronously get the raw data for resource.
//
// When the operation is finished, callback will be called. You can then call
// webkit_web_resource_get_data_finish() to get the result of the operation.
func (resource *WebResource) Data(ctx context.Context, callback gio.AsyncReadyCallback) {
	var _arg0 *C.WebKitWebResource  // out
	var _arg1 *C.GCancellable       // out
	var _arg2 C.GAsyncReadyCallback // out
	var _arg3 C.gpointer

	_arg0 = (*C.WebKitWebResource)(unsafe.Pointer(resource.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg2 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
	_arg3 = C.gpointer(gbox.AssignOnce(callback))

	C.webkit_web_resource_get_data(_arg0, _arg1, _arg2, _arg3)
}

// Response retrieves the KitURIResponse of the resource load operation. This
// method returns NULL if called before the response is received from the
// server. You can connect to notify::response signal to be notified when the
// response is received.
func (resource *WebResource) Response() *URIResponse {
	var _arg0 *C.WebKitWebResource // out
	var _cret *C.WebKitURIResponse // in

	_arg0 = (*C.WebKitWebResource)(unsafe.Pointer(resource.Native()))

	_cret = C.webkit_web_resource_get_response(_arg0)

	var _uriResponse *URIResponse // out

	_uriResponse = wrapURIResponse(externglib.Take(unsafe.Pointer(_cret)))

	return _uriResponse
}

// URI returns the current active URI of resource. The active URI might change
// during a load operation:
//
// <orderedlist> <listitem><para> When the resource load starts, the active URI
// is the requested URI </para></listitem> <listitem><para> When the initial
// request is sent to the server, KitWebResource::sent-request signal is emitted
// without a redirected response, the active URI is the URI of the request sent
// to the server. </para></listitem> <listitem><para> In case of a server
// redirection, KitWebResource::sent-request signal is emitted again with a
// redirected response, the active URI is the URI the request was redirected to.
// </para></listitem> <listitem><para> When the response is received from the
// server, the active URI is the final one and it will not change again.
// </para></listitem> </orderedlist>
//
// You can monitor the active URI by connecting to the notify::uri signal of
// resource.
func (resource *WebResource) URI() string {
	var _arg0 *C.WebKitWebResource // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitWebResource)(unsafe.Pointer(resource.Native()))

	_cret = C.webkit_web_resource_get_uri(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}
