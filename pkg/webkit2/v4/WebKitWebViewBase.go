// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

// glib.Type values for WebKitWebViewBase.go.
var GTypeWebViewBase = externglib.Type(C.webkit_web_view_base_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeWebViewBase, F: marshalWebViewBase},
	})
}

// WebViewBaseOverrider contains methods that are overridable.
type WebViewBaseOverrider interface {
}

type WebViewBase struct {
	_ [0]func() // equal guard
	gtk.Container
}

var (
	_ gtk.Containerer = (*WebViewBase)(nil)
)

func classInitWebViewBaser(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapWebViewBase(obj *externglib.Object) *WebViewBase {
	return &WebViewBase{
		Container: gtk.Container{
			Widget: gtk.Widget{
				InitiallyUnowned: externglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: gtk.Buildable{
					Object: obj,
				},
			},
		},
	}
}

func marshalWebViewBase(p uintptr) (interface{}, error) {
	return wrapWebViewBase(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
