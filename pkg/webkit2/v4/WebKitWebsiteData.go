// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"runtime"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_website_data_types_get_type()), F: marshalWebsiteDataTypes},
		{T: externglib.Type(C.webkit_website_data_get_type()), F: marshalWebsiteData},
	})
}

// WebsiteDataTypes: enum values with flags representing types of Website data.
type WebsiteDataTypes int

const (
	// WebsiteDataMemoryCache: memory cache.
	WebsiteDataMemoryCache WebsiteDataTypes = 0b1
	// WebsiteDataDiskCache: HTTP disk cache.
	WebsiteDataDiskCache WebsiteDataTypes = 0b10
	// WebsiteDataOfflineApplicationCache: offline web application cache.
	WebsiteDataOfflineApplicationCache WebsiteDataTypes = 0b100
	// WebsiteDataSessionStorage: session storage data.
	WebsiteDataSessionStorage WebsiteDataTypes = 0b1000
	// WebsiteDataLocalStorage: local storage data.
	WebsiteDataLocalStorage WebsiteDataTypes = 0b10000
	// WebsiteDataWebsqlDatabases: webSQL databases. Deprecated 2.24
	WebsiteDataWebsqlDatabases WebsiteDataTypes = 0b100000
	// WebsiteDataIndexeddbDatabases: indexedDB databases.
	WebsiteDataIndexeddbDatabases WebsiteDataTypes = 0b1000000
	// WebsiteDataPluginData plugins data. Deprecated 2.32
	WebsiteDataPluginData WebsiteDataTypes = 0b10000000
	// WebsiteDataCookies: cookies.
	WebsiteDataCookies WebsiteDataTypes = 0b100000000
	// WebsiteDataDeviceIDHashSalt: hash salt used to generate the device ids
	// used by webpages. Since 2.24
	WebsiteDataDeviceIDHashSalt WebsiteDataTypes = 0b1000000000
	// WebsiteDataHstsCache: HSTS cache. Since 2.26
	WebsiteDataHstsCache WebsiteDataTypes = 0b10000000000
	// WebsiteDataITP: intelligent Tracking Prevention data. Since 2.30.
	WebsiteDataITP WebsiteDataTypes = 0b100000000000
	// WebsiteDataServiceWorkerRegistrations: service worker registrations.
	// Since 2.30
	WebsiteDataServiceWorkerRegistrations WebsiteDataTypes = 0b1000000000000
	// WebsiteDataDomCache: DOM (CacheStorage) cache. Since 2.30
	WebsiteDataDomCache WebsiteDataTypes = 0b10000000000000
	// WebsiteDataAll: all types.
	WebsiteDataAll WebsiteDataTypes = 0b11111111111111
)

func marshalWebsiteDataTypes(p uintptr) (interface{}, error) {
	return WebsiteDataTypes(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// String returns the names in string for WebsiteDataTypes.
func (w WebsiteDataTypes) String() string {
	if w == 0 {
		return "WebsiteDataTypes(0)"
	}

	var builder strings.Builder
	builder.Grow(363)

	for w != 0 {
		next := w & (w - 1)
		bit := w - next

		switch bit {
		case WebsiteDataMemoryCache:
			builder.WriteString("MemoryCache|")
		case WebsiteDataDiskCache:
			builder.WriteString("DiskCache|")
		case WebsiteDataOfflineApplicationCache:
			builder.WriteString("OfflineApplicationCache|")
		case WebsiteDataSessionStorage:
			builder.WriteString("SessionStorage|")
		case WebsiteDataLocalStorage:
			builder.WriteString("LocalStorage|")
		case WebsiteDataWebsqlDatabases:
			builder.WriteString("WebsqlDatabases|")
		case WebsiteDataIndexeddbDatabases:
			builder.WriteString("IndexeddbDatabases|")
		case WebsiteDataPluginData:
			builder.WriteString("PluginData|")
		case WebsiteDataCookies:
			builder.WriteString("Cookies|")
		case WebsiteDataDeviceIDHashSalt:
			builder.WriteString("DeviceIDHashSalt|")
		case WebsiteDataHstsCache:
			builder.WriteString("HstsCache|")
		case WebsiteDataITP:
			builder.WriteString("ITP|")
		case WebsiteDataServiceWorkerRegistrations:
			builder.WriteString("ServiceWorkerRegistrations|")
		case WebsiteDataDomCache:
			builder.WriteString("DomCache|")
		case WebsiteDataAll:
			builder.WriteString("All|")
		default:
			builder.WriteString(fmt.Sprintf("WebsiteDataTypes(0b%b)|", bit))
		}

		w = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

type WebsiteData struct {
	nocopy gextras.NoCopy
	native *C.WebKitWebsiteData
}

func marshalWebsiteData(p uintptr) (interface{}, error) {
	b := C.g_value_get_boxed((*C.GValue)(unsafe.Pointer(p)))
	return &WebsiteData{native: (*C.WebKitWebsiteData)(unsafe.Pointer(b))}, nil
}

// Name gets the name of KitWebsiteData. This is the website name, normally
// represented by a domain or host name. All local documents are grouped in the
// same KitWebsiteData using the name "Local files".
func (websiteData *WebsiteData) Name() string {
	var _arg0 *C.WebKitWebsiteData // out
	var _cret *C.char              // in

	_arg0 = (*C.WebKitWebsiteData)(gextras.StructNative(unsafe.Pointer(websiteData)))

	_cret = C.webkit_website_data_get_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Size gets the size of the data of types types in a KitWebsiteData. Note that
// currently the data size is only known for WEBKIT_WEBSITE_DATA_DISK_CACHE data
// type so for all other types 0 will be returned.
func (websiteData *WebsiteData) Size(types WebsiteDataTypes) uint64 {
	var _arg0 *C.WebKitWebsiteData     // out
	var _arg1 C.WebKitWebsiteDataTypes // out
	var _cret C.guint64                // in

	_arg0 = (*C.WebKitWebsiteData)(gextras.StructNative(unsafe.Pointer(websiteData)))
	_arg1 = C.WebKitWebsiteDataTypes(types)

	_cret = C.webkit_website_data_get_size(_arg0, _arg1)

	var _guint64 uint64 // out

	_guint64 = uint64(_cret)

	return _guint64
}

// Types gets the types of data stored in the client for a KitWebsiteData. These
// are the types actually present, not the types queried with
// webkit_website_data_manager_fetch().
func (websiteData *WebsiteData) Types() WebsiteDataTypes {
	var _arg0 *C.WebKitWebsiteData     // out
	var _cret C.WebKitWebsiteDataTypes // in

	_arg0 = (*C.WebKitWebsiteData)(gextras.StructNative(unsafe.Pointer(websiteData)))

	_cret = C.webkit_website_data_get_types(_arg0)

	var _websiteDataTypes WebsiteDataTypes // out

	_websiteDataTypes = WebsiteDataTypes(_cret)

	return _websiteDataTypes
}

// Ref: atomically increments the reference count of website_data by one. This
// function is MT-safe and may be called from any thread.
func (websiteData *WebsiteData) ref() *WebsiteData {
	var _arg0 *C.WebKitWebsiteData // out
	var _cret *C.WebKitWebsiteData // in

	_arg0 = (*C.WebKitWebsiteData)(gextras.StructNative(unsafe.Pointer(websiteData)))

	_cret = C.webkit_website_data_ref(_arg0)

	var _websiteData *WebsiteData // out

	_websiteData = (*WebsiteData)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.webkit_website_data_ref(_cret)
	runtime.SetFinalizer(_websiteData, func(v *WebsiteData) {
		C.webkit_website_data_unref((*C.WebKitWebsiteData)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _websiteData
}

// Unref: atomically decrements the reference count of website_data by one. If
// the reference count drops to 0, all memory allocated by KitWebsiteData is
// released. This function is MT-safe and may be called from any thread.
func (websiteData *WebsiteData) unref() {
	var _arg0 *C.WebKitWebsiteData // out

	_arg0 = (*C.WebKitWebsiteData)(gextras.StructNative(unsafe.Pointer(websiteData)))

	C.webkit_website_data_unref(_arg0)
}
