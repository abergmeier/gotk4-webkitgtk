// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: webkit2gtk-4.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.webkit_user_content_filter_error_get_type()), F: marshalUserContentFilterError},
	})
}

func DownloadErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_download_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)

	return _quark
}

func FaviconDatabaseErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_favicon_database_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)

	return _quark
}

func JavascriptErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_javascript_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)

	return _quark
}

func NetworkErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_network_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)

	return _quark
}

func PluginErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_plugin_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)

	return _quark
}

func PolicyErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_policy_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)

	return _quark
}

func PrintErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_print_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)

	return _quark
}

func SnapshotErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_snapshot_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)

	return _quark
}

type UserContentFilterError C.gint

const (
	// UserContentFilterErrorInvalidSource: JSON source for a content filter is
	// invalid.
	UserContentFilterErrorInvalidSource UserContentFilterError = iota
	// UserContentFilterErrorNotFound: requested content filter could not be
	// found.
	UserContentFilterErrorNotFound
)

func marshalUserContentFilterError(p uintptr) (interface{}, error) {
	return UserContentFilterError(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for UserContentFilterError.
func (u UserContentFilterError) String() string {
	switch u {
	case UserContentFilterErrorInvalidSource:
		return "InvalidSource"
	case UserContentFilterErrorNotFound:
		return "NotFound"
	default:
		return fmt.Sprintf("UserContentFilterError(%d)", u)
	}
}

func UserContentFilterErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_user_content_filter_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)

	return _quark
}

func UserMessageErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_user_message_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)

	return _quark
}
